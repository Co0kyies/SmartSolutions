{"version":3,"file":"bundle.js","sources":["../../node_modules/svelte/internal/index.mjs","../../node_modules/@firebase/util/dist/index.esm2017.js","../../node_modules/@firebase/component/dist/esm/index.esm2017.js","../../node_modules/@firebase/logger/dist/esm/index.esm2017.js","../../node_modules/@firebase/app/dist/esm/index.esm2017.js","../../node_modules/firebase/app/dist/index.esm.js","../../src/firebase.js","../../node_modules/@firebase/database/dist/index.esm2017.js","../../src/Header.svelte","../../src/Nav.svelte","../../src/App.svelte","../../src/main.js"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nlet src_url_equal_anchor;\nfunction src_url_equal(element_src, url) {\n    if (!src_url_equal_anchor) {\n        src_url_equal_anchor = document.createElement('a');\n    }\n    src_url_equal_anchor.href = url;\n    return element_src === src_url_equal_anchor.href;\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn);\n}\nfunction get_all_dirty_from_scope($$scope) {\n    if ($$scope.ctx.length > 32) {\n        const dirty = [];\n        const length = $$scope.ctx.length / 32;\n        for (let i = 0; i < length; i++) {\n            dirty[i] = -1;\n        }\n        return dirty;\n    }\n    return -1;\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\n// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM\n// at the end of hydration without touching the remaining nodes.\nlet is_hydrating = false;\nfunction start_hydrating() {\n    is_hydrating = true;\n}\nfunction end_hydrating() {\n    is_hydrating = false;\n}\nfunction upper_bound(low, high, key, value) {\n    // Return first index of value larger than input value in the range [low, high)\n    while (low < high) {\n        const mid = low + ((high - low) >> 1);\n        if (key(mid) <= value) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;\n}\nfunction init_hydrate(target) {\n    if (target.hydrate_init)\n        return;\n    target.hydrate_init = true;\n    // We know that all children have claim_order values since the unclaimed have been detached if target is not <head>\n    let children = target.childNodes;\n    // If target is <head>, there may be children without claim_order\n    if (target.nodeName === 'HEAD') {\n        const myChildren = [];\n        for (let i = 0; i < children.length; i++) {\n            const node = children[i];\n            if (node.claim_order !== undefined) {\n                myChildren.push(node);\n            }\n        }\n        children = myChildren;\n    }\n    /*\n    * Reorder claimed children optimally.\n    * We can reorder claimed children optimally by finding the longest subsequence of\n    * nodes that are already claimed in order and only moving the rest. The longest\n    * subsequence subsequence of nodes that are claimed in order can be found by\n    * computing the longest increasing subsequence of .claim_order values.\n    *\n    * This algorithm is optimal in generating the least amount of reorder operations\n    * possible.\n    *\n    * Proof:\n    * We know that, given a set of reordering operations, the nodes that do not move\n    * always form an increasing subsequence, since they do not move among each other\n    * meaning that they must be already ordered among each other. Thus, the maximal\n    * set of nodes that do not move form a longest increasing subsequence.\n    */\n    // Compute longest increasing subsequence\n    // m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j\n    const m = new Int32Array(children.length + 1);\n    // Predecessor indices + 1\n    const p = new Int32Array(children.length);\n    m[0] = -1;\n    let longest = 0;\n    for (let i = 0; i < children.length; i++) {\n        const current = children[i].claim_order;\n        // Find the largest subsequence length such that it ends in a value less than our current value\n        // upper_bound returns first greater value, so we subtract one\n        // with fast path for when we are on the current longest subsequence\n        const seqLen = ((longest > 0 && children[m[longest]].claim_order <= current) ? longest + 1 : upper_bound(1, longest, idx => children[m[idx]].claim_order, current)) - 1;\n        p[i] = m[seqLen] + 1;\n        const newLen = seqLen + 1;\n        // We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.\n        m[newLen] = i;\n        longest = Math.max(newLen, longest);\n    }\n    // The longest increasing subsequence of nodes (initially reversed)\n    const lis = [];\n    // The rest of the nodes, nodes that will be moved\n    const toMove = [];\n    let last = children.length - 1;\n    for (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {\n        lis.push(children[cur - 1]);\n        for (; last >= cur; last--) {\n            toMove.push(children[last]);\n        }\n        last--;\n    }\n    for (; last >= 0; last--) {\n        toMove.push(children[last]);\n    }\n    lis.reverse();\n    // We sort the nodes being moved to guarantee that their insertion order matches the claim order\n    toMove.sort((a, b) => a.claim_order - b.claim_order);\n    // Finally, we move the nodes\n    for (let i = 0, j = 0; i < toMove.length; i++) {\n        while (j < lis.length && toMove[i].claim_order >= lis[j].claim_order) {\n            j++;\n        }\n        const anchor = j < lis.length ? lis[j] : null;\n        target.insertBefore(toMove[i], anchor);\n    }\n}\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction append_styles(target, style_sheet_id, styles) {\n    const append_styles_to = get_root_for_style(target);\n    if (!append_styles_to.getElementById(style_sheet_id)) {\n        const style = element('style');\n        style.id = style_sheet_id;\n        style.textContent = styles;\n        append_stylesheet(append_styles_to, style);\n    }\n}\nfunction get_root_for_style(node) {\n    if (!node)\n        return document;\n    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;\n    if (root && root.host) {\n        return root;\n    }\n    return node.ownerDocument;\n}\nfunction append_empty_stylesheet(node) {\n    const style_element = element('style');\n    append_stylesheet(get_root_for_style(node), style_element);\n    return style_element.sheet;\n}\nfunction append_stylesheet(node, style) {\n    append(node.head || node, style);\n}\nfunction append_hydration(target, node) {\n    if (is_hydrating) {\n        init_hydrate(target);\n        if ((target.actual_end_child === undefined) || ((target.actual_end_child !== null) && (target.actual_end_child.parentElement !== target))) {\n            target.actual_end_child = target.firstChild;\n        }\n        // Skip nodes of undefined ordering\n        while ((target.actual_end_child !== null) && (target.actual_end_child.claim_order === undefined)) {\n            target.actual_end_child = target.actual_end_child.nextSibling;\n        }\n        if (node !== target.actual_end_child) {\n            // We only insert if the ordering of this node should be modified or the parent node is not target\n            if (node.claim_order !== undefined || node.parentNode !== target) {\n                target.insertBefore(node, target.actual_end_child);\n            }\n        }\n        else {\n            target.actual_end_child = node.nextSibling;\n        }\n    }\n    else if (node.parentNode !== target || node.nextSibling !== null) {\n        target.appendChild(node);\n    }\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction insert_hydration(target, node, anchor) {\n    if (is_hydrating && !anchor) {\n        append_hydration(target, node);\n    }\n    else if (node.parentNode !== target || node.nextSibling != anchor) {\n        target.insertBefore(node, anchor || null);\n    }\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction trusted(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.isTrusted)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction init_claim_info(nodes) {\n    if (nodes.claim_info === undefined) {\n        nodes.claim_info = { last_index: 0, total_claimed: 0 };\n    }\n}\nfunction claim_node(nodes, predicate, processNode, createNode, dontUpdateLastIndex = false) {\n    // Try to find nodes in an order such that we lengthen the longest increasing subsequence\n    init_claim_info(nodes);\n    const resultNode = (() => {\n        // We first try to find an element after the previous one\n        for (let i = nodes.claim_info.last_index; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                return node;\n            }\n        }\n        // Otherwise, we try to find one before\n        // We iterate in reverse so that we don't go too far back\n        for (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                else if (replacement === undefined) {\n                    // Since we spliced before the last_index, we decrease it\n                    nodes.claim_info.last_index--;\n                }\n                return node;\n            }\n        }\n        // If we can't find any matching node, we create a new one\n        return createNode();\n    })();\n    resultNode.claim_order = nodes.claim_info.total_claimed;\n    nodes.claim_info.total_claimed += 1;\n    return resultNode;\n}\nfunction claim_element_base(nodes, name, attributes, create_element) {\n    return claim_node(nodes, (node) => node.nodeName === name, (node) => {\n        const remove = [];\n        for (let j = 0; j < node.attributes.length; j++) {\n            const attribute = node.attributes[j];\n            if (!attributes[attribute.name]) {\n                remove.push(attribute.name);\n            }\n        }\n        remove.forEach(v => node.removeAttribute(v));\n        return undefined;\n    }, () => create_element(name));\n}\nfunction claim_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, element);\n}\nfunction claim_svg_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, svg_element);\n}\nfunction claim_text(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 3, (node) => {\n        const dataStr = '' + data;\n        if (node.data.startsWith(dataStr)) {\n            if (node.data.length !== dataStr.length) {\n                return node.splitText(dataStr.length);\n            }\n        }\n        else {\n            node.data = dataStr;\n        }\n    }, () => text(data), true // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements\n    );\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction find_comment(nodes, text, start) {\n    for (let i = start; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 8 /* comment node */ && node.textContent.trim() === text) {\n            return i;\n        }\n    }\n    return nodes.length;\n}\nfunction claim_html_tag(nodes) {\n    // find html opening tag\n    const start_index = find_comment(nodes, 'HTML_TAG_START', 0);\n    const end_index = find_comment(nodes, 'HTML_TAG_END', start_index);\n    if (start_index === end_index) {\n        return new HtmlTagHydration();\n    }\n    init_claim_info(nodes);\n    const html_tag_nodes = nodes.splice(start_index, end_index - start_index + 1);\n    detach(html_tag_nodes[0]);\n    detach(html_tag_nodes[html_tag_nodes.length - 1]);\n    const claimed_nodes = html_tag_nodes.slice(1, html_tag_nodes.length - 1);\n    for (const n of claimed_nodes) {\n        n.claim_order = nodes.claim_info.total_claimed;\n        nodes.claim_info.total_claimed += 1;\n    }\n    return new HtmlTagHydration(claimed_nodes);\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.wholeText !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    if (value === null) {\n        node.style.removeProperty(key);\n    }\n    else {\n        node.style.setProperty(key, value, important ? 'important' : '');\n    }\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n    select.selectedIndex = -1; // no option should be selected\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail, bubbles = false) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, bubbles, false, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n    constructor() {\n        this.e = this.n = null;\n    }\n    c(html) {\n        this.h(html);\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            this.e = element(target.nodeName);\n            this.t = target;\n            this.c(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nclass HtmlTagHydration extends HtmlTag {\n    constructor(claimed_nodes) {\n        super();\n        this.e = this.n = null;\n        this.l = claimed_nodes;\n    }\n    c(html) {\n        if (this.l) {\n            this.n = this.l;\n        }\n        else {\n            super.c(html);\n        }\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert_hydration(this.t, this.n[i], anchor);\n        }\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\n\n// we need to store the information for multiple documents because a Svelte application could also contain iframes\n// https://github.com/sveltejs/svelte/issues/3624\nconst managed_styles = new Map();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_style_information(doc, node) {\n    const info = { stylesheet: append_empty_stylesheet(node), rules: {} };\n    managed_styles.set(doc, info);\n    return info;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = get_root_for_style(node);\n    const { stylesheet, rules } = managed_styles.get(doc) || create_style_information(doc, node);\n    if (!rules[name]) {\n        rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        managed_styles.forEach(info => {\n            const { stylesheet } = info;\n            let i = stylesheet.cssRules.length;\n            while (i--)\n                stylesheet.deleteRule(i);\n            info.rules = {};\n        });\n        managed_styles.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail);\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n        }\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\nfunction getAllContexts() {\n    return get_current_component().$$.context;\n}\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        // @ts-ignore\n        callbacks.slice().forEach(fn => fn.call(this, event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\n// flush() calls callbacks in this order:\n// 1. All beforeUpdate callbacks, in order: parents before children\n// 2. All bind:this callbacks, in reverse order: children before parents.\n// 3. All afterUpdate callbacks, in order: parents before children. EXCEPT\n//    for afterUpdates called during the initial onMount, which are called in\n//    reverse order: children before parents.\n// Since callbacks might update component values, which could trigger another\n// call to flush(), the following steps guard against this:\n// 1. During beforeUpdate, any updated components will be added to the\n//    dirty_components array and will cause a reentrant call to flush(). Because\n//    the flush index is kept outside the function, the reentrant call will pick\n//    up where the earlier call left off and go through all dirty components. The\n//    current_component value is saved and restored so that the reentrant call will\n//    not interfere with the \"parent\" flush() call.\n// 2. bind:this callbacks cannot trigger new flush() calls.\n// 3. During afterUpdate, any updated components will NOT have their afterUpdate\n//    callback called a second time; the seen_callbacks set, outside the flush()\n//    function, guarantees this behavior.\nconst seen_callbacks = new Set();\nlet flushidx = 0; // Do *not* move this inside the flush() function\nfunction flush() {\n    const saved_component = current_component;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        while (flushidx < dirty_components.length) {\n            const component = dirty_components[flushidx];\n            flushidx++;\n            set_current_component(component);\n            update(component.$$);\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        flushidx = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    seen_callbacks.clear();\n    set_current_component(saved_component);\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            started = true;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = (program.b - t);\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\nfunction update_await_block_branch(info, ctx, dirty) {\n    const child_ctx = ctx.slice();\n    const { resolved } = info;\n    if (info.current === info.then) {\n        child_ctx[info.value] = resolved;\n    }\n    if (info.current === info.catch) {\n        child_ctx[info.error] = resolved;\n    }\n    info.block.p(child_ctx, dirty);\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, attrs_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (attrs_to_add) {\n        const classes_to_add = attrs_to_add.classes;\n        const styles_to_add = attrs_to_add.styles;\n        if (classes_to_add) {\n            if (attributes.class == null) {\n                attributes.class = classes_to_add;\n            }\n            else {\n                attributes.class += ' ' + classes_to_add;\n            }\n        }\n        if (styles_to_add) {\n            if (attributes.style == null) {\n                attributes.style = style_object_to_string(styles_to_add);\n            }\n            else {\n                attributes.style = style_object_to_string(merge_ssr_styles(attributes.style, styles_to_add));\n            }\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${value}\"`;\n        }\n    });\n    return str;\n}\nfunction merge_ssr_styles(style_attribute, style_directive) {\n    const style_object = {};\n    for (const individual_style of style_attribute.split(';')) {\n        const colon_index = individual_style.indexOf(':');\n        const name = individual_style.slice(0, colon_index).trim();\n        const value = individual_style.slice(colon_index + 1).trim();\n        if (!name)\n            continue;\n        style_object[name] = value;\n    }\n    for (const name in style_directive) {\n        const value = style_directive[name];\n        if (value) {\n            style_object[name] = value;\n        }\n        else {\n            delete style_object[name];\n        }\n    }\n    return style_object;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction escape_attribute_value(value) {\n    return typeof value === 'string' ? escape(value) : value;\n}\nfunction escape_object(obj) {\n    const result = {};\n    for (const key in obj) {\n        result[key] = escape_attribute_value(obj[key]);\n    }\n    return result;\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots, context) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(context || (parent_component ? parent_component.$$.context : [])),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, $$slots, context);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    return ` ${name}${value === true && boolean_attributes.has(name) ? '' : `=${typeof value === 'string' ? JSON.stringify(escape(value)) : `\"${value}\"`}`}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\nfunction style_object_to_string(style_object) {\n    return Object.keys(style_object)\n        .filter(key => style_object[key])\n        .map(key => `${key}: ${style_object[key]};`)\n        .join(' ');\n}\nfunction add_styles(style_object) {\n    const styles = style_object_to_string(style_object);\n    return styles ? ` style=\"${styles}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor, customElement) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    if (!customElement) {\n        // onMount happens before the initial afterUpdate\n        add_render_callback(() => {\n            const new_on_destroy = on_mount.map(run).filter(is_function);\n            if (on_destroy) {\n                on_destroy.push(...new_on_destroy);\n            }\n            else {\n                // Edge case - component was destroyed immediately,\n                // most likely as a result of a binding initialising\n                run_all(new_on_destroy);\n            }\n            component.$$.on_mount = [];\n        });\n    }\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        on_disconnect: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false,\n        root: options.target || parent_component.$$.root\n    };\n    append_styles && append_styles($$.root);\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, options.props || {}, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            start_hydrating();\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor, options.customElement);\n        end_hydrating();\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            const { on_mount } = this.$$;\n            this.$$.on_disconnect = on_mount.map(run).filter(is_function);\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        disconnectedCallback() {\n            run_all(this.$$.on_disconnect);\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.46.3' }, detail), true));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction append_hydration_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append_hydration(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction insert_hydration_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert_hydration(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to separate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, HtmlTagHydration, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_styles, add_transform, afterUpdate, append, append_dev, append_empty_stylesheet, append_hydration, append_hydration_dev, append_styles, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_html_tag, claim_space, claim_svg_element, claim_text, clear_loops, component_subscribe, compute_rest_props, compute_slots, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, end_hydrating, escape, escape_attribute_value, escape_object, escaped, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getAllContexts, getContext, get_all_dirty_from_scope, get_binding_group_value, get_current_component, get_custom_elements_slots, get_root_for_style, get_slot_changes, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, identity, init, insert, insert_dev, insert_hydration, insert_hydration_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, listen, listen_dev, loop, loop_guard, merge_ssr_styles, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, src_url_equal, start_hydrating, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, trusted, update_await_block_branch, update_keyed_each, update_slot, update_slot_base, validate_component, validate_each_argument, validate_each_keys, validate_slots, validate_store, xlink_attr };\n","/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview Firebase constants.  Some of these (@defines) can be overridden at compile-time.\r\n */\r\nconst CONSTANTS = {\r\n    /**\r\n     * @define {boolean} Whether this is the client Node.js SDK.\r\n     */\r\n    NODE_CLIENT: false,\r\n    /**\r\n     * @define {boolean} Whether this is the Admin Node.js SDK.\r\n     */\r\n    NODE_ADMIN: false,\r\n    /**\r\n     * Firebase SDK Version\r\n     */\r\n    SDK_VERSION: '${JSCORE_VERSION}'\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Throws an error if the provided assertion is falsy\r\n */\r\nconst assert = function (assertion, message) {\r\n    if (!assertion) {\r\n        throw assertionError(message);\r\n    }\r\n};\r\n/**\r\n * Returns an Error object suitable for throwing.\r\n */\r\nconst assertionError = function (message) {\r\n    return new Error('Firebase Database (' +\r\n        CONSTANTS.SDK_VERSION +\r\n        ') INTERNAL ASSERT FAILED: ' +\r\n        message);\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst stringToByteArray$1 = function (str) {\r\n    // TODO(user): Use native implementations if/when available\r\n    const out = [];\r\n    let p = 0;\r\n    for (let i = 0; i < str.length; i++) {\r\n        let c = str.charCodeAt(i);\r\n        if (c < 128) {\r\n            out[p++] = c;\r\n        }\r\n        else if (c < 2048) {\r\n            out[p++] = (c >> 6) | 192;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else if ((c & 0xfc00) === 0xd800 &&\r\n            i + 1 < str.length &&\r\n            (str.charCodeAt(i + 1) & 0xfc00) === 0xdc00) {\r\n            // Surrogate Pair\r\n            c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);\r\n            out[p++] = (c >> 18) | 240;\r\n            out[p++] = ((c >> 12) & 63) | 128;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else {\r\n            out[p++] = (c >> 12) | 224;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n    }\r\n    return out;\r\n};\r\n/**\r\n * Turns an array of numbers into the string given by the concatenation of the\r\n * characters to which the numbers correspond.\r\n * @param bytes Array of numbers representing characters.\r\n * @return Stringification of the array.\r\n */\r\nconst byteArrayToString = function (bytes) {\r\n    // TODO(user): Use native implementations if/when available\r\n    const out = [];\r\n    let pos = 0, c = 0;\r\n    while (pos < bytes.length) {\r\n        const c1 = bytes[pos++];\r\n        if (c1 < 128) {\r\n            out[c++] = String.fromCharCode(c1);\r\n        }\r\n        else if (c1 > 191 && c1 < 224) {\r\n            const c2 = bytes[pos++];\r\n            out[c++] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));\r\n        }\r\n        else if (c1 > 239 && c1 < 365) {\r\n            // Surrogate Pair\r\n            const c2 = bytes[pos++];\r\n            const c3 = bytes[pos++];\r\n            const c4 = bytes[pos++];\r\n            const u = (((c1 & 7) << 18) | ((c2 & 63) << 12) | ((c3 & 63) << 6) | (c4 & 63)) -\r\n                0x10000;\r\n            out[c++] = String.fromCharCode(0xd800 + (u >> 10));\r\n            out[c++] = String.fromCharCode(0xdc00 + (u & 1023));\r\n        }\r\n        else {\r\n            const c2 = bytes[pos++];\r\n            const c3 = bytes[pos++];\r\n            out[c++] = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\r\n        }\r\n    }\r\n    return out.join('');\r\n};\r\n// We define it as an object literal instead of a class because a class compiled down to es5 can't\r\n// be treeshaked. https://github.com/rollup/rollup/issues/1691\r\n// Static lookup maps, lazily populated by init_()\r\nconst base64 = {\r\n    /**\r\n     * Maps bytes to characters.\r\n     */\r\n    byteToCharMap_: null,\r\n    /**\r\n     * Maps characters to bytes.\r\n     */\r\n    charToByteMap_: null,\r\n    /**\r\n     * Maps bytes to websafe characters.\r\n     * @private\r\n     */\r\n    byteToCharMapWebSafe_: null,\r\n    /**\r\n     * Maps websafe characters to bytes.\r\n     * @private\r\n     */\r\n    charToByteMapWebSafe_: null,\r\n    /**\r\n     * Our default alphabet, shared between\r\n     * ENCODED_VALS and ENCODED_VALS_WEBSAFE\r\n     */\r\n    ENCODED_VALS_BASE: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',\r\n    /**\r\n     * Our default alphabet. Value 64 (=) is special; it means \"nothing.\"\r\n     */\r\n    get ENCODED_VALS() {\r\n        return this.ENCODED_VALS_BASE + '+/=';\r\n    },\r\n    /**\r\n     * Our websafe alphabet.\r\n     */\r\n    get ENCODED_VALS_WEBSAFE() {\r\n        return this.ENCODED_VALS_BASE + '-_.';\r\n    },\r\n    /**\r\n     * Whether this browser supports the atob and btoa functions. This extension\r\n     * started at Mozilla but is now implemented by many browsers. We use the\r\n     * ASSUME_* variables to avoid pulling in the full useragent detection library\r\n     * but still allowing the standard per-browser compilations.\r\n     *\r\n     */\r\n    HAS_NATIVE_SUPPORT: typeof atob === 'function',\r\n    /**\r\n     * Base64-encode an array of bytes.\r\n     *\r\n     * @param input An array of bytes (numbers with\r\n     *     value in [0, 255]) to encode.\r\n     * @param webSafe Boolean indicating we should use the\r\n     *     alternative alphabet.\r\n     * @return The base64 encoded string.\r\n     */\r\n    encodeByteArray(input, webSafe) {\r\n        if (!Array.isArray(input)) {\r\n            throw Error('encodeByteArray takes an array as a parameter');\r\n        }\r\n        this.init_();\r\n        const byteToCharMap = webSafe\r\n            ? this.byteToCharMapWebSafe_\r\n            : this.byteToCharMap_;\r\n        const output = [];\r\n        for (let i = 0; i < input.length; i += 3) {\r\n            const byte1 = input[i];\r\n            const haveByte2 = i + 1 < input.length;\r\n            const byte2 = haveByte2 ? input[i + 1] : 0;\r\n            const haveByte3 = i + 2 < input.length;\r\n            const byte3 = haveByte3 ? input[i + 2] : 0;\r\n            const outByte1 = byte1 >> 2;\r\n            const outByte2 = ((byte1 & 0x03) << 4) | (byte2 >> 4);\r\n            let outByte3 = ((byte2 & 0x0f) << 2) | (byte3 >> 6);\r\n            let outByte4 = byte3 & 0x3f;\r\n            if (!haveByte3) {\r\n                outByte4 = 64;\r\n                if (!haveByte2) {\r\n                    outByte3 = 64;\r\n                }\r\n            }\r\n            output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);\r\n        }\r\n        return output.join('');\r\n    },\r\n    /**\r\n     * Base64-encode a string.\r\n     *\r\n     * @param input A string to encode.\r\n     * @param webSafe If true, we should use the\r\n     *     alternative alphabet.\r\n     * @return The base64 encoded string.\r\n     */\r\n    encodeString(input, webSafe) {\r\n        // Shortcut for Mozilla browsers that implement\r\n        // a native base64 encoder in the form of \"btoa/atob\"\r\n        if (this.HAS_NATIVE_SUPPORT && !webSafe) {\r\n            return btoa(input);\r\n        }\r\n        return this.encodeByteArray(stringToByteArray$1(input), webSafe);\r\n    },\r\n    /**\r\n     * Base64-decode a string.\r\n     *\r\n     * @param input to decode.\r\n     * @param webSafe True if we should use the\r\n     *     alternative alphabet.\r\n     * @return string representing the decoded value.\r\n     */\r\n    decodeString(input, webSafe) {\r\n        // Shortcut for Mozilla browsers that implement\r\n        // a native base64 encoder in the form of \"btoa/atob\"\r\n        if (this.HAS_NATIVE_SUPPORT && !webSafe) {\r\n            return atob(input);\r\n        }\r\n        return byteArrayToString(this.decodeStringToByteArray(input, webSafe));\r\n    },\r\n    /**\r\n     * Base64-decode a string.\r\n     *\r\n     * In base-64 decoding, groups of four characters are converted into three\r\n     * bytes.  If the encoder did not apply padding, the input length may not\r\n     * be a multiple of 4.\r\n     *\r\n     * In this case, the last group will have fewer than 4 characters, and\r\n     * padding will be inferred.  If the group has one or two characters, it decodes\r\n     * to one byte.  If the group has three characters, it decodes to two bytes.\r\n     *\r\n     * @param input Input to decode.\r\n     * @param webSafe True if we should use the web-safe alphabet.\r\n     * @return bytes representing the decoded value.\r\n     */\r\n    decodeStringToByteArray(input, webSafe) {\r\n        this.init_();\r\n        const charToByteMap = webSafe\r\n            ? this.charToByteMapWebSafe_\r\n            : this.charToByteMap_;\r\n        const output = [];\r\n        for (let i = 0; i < input.length;) {\r\n            const byte1 = charToByteMap[input.charAt(i++)];\r\n            const haveByte2 = i < input.length;\r\n            const byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;\r\n            ++i;\r\n            const haveByte3 = i < input.length;\r\n            const byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;\r\n            ++i;\r\n            const haveByte4 = i < input.length;\r\n            const byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;\r\n            ++i;\r\n            if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {\r\n                throw Error();\r\n            }\r\n            const outByte1 = (byte1 << 2) | (byte2 >> 4);\r\n            output.push(outByte1);\r\n            if (byte3 !== 64) {\r\n                const outByte2 = ((byte2 << 4) & 0xf0) | (byte3 >> 2);\r\n                output.push(outByte2);\r\n                if (byte4 !== 64) {\r\n                    const outByte3 = ((byte3 << 6) & 0xc0) | byte4;\r\n                    output.push(outByte3);\r\n                }\r\n            }\r\n        }\r\n        return output;\r\n    },\r\n    /**\r\n     * Lazy static initialization function. Called before\r\n     * accessing any of the static map variables.\r\n     * @private\r\n     */\r\n    init_() {\r\n        if (!this.byteToCharMap_) {\r\n            this.byteToCharMap_ = {};\r\n            this.charToByteMap_ = {};\r\n            this.byteToCharMapWebSafe_ = {};\r\n            this.charToByteMapWebSafe_ = {};\r\n            // We want quick mappings back and forth, so we precompute two maps.\r\n            for (let i = 0; i < this.ENCODED_VALS.length; i++) {\r\n                this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);\r\n                this.charToByteMap_[this.byteToCharMap_[i]] = i;\r\n                this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);\r\n                this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;\r\n                // Be forgiving when decoding and correctly decode both encodings.\r\n                if (i >= this.ENCODED_VALS_BASE.length) {\r\n                    this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;\r\n                    this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n/**\r\n * URL-safe base64 encoding\r\n */\r\nconst base64Encode = function (str) {\r\n    const utf8Bytes = stringToByteArray$1(str);\r\n    return base64.encodeByteArray(utf8Bytes, true);\r\n};\r\n/**\r\n * URL-safe base64 encoding (without \".\" padding in the end).\r\n * e.g. Used in JSON Web Token (JWT) parts.\r\n */\r\nconst base64urlEncodeWithoutPadding = function (str) {\r\n    // Use base64url encoding and remove padding in the end (dot characters).\r\n    return base64Encode(str).replace(/\\./g, '');\r\n};\r\n/**\r\n * URL-safe base64 decoding\r\n *\r\n * NOTE: DO NOT use the global atob() function - it does NOT support the\r\n * base64Url variant encoding.\r\n *\r\n * @param str To be decoded\r\n * @return Decoded result, if possible\r\n */\r\nconst base64Decode = function (str) {\r\n    try {\r\n        return base64.decodeString(str, true);\r\n    }\r\n    catch (e) {\r\n        console.error('base64Decode failed: ', e);\r\n    }\r\n    return null;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Do a deep-copy of basic JavaScript Objects or Arrays.\r\n */\r\nfunction deepCopy(value) {\r\n    return deepExtend(undefined, value);\r\n}\r\n/**\r\n * Copy properties from source to target (recursively allows extension\r\n * of Objects and Arrays).  Scalar values in the target are over-written.\r\n * If target is undefined, an object of the appropriate type will be created\r\n * (and returned).\r\n *\r\n * We recursively copy all child properties of plain Objects in the source- so\r\n * that namespace- like dictionaries are merged.\r\n *\r\n * Note that the target can be a function, in which case the properties in\r\n * the source Object are copied onto it as static properties of the Function.\r\n *\r\n * Note: we don't merge __proto__ to prevent prototype pollution\r\n */\r\nfunction deepExtend(target, source) {\r\n    if (!(source instanceof Object)) {\r\n        return source;\r\n    }\r\n    switch (source.constructor) {\r\n        case Date:\r\n            // Treat Dates like scalars; if the target date object had any child\r\n            // properties - they will be lost!\r\n            const dateValue = source;\r\n            return new Date(dateValue.getTime());\r\n        case Object:\r\n            if (target === undefined) {\r\n                target = {};\r\n            }\r\n            break;\r\n        case Array:\r\n            // Always copy the array source and overwrite the target.\r\n            target = [];\r\n            break;\r\n        default:\r\n            // Not a plain Object - treat it as a scalar.\r\n            return source;\r\n    }\r\n    for (const prop in source) {\r\n        // use isValidKey to guard against prototype pollution. See https://snyk.io/vuln/SNYK-JS-LODASH-450202\r\n        if (!source.hasOwnProperty(prop) || !isValidKey(prop)) {\r\n            continue;\r\n        }\r\n        target[prop] = deepExtend(target[prop], source[prop]);\r\n    }\r\n    return target;\r\n}\r\nfunction isValidKey(key) {\r\n    return key !== '__proto__';\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Deferred {\r\n    constructor() {\r\n        this.reject = () => { };\r\n        this.resolve = () => { };\r\n        this.promise = new Promise((resolve, reject) => {\r\n            this.resolve = resolve;\r\n            this.reject = reject;\r\n        });\r\n    }\r\n    /**\r\n     * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around\r\n     * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback\r\n     * and returns a node-style callback which will resolve or reject the Deferred's promise.\r\n     */\r\n    wrapCallback(callback) {\r\n        return (error, value) => {\r\n            if (error) {\r\n                this.reject(error);\r\n            }\r\n            else {\r\n                this.resolve(value);\r\n            }\r\n            if (typeof callback === 'function') {\r\n                // Attaching noop handler just in case developer wasn't expecting\r\n                // promises\r\n                this.promise.catch(() => { });\r\n                // Some of our callbacks don't expect a value and our own tests\r\n                // assert that the parameter length is 1\r\n                if (callback.length === 1) {\r\n                    callback(error);\r\n                }\r\n                else {\r\n                    callback(error, value);\r\n                }\r\n            }\r\n        };\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction createMockUserToken(token, projectId) {\r\n    if (token.uid) {\r\n        throw new Error('The \"uid\" field is no longer supported by mockUserToken. Please use \"sub\" instead for Firebase Auth User ID.');\r\n    }\r\n    // Unsecured JWTs use \"none\" as the algorithm.\r\n    const header = {\r\n        alg: 'none',\r\n        type: 'JWT'\r\n    };\r\n    const project = projectId || 'demo-project';\r\n    const iat = token.iat || 0;\r\n    const sub = token.sub || token.user_id;\r\n    if (!sub) {\r\n        throw new Error(\"mockUserToken must contain 'sub' or 'user_id' field!\");\r\n    }\r\n    const payload = Object.assign({ \r\n        // Set all required fields to decent defaults\r\n        iss: `https://securetoken.google.com/${project}`, aud: project, iat, exp: iat + 3600, auth_time: iat, sub, user_id: sub, firebase: {\r\n            sign_in_provider: 'custom',\r\n            identities: {}\r\n        } }, token);\r\n    // Unsecured JWTs use the empty string as a signature.\r\n    const signature = '';\r\n    return [\r\n        base64urlEncodeWithoutPadding(JSON.stringify(header)),\r\n        base64urlEncodeWithoutPadding(JSON.stringify(payload)),\r\n        signature\r\n    ].join('.');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns navigator.userAgent string or '' if it's not defined.\r\n * @return user agent string\r\n */\r\nfunction getUA() {\r\n    if (typeof navigator !== 'undefined' &&\r\n        typeof navigator['userAgent'] === 'string') {\r\n        return navigator['userAgent'];\r\n    }\r\n    else {\r\n        return '';\r\n    }\r\n}\r\n/**\r\n * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.\r\n *\r\n * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap\r\n * in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally\r\n * wait for a callback.\r\n */\r\nfunction isMobileCordova() {\r\n    return (typeof window !== 'undefined' &&\r\n        // @ts-ignore Setting up an broadly applicable index signature for Window\r\n        // just to deal with this case would probably be a bad idea.\r\n        !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) &&\r\n        /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA()));\r\n}\r\n/**\r\n * Detect Node.js.\r\n *\r\n * @return true if Node.js environment is detected.\r\n */\r\n// Node detection logic from: https://github.com/iliakan/detect-node/\r\nfunction isNode() {\r\n    try {\r\n        return (Object.prototype.toString.call(global.process) === '[object process]');\r\n    }\r\n    catch (e) {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * Detect Browser Environment\r\n */\r\nfunction isBrowser() {\r\n    return typeof self === 'object' && self.self === self;\r\n}\r\nfunction isBrowserExtension() {\r\n    const runtime = typeof chrome === 'object'\r\n        ? chrome.runtime\r\n        : typeof browser === 'object'\r\n            ? browser.runtime\r\n            : undefined;\r\n    return typeof runtime === 'object' && runtime.id !== undefined;\r\n}\r\n/**\r\n * Detect React Native.\r\n *\r\n * @return true if ReactNative environment is detected.\r\n */\r\nfunction isReactNative() {\r\n    return (typeof navigator === 'object' && navigator['product'] === 'ReactNative');\r\n}\r\n/** Detects Electron apps. */\r\nfunction isElectron() {\r\n    return getUA().indexOf('Electron/') >= 0;\r\n}\r\n/** Detects Internet Explorer. */\r\nfunction isIE() {\r\n    const ua = getUA();\r\n    return ua.indexOf('MSIE ') >= 0 || ua.indexOf('Trident/') >= 0;\r\n}\r\n/** Detects Universal Windows Platform apps. */\r\nfunction isUWP() {\r\n    return getUA().indexOf('MSAppHost/') >= 0;\r\n}\r\n/**\r\n * Detect whether the current SDK build is the Node version.\r\n *\r\n * @return true if it's the Node SDK build.\r\n */\r\nfunction isNodeSdk() {\r\n    return CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true;\r\n}\r\n/** Returns true if we are running in Safari. */\r\nfunction isSafari() {\r\n    return (!isNode() &&\r\n        navigator.userAgent.includes('Safari') &&\r\n        !navigator.userAgent.includes('Chrome'));\r\n}\r\n/**\r\n * This method checks if indexedDB is supported by current browser/service worker context\r\n * @return true if indexedDB is supported by current browser/service worker context\r\n */\r\nfunction isIndexedDBAvailable() {\r\n    return typeof indexedDB === 'object';\r\n}\r\n/**\r\n * This method validates browser/sw context for indexedDB by opening a dummy indexedDB database and reject\r\n * if errors occur during the database open operation.\r\n *\r\n * @throws exception if current browser/sw context can't run idb.open (ex: Safari iframe, Firefox\r\n * private browsing)\r\n */\r\nfunction validateIndexedDBOpenable() {\r\n    return new Promise((resolve, reject) => {\r\n        try {\r\n            let preExist = true;\r\n            const DB_CHECK_NAME = 'validate-browser-context-for-indexeddb-analytics-module';\r\n            const request = self.indexedDB.open(DB_CHECK_NAME);\r\n            request.onsuccess = () => {\r\n                request.result.close();\r\n                // delete database only when it doesn't pre-exist\r\n                if (!preExist) {\r\n                    self.indexedDB.deleteDatabase(DB_CHECK_NAME);\r\n                }\r\n                resolve(true);\r\n            };\r\n            request.onupgradeneeded = () => {\r\n                preExist = false;\r\n            };\r\n            request.onerror = () => {\r\n                var _a;\r\n                reject(((_a = request.error) === null || _a === void 0 ? void 0 : _a.message) || '');\r\n            };\r\n        }\r\n        catch (error) {\r\n            reject(error);\r\n        }\r\n    });\r\n}\r\n/**\r\n *\r\n * This method checks whether cookie is enabled within current browser\r\n * @return true if cookie is enabled within current browser\r\n */\r\nfunction areCookiesEnabled() {\r\n    if (typeof navigator === 'undefined' || !navigator.cookieEnabled) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * Polyfill for `globalThis` object.\r\n * @returns the `globalThis` object for the given environment.\r\n */\r\nfunction getGlobal() {\r\n    if (typeof self !== 'undefined') {\r\n        return self;\r\n    }\r\n    if (typeof window !== 'undefined') {\r\n        return window;\r\n    }\r\n    if (typeof global !== 'undefined') {\r\n        return global;\r\n    }\r\n    throw new Error('Unable to locate global object.');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview Standardized Firebase Error.\r\n *\r\n * Usage:\r\n *\r\n *   // Typescript string literals for type-safe codes\r\n *   type Err =\r\n *     'unknown' |\r\n *     'object-not-found'\r\n *     ;\r\n *\r\n *   // Closure enum for type-safe error codes\r\n *   // at-enum {string}\r\n *   var Err = {\r\n *     UNKNOWN: 'unknown',\r\n *     OBJECT_NOT_FOUND: 'object-not-found',\r\n *   }\r\n *\r\n *   let errors: Map<Err, string> = {\r\n *     'generic-error': \"Unknown error\",\r\n *     'file-not-found': \"Could not find file: {$file}\",\r\n *   };\r\n *\r\n *   // Type-safe function - must pass a valid error code as param.\r\n *   let error = new ErrorFactory<Err>('service', 'Service', errors);\r\n *\r\n *   ...\r\n *   throw error.create(Err.GENERIC);\r\n *   ...\r\n *   throw error.create(Err.FILE_NOT_FOUND, {'file': fileName});\r\n *   ...\r\n *   // Service: Could not file file: foo.txt (service/file-not-found).\r\n *\r\n *   catch (e) {\r\n *     assert(e.message === \"Could not find file: foo.txt.\");\r\n *     if (e.code === 'service/file-not-found') {\r\n *       console.log(\"Could not read file: \" + e['file']);\r\n *     }\r\n *   }\r\n */\r\nconst ERROR_NAME = 'FirebaseError';\r\n// Based on code from:\r\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types\r\nclass FirebaseError extends Error {\r\n    constructor(\r\n    /** The error code for this error. */\r\n    code, message, \r\n    /** Custom data for this error. */\r\n    customData) {\r\n        super(message);\r\n        this.code = code;\r\n        this.customData = customData;\r\n        /** The custom name for all FirebaseErrors. */\r\n        this.name = ERROR_NAME;\r\n        // Fix For ES5\r\n        // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\r\n        Object.setPrototypeOf(this, FirebaseError.prototype);\r\n        // Maintains proper stack trace for where our error was thrown.\r\n        // Only available on V8.\r\n        if (Error.captureStackTrace) {\r\n            Error.captureStackTrace(this, ErrorFactory.prototype.create);\r\n        }\r\n    }\r\n}\r\nclass ErrorFactory {\r\n    constructor(service, serviceName, errors) {\r\n        this.service = service;\r\n        this.serviceName = serviceName;\r\n        this.errors = errors;\r\n    }\r\n    create(code, ...data) {\r\n        const customData = data[0] || {};\r\n        const fullCode = `${this.service}/${code}`;\r\n        const template = this.errors[code];\r\n        const message = template ? replaceTemplate(template, customData) : 'Error';\r\n        // Service Name: Error message (service/code).\r\n        const fullMessage = `${this.serviceName}: ${message} (${fullCode}).`;\r\n        const error = new FirebaseError(fullCode, fullMessage, customData);\r\n        return error;\r\n    }\r\n}\r\nfunction replaceTemplate(template, data) {\r\n    return template.replace(PATTERN, (_, key) => {\r\n        const value = data[key];\r\n        return value != null ? String(value) : `<${key}?>`;\r\n    });\r\n}\r\nconst PATTERN = /\\{\\$([^}]+)}/g;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Evaluates a JSON string into a javascript object.\r\n *\r\n * @param {string} str A string containing JSON.\r\n * @return {*} The javascript object representing the specified JSON.\r\n */\r\nfunction jsonEval(str) {\r\n    return JSON.parse(str);\r\n}\r\n/**\r\n * Returns JSON representing a javascript object.\r\n * @param {*} data Javascript object to be stringified.\r\n * @return {string} The JSON contents of the object.\r\n */\r\nfunction stringify(data) {\r\n    return JSON.stringify(data);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Decodes a Firebase auth. token into constituent parts.\r\n *\r\n * Notes:\r\n * - May return with invalid / incomplete claims if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst decode = function (token) {\r\n    let header = {}, claims = {}, data = {}, signature = '';\r\n    try {\r\n        const parts = token.split('.');\r\n        header = jsonEval(base64Decode(parts[0]) || '');\r\n        claims = jsonEval(base64Decode(parts[1]) || '');\r\n        signature = parts[2];\r\n        data = claims['d'] || {};\r\n        delete claims['d'];\r\n    }\r\n    catch (e) { }\r\n    return {\r\n        header,\r\n        claims,\r\n        data,\r\n        signature\r\n    };\r\n};\r\n/**\r\n * Decodes a Firebase auth. token and checks the validity of its time-based claims. Will return true if the\r\n * token is within the time window authorized by the 'nbf' (not-before) and 'iat' (issued-at) claims.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst isValidTimestamp = function (token) {\r\n    const claims = decode(token).claims;\r\n    const now = Math.floor(new Date().getTime() / 1000);\r\n    let validSince = 0, validUntil = 0;\r\n    if (typeof claims === 'object') {\r\n        if (claims.hasOwnProperty('nbf')) {\r\n            validSince = claims['nbf'];\r\n        }\r\n        else if (claims.hasOwnProperty('iat')) {\r\n            validSince = claims['iat'];\r\n        }\r\n        if (claims.hasOwnProperty('exp')) {\r\n            validUntil = claims['exp'];\r\n        }\r\n        else {\r\n            // token will expire after 24h by default\r\n            validUntil = validSince + 86400;\r\n        }\r\n    }\r\n    return (!!now &&\r\n        !!validSince &&\r\n        !!validUntil &&\r\n        now >= validSince &&\r\n        now <= validUntil);\r\n};\r\n/**\r\n * Decodes a Firebase auth. token and returns its issued at time if valid, null otherwise.\r\n *\r\n * Notes:\r\n * - May return null if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst issuedAtTime = function (token) {\r\n    const claims = decode(token).claims;\r\n    if (typeof claims === 'object' && claims.hasOwnProperty('iat')) {\r\n        return claims['iat'];\r\n    }\r\n    return null;\r\n};\r\n/**\r\n * Decodes a Firebase auth. token and checks the validity of its format. Expects a valid issued-at time.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst isValidFormat = function (token) {\r\n    const decoded = decode(token), claims = decoded.claims;\r\n    return !!claims && typeof claims === 'object' && claims.hasOwnProperty('iat');\r\n};\r\n/**\r\n * Attempts to peer into an auth token and determine if it's an admin auth token by looking at the claims portion.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst isAdmin = function (token) {\r\n    const claims = decode(token).claims;\r\n    return typeof claims === 'object' && claims['admin'] === true;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction contains(obj, key) {\r\n    return Object.prototype.hasOwnProperty.call(obj, key);\r\n}\r\nfunction safeGet(obj, key) {\r\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n        return obj[key];\r\n    }\r\n    else {\r\n        return undefined;\r\n    }\r\n}\r\nfunction isEmpty(obj) {\r\n    for (const key in obj) {\r\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction map(obj, fn, contextObj) {\r\n    const res = {};\r\n    for (const key in obj) {\r\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n            res[key] = fn.call(contextObj, obj[key], key, obj);\r\n        }\r\n    }\r\n    return res;\r\n}\r\n/**\r\n * Deep equal two objects. Support Arrays and Objects.\r\n */\r\nfunction deepEqual(a, b) {\r\n    if (a === b) {\r\n        return true;\r\n    }\r\n    const aKeys = Object.keys(a);\r\n    const bKeys = Object.keys(b);\r\n    for (const k of aKeys) {\r\n        if (!bKeys.includes(k)) {\r\n            return false;\r\n        }\r\n        const aProp = a[k];\r\n        const bProp = b[k];\r\n        if (isObject(aProp) && isObject(bProp)) {\r\n            if (!deepEqual(aProp, bProp)) {\r\n                return false;\r\n            }\r\n        }\r\n        else if (aProp !== bProp) {\r\n            return false;\r\n        }\r\n    }\r\n    for (const k of bKeys) {\r\n        if (!aKeys.includes(k)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction isObject(thing) {\r\n    return thing !== null && typeof thing === 'object';\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a\r\n * params object (e.g. {arg: 'val', arg2: 'val2'})\r\n * Note: You must prepend it with ? when adding it to a URL.\r\n */\r\nfunction querystring(querystringParams) {\r\n    const params = [];\r\n    for (const [key, value] of Object.entries(querystringParams)) {\r\n        if (Array.isArray(value)) {\r\n            value.forEach(arrayVal => {\r\n                params.push(encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal));\r\n            });\r\n        }\r\n        else {\r\n            params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\r\n        }\r\n    }\r\n    return params.length ? '&' + params.join('&') : '';\r\n}\r\n/**\r\n * Decodes a querystring (e.g. ?arg=val&arg2=val2) into a params object\r\n * (e.g. {arg: 'val', arg2: 'val2'})\r\n */\r\nfunction querystringDecode(querystring) {\r\n    const obj = {};\r\n    const tokens = querystring.replace(/^\\?/, '').split('&');\r\n    tokens.forEach(token => {\r\n        if (token) {\r\n            const [key, value] = token.split('=');\r\n            obj[decodeURIComponent(key)] = decodeURIComponent(value);\r\n        }\r\n    });\r\n    return obj;\r\n}\r\n/**\r\n * Extract the query string part of a URL, including the leading question mark (if present).\r\n */\r\nfunction extractQuerystring(url) {\r\n    const queryStart = url.indexOf('?');\r\n    if (!queryStart) {\r\n        return '';\r\n    }\r\n    const fragmentStart = url.indexOf('#', queryStart);\r\n    return url.substring(queryStart, fragmentStart > 0 ? fragmentStart : undefined);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview SHA-1 cryptographic hash.\r\n * Variable names follow the notation in FIPS PUB 180-3:\r\n * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.\r\n *\r\n * Usage:\r\n *   var sha1 = new sha1();\r\n *   sha1.update(bytes);\r\n *   var hash = sha1.digest();\r\n *\r\n * Performance:\r\n *   Chrome 23:   ~400 Mbit/s\r\n *   Firefox 16:  ~250 Mbit/s\r\n *\r\n */\r\n/**\r\n * SHA-1 cryptographic hash constructor.\r\n *\r\n * The properties declared here are discussed in the above algorithm document.\r\n * @constructor\r\n * @final\r\n * @struct\r\n */\r\nclass Sha1 {\r\n    constructor() {\r\n        /**\r\n         * Holds the previous values of accumulated variables a-e in the compress_\r\n         * function.\r\n         * @private\r\n         */\r\n        this.chain_ = [];\r\n        /**\r\n         * A buffer holding the partially computed hash result.\r\n         * @private\r\n         */\r\n        this.buf_ = [];\r\n        /**\r\n         * An array of 80 bytes, each a part of the message to be hashed.  Referred to\r\n         * as the message schedule in the docs.\r\n         * @private\r\n         */\r\n        this.W_ = [];\r\n        /**\r\n         * Contains data needed to pad messages less than 64 bytes.\r\n         * @private\r\n         */\r\n        this.pad_ = [];\r\n        /**\r\n         * @private {number}\r\n         */\r\n        this.inbuf_ = 0;\r\n        /**\r\n         * @private {number}\r\n         */\r\n        this.total_ = 0;\r\n        this.blockSize = 512 / 8;\r\n        this.pad_[0] = 128;\r\n        for (let i = 1; i < this.blockSize; ++i) {\r\n            this.pad_[i] = 0;\r\n        }\r\n        this.reset();\r\n    }\r\n    reset() {\r\n        this.chain_[0] = 0x67452301;\r\n        this.chain_[1] = 0xefcdab89;\r\n        this.chain_[2] = 0x98badcfe;\r\n        this.chain_[3] = 0x10325476;\r\n        this.chain_[4] = 0xc3d2e1f0;\r\n        this.inbuf_ = 0;\r\n        this.total_ = 0;\r\n    }\r\n    /**\r\n     * Internal compress helper function.\r\n     * @param buf Block to compress.\r\n     * @param offset Offset of the block in the buffer.\r\n     * @private\r\n     */\r\n    compress_(buf, offset) {\r\n        if (!offset) {\r\n            offset = 0;\r\n        }\r\n        const W = this.W_;\r\n        // get 16 big endian words\r\n        if (typeof buf === 'string') {\r\n            for (let i = 0; i < 16; i++) {\r\n                // TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS\r\n                // have a bug that turns the post-increment ++ operator into pre-increment\r\n                // during JIT compilation.  We have code that depends heavily on SHA-1 for\r\n                // correctness and which is affected by this bug, so I've removed all uses\r\n                // of post-increment ++ in which the result value is used.  We can revert\r\n                // this change once the Safari bug\r\n                // (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and\r\n                // most clients have been updated.\r\n                W[i] =\r\n                    (buf.charCodeAt(offset) << 24) |\r\n                        (buf.charCodeAt(offset + 1) << 16) |\r\n                        (buf.charCodeAt(offset + 2) << 8) |\r\n                        buf.charCodeAt(offset + 3);\r\n                offset += 4;\r\n            }\r\n        }\r\n        else {\r\n            for (let i = 0; i < 16; i++) {\r\n                W[i] =\r\n                    (buf[offset] << 24) |\r\n                        (buf[offset + 1] << 16) |\r\n                        (buf[offset + 2] << 8) |\r\n                        buf[offset + 3];\r\n                offset += 4;\r\n            }\r\n        }\r\n        // expand to 80 words\r\n        for (let i = 16; i < 80; i++) {\r\n            const t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\r\n            W[i] = ((t << 1) | (t >>> 31)) & 0xffffffff;\r\n        }\r\n        let a = this.chain_[0];\r\n        let b = this.chain_[1];\r\n        let c = this.chain_[2];\r\n        let d = this.chain_[3];\r\n        let e = this.chain_[4];\r\n        let f, k;\r\n        // TODO(user): Try to unroll this loop to speed up the computation.\r\n        for (let i = 0; i < 80; i++) {\r\n            if (i < 40) {\r\n                if (i < 20) {\r\n                    f = d ^ (b & (c ^ d));\r\n                    k = 0x5a827999;\r\n                }\r\n                else {\r\n                    f = b ^ c ^ d;\r\n                    k = 0x6ed9eba1;\r\n                }\r\n            }\r\n            else {\r\n                if (i < 60) {\r\n                    f = (b & c) | (d & (b | c));\r\n                    k = 0x8f1bbcdc;\r\n                }\r\n                else {\r\n                    f = b ^ c ^ d;\r\n                    k = 0xca62c1d6;\r\n                }\r\n            }\r\n            const t = (((a << 5) | (a >>> 27)) + f + e + k + W[i]) & 0xffffffff;\r\n            e = d;\r\n            d = c;\r\n            c = ((b << 30) | (b >>> 2)) & 0xffffffff;\r\n            b = a;\r\n            a = t;\r\n        }\r\n        this.chain_[0] = (this.chain_[0] + a) & 0xffffffff;\r\n        this.chain_[1] = (this.chain_[1] + b) & 0xffffffff;\r\n        this.chain_[2] = (this.chain_[2] + c) & 0xffffffff;\r\n        this.chain_[3] = (this.chain_[3] + d) & 0xffffffff;\r\n        this.chain_[4] = (this.chain_[4] + e) & 0xffffffff;\r\n    }\r\n    update(bytes, length) {\r\n        // TODO(johnlenz): tighten the function signature and remove this check\r\n        if (bytes == null) {\r\n            return;\r\n        }\r\n        if (length === undefined) {\r\n            length = bytes.length;\r\n        }\r\n        const lengthMinusBlock = length - this.blockSize;\r\n        let n = 0;\r\n        // Using local instead of member variables gives ~5% speedup on Firefox 16.\r\n        const buf = this.buf_;\r\n        let inbuf = this.inbuf_;\r\n        // The outer while loop should execute at most twice.\r\n        while (n < length) {\r\n            // When we have no data in the block to top up, we can directly process the\r\n            // input buffer (assuming it contains sufficient data). This gives ~25%\r\n            // speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that\r\n            // the data is provided in large chunks (or in multiples of 64 bytes).\r\n            if (inbuf === 0) {\r\n                while (n <= lengthMinusBlock) {\r\n                    this.compress_(bytes, n);\r\n                    n += this.blockSize;\r\n                }\r\n            }\r\n            if (typeof bytes === 'string') {\r\n                while (n < length) {\r\n                    buf[inbuf] = bytes.charCodeAt(n);\r\n                    ++inbuf;\r\n                    ++n;\r\n                    if (inbuf === this.blockSize) {\r\n                        this.compress_(buf);\r\n                        inbuf = 0;\r\n                        // Jump to the outer loop so we use the full-block optimization.\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                while (n < length) {\r\n                    buf[inbuf] = bytes[n];\r\n                    ++inbuf;\r\n                    ++n;\r\n                    if (inbuf === this.blockSize) {\r\n                        this.compress_(buf);\r\n                        inbuf = 0;\r\n                        // Jump to the outer loop so we use the full-block optimization.\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.inbuf_ = inbuf;\r\n        this.total_ += length;\r\n    }\r\n    /** @override */\r\n    digest() {\r\n        const digest = [];\r\n        let totalBits = this.total_ * 8;\r\n        // Add pad 0x80 0x00*.\r\n        if (this.inbuf_ < 56) {\r\n            this.update(this.pad_, 56 - this.inbuf_);\r\n        }\r\n        else {\r\n            this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));\r\n        }\r\n        // Add # bits.\r\n        for (let i = this.blockSize - 1; i >= 56; i--) {\r\n            this.buf_[i] = totalBits & 255;\r\n            totalBits /= 256; // Don't use bit-shifting here!\r\n        }\r\n        this.compress_(this.buf_);\r\n        let n = 0;\r\n        for (let i = 0; i < 5; i++) {\r\n            for (let j = 24; j >= 0; j -= 8) {\r\n                digest[n] = (this.chain_[i] >> j) & 255;\r\n                ++n;\r\n            }\r\n        }\r\n        return digest;\r\n    }\r\n}\n\n/**\r\n * Helper to make a Subscribe function (just like Promise helps make a\r\n * Thenable).\r\n *\r\n * @param executor Function which can make calls to a single Observer\r\n *     as a proxy.\r\n * @param onNoObservers Callback when count of Observers goes to zero.\r\n */\r\nfunction createSubscribe(executor, onNoObservers) {\r\n    const proxy = new ObserverProxy(executor, onNoObservers);\r\n    return proxy.subscribe.bind(proxy);\r\n}\r\n/**\r\n * Implement fan-out for any number of Observers attached via a subscribe\r\n * function.\r\n */\r\nclass ObserverProxy {\r\n    /**\r\n     * @param executor Function which can make calls to a single Observer\r\n     *     as a proxy.\r\n     * @param onNoObservers Callback when count of Observers goes to zero.\r\n     */\r\n    constructor(executor, onNoObservers) {\r\n        this.observers = [];\r\n        this.unsubscribes = [];\r\n        this.observerCount = 0;\r\n        // Micro-task scheduling by calling task.then().\r\n        this.task = Promise.resolve();\r\n        this.finalized = false;\r\n        this.onNoObservers = onNoObservers;\r\n        // Call the executor asynchronously so subscribers that are called\r\n        // synchronously after the creation of the subscribe function\r\n        // can still receive the very first value generated in the executor.\r\n        this.task\r\n            .then(() => {\r\n            executor(this);\r\n        })\r\n            .catch(e => {\r\n            this.error(e);\r\n        });\r\n    }\r\n    next(value) {\r\n        this.forEachObserver((observer) => {\r\n            observer.next(value);\r\n        });\r\n    }\r\n    error(error) {\r\n        this.forEachObserver((observer) => {\r\n            observer.error(error);\r\n        });\r\n        this.close(error);\r\n    }\r\n    complete() {\r\n        this.forEachObserver((observer) => {\r\n            observer.complete();\r\n        });\r\n        this.close();\r\n    }\r\n    /**\r\n     * Subscribe function that can be used to add an Observer to the fan-out list.\r\n     *\r\n     * - We require that no event is sent to a subscriber sychronously to their\r\n     *   call to subscribe().\r\n     */\r\n    subscribe(nextOrObserver, error, complete) {\r\n        let observer;\r\n        if (nextOrObserver === undefined &&\r\n            error === undefined &&\r\n            complete === undefined) {\r\n            throw new Error('Missing Observer.');\r\n        }\r\n        // Assemble an Observer object when passed as callback functions.\r\n        if (implementsAnyMethods(nextOrObserver, [\r\n            'next',\r\n            'error',\r\n            'complete'\r\n        ])) {\r\n            observer = nextOrObserver;\r\n        }\r\n        else {\r\n            observer = {\r\n                next: nextOrObserver,\r\n                error,\r\n                complete\r\n            };\r\n        }\r\n        if (observer.next === undefined) {\r\n            observer.next = noop;\r\n        }\r\n        if (observer.error === undefined) {\r\n            observer.error = noop;\r\n        }\r\n        if (observer.complete === undefined) {\r\n            observer.complete = noop;\r\n        }\r\n        const unsub = this.unsubscribeOne.bind(this, this.observers.length);\r\n        // Attempt to subscribe to a terminated Observable - we\r\n        // just respond to the Observer with the final error or complete\r\n        // event.\r\n        if (this.finalized) {\r\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n            this.task.then(() => {\r\n                try {\r\n                    if (this.finalError) {\r\n                        observer.error(this.finalError);\r\n                    }\r\n                    else {\r\n                        observer.complete();\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    // nothing\r\n                }\r\n                return;\r\n            });\r\n        }\r\n        this.observers.push(observer);\r\n        return unsub;\r\n    }\r\n    // Unsubscribe is synchronous - we guarantee that no events are sent to\r\n    // any unsubscribed Observer.\r\n    unsubscribeOne(i) {\r\n        if (this.observers === undefined || this.observers[i] === undefined) {\r\n            return;\r\n        }\r\n        delete this.observers[i];\r\n        this.observerCount -= 1;\r\n        if (this.observerCount === 0 && this.onNoObservers !== undefined) {\r\n            this.onNoObservers(this);\r\n        }\r\n    }\r\n    forEachObserver(fn) {\r\n        if (this.finalized) {\r\n            // Already closed by previous event....just eat the additional values.\r\n            return;\r\n        }\r\n        // Since sendOne calls asynchronously - there is no chance that\r\n        // this.observers will become undefined.\r\n        for (let i = 0; i < this.observers.length; i++) {\r\n            this.sendOne(i, fn);\r\n        }\r\n    }\r\n    // Call the Observer via one of it's callback function. We are careful to\r\n    // confirm that the observe has not been unsubscribed since this asynchronous\r\n    // function had been queued.\r\n    sendOne(i, fn) {\r\n        // Execute the callback asynchronously\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        this.task.then(() => {\r\n            if (this.observers !== undefined && this.observers[i] !== undefined) {\r\n                try {\r\n                    fn(this.observers[i]);\r\n                }\r\n                catch (e) {\r\n                    // Ignore exceptions raised in Observers or missing methods of an\r\n                    // Observer.\r\n                    // Log error to console. b/31404806\r\n                    if (typeof console !== 'undefined' && console.error) {\r\n                        console.error(e);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    close(err) {\r\n        if (this.finalized) {\r\n            return;\r\n        }\r\n        this.finalized = true;\r\n        if (err !== undefined) {\r\n            this.finalError = err;\r\n        }\r\n        // Proxy is no longer needed - garbage collect references\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        this.task.then(() => {\r\n            this.observers = undefined;\r\n            this.onNoObservers = undefined;\r\n        });\r\n    }\r\n}\r\n/** Turn synchronous function into one called asynchronously. */\r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\nfunction async(fn, onError) {\r\n    return (...args) => {\r\n        Promise.resolve(true)\r\n            .then(() => {\r\n            fn(...args);\r\n        })\r\n            .catch((error) => {\r\n            if (onError) {\r\n                onError(error);\r\n            }\r\n        });\r\n    };\r\n}\r\n/**\r\n * Return true if the object passed in implements any of the named methods.\r\n */\r\nfunction implementsAnyMethods(obj, methods) {\r\n    if (typeof obj !== 'object' || obj === null) {\r\n        return false;\r\n    }\r\n    for (const method of methods) {\r\n        if (method in obj && typeof obj[method] === 'function') {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\nfunction noop() {\r\n    // do nothing\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Check to make sure the appropriate number of arguments are provided for a public function.\r\n * Throws an error if it fails.\r\n *\r\n * @param fnName The function name\r\n * @param minCount The minimum number of arguments to allow for the function call\r\n * @param maxCount The maximum number of argument to allow for the function call\r\n * @param argCount The actual number of arguments provided.\r\n */\r\nconst validateArgCount = function (fnName, minCount, maxCount, argCount) {\r\n    let argError;\r\n    if (argCount < minCount) {\r\n        argError = 'at least ' + minCount;\r\n    }\r\n    else if (argCount > maxCount) {\r\n        argError = maxCount === 0 ? 'none' : 'no more than ' + maxCount;\r\n    }\r\n    if (argError) {\r\n        const error = fnName +\r\n            ' failed: Was called with ' +\r\n            argCount +\r\n            (argCount === 1 ? ' argument.' : ' arguments.') +\r\n            ' Expects ' +\r\n            argError +\r\n            '.';\r\n        throw new Error(error);\r\n    }\r\n};\r\n/**\r\n * Generates a string to prefix an error message about failed argument validation\r\n *\r\n * @param fnName The function name\r\n * @param argName The name of the argument\r\n * @return The prefix to add to the error thrown for validation.\r\n */\r\nfunction errorPrefix(fnName, argName) {\r\n    return `${fnName} failed: ${argName} argument `;\r\n}\r\n/**\r\n * @param fnName\r\n * @param argumentNumber\r\n * @param namespace\r\n * @param optional\r\n */\r\nfunction validateNamespace(fnName, namespace, optional) {\r\n    if (optional && !namespace) {\r\n        return;\r\n    }\r\n    if (typeof namespace !== 'string') {\r\n        //TODO: I should do more validation here. We only allow certain chars in namespaces.\r\n        throw new Error(errorPrefix(fnName, 'namespace') + 'must be a valid firebase namespace.');\r\n    }\r\n}\r\nfunction validateCallback(fnName, argumentName, \r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\ncallback, optional) {\r\n    if (optional && !callback) {\r\n        return;\r\n    }\r\n    if (typeof callback !== 'function') {\r\n        throw new Error(errorPrefix(fnName, argumentName) + 'must be a valid function.');\r\n    }\r\n}\r\nfunction validateContextObject(fnName, argumentName, context, optional) {\r\n    if (optional && !context) {\r\n        return;\r\n    }\r\n    if (typeof context !== 'object' || context === null) {\r\n        throw new Error(errorPrefix(fnName, argumentName) + 'must be a valid context object.');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Code originally came from goog.crypt.stringToUtf8ByteArray, but for some reason they\r\n// automatically replaced '\\r\\n' with '\\n', and they didn't handle surrogate pairs,\r\n// so it's been modified.\r\n// Note that not all Unicode characters appear as single characters in JavaScript strings.\r\n// fromCharCode returns the UTF-16 encoding of a character - so some Unicode characters\r\n// use 2 characters in Javascript.  All 4-byte UTF-8 characters begin with a first\r\n// character in the range 0xD800 - 0xDBFF (the first character of a so-called surrogate\r\n// pair).\r\n// See http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3\r\n/**\r\n * @param {string} str\r\n * @return {Array}\r\n */\r\nconst stringToByteArray = function (str) {\r\n    const out = [];\r\n    let p = 0;\r\n    for (let i = 0; i < str.length; i++) {\r\n        let c = str.charCodeAt(i);\r\n        // Is this the lead surrogate in a surrogate pair?\r\n        if (c >= 0xd800 && c <= 0xdbff) {\r\n            const high = c - 0xd800; // the high 10 bits.\r\n            i++;\r\n            assert(i < str.length, 'Surrogate pair missing trail surrogate.');\r\n            const low = str.charCodeAt(i) - 0xdc00; // the low 10 bits.\r\n            c = 0x10000 + (high << 10) + low;\r\n        }\r\n        if (c < 128) {\r\n            out[p++] = c;\r\n        }\r\n        else if (c < 2048) {\r\n            out[p++] = (c >> 6) | 192;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else if (c < 65536) {\r\n            out[p++] = (c >> 12) | 224;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else {\r\n            out[p++] = (c >> 18) | 240;\r\n            out[p++] = ((c >> 12) & 63) | 128;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n    }\r\n    return out;\r\n};\r\n/**\r\n * Calculate length without actually converting; useful for doing cheaper validation.\r\n * @param {string} str\r\n * @return {number}\r\n */\r\nconst stringLength = function (str) {\r\n    let p = 0;\r\n    for (let i = 0; i < str.length; i++) {\r\n        const c = str.charCodeAt(i);\r\n        if (c < 128) {\r\n            p++;\r\n        }\r\n        else if (c < 2048) {\r\n            p += 2;\r\n        }\r\n        else if (c >= 0xd800 && c <= 0xdbff) {\r\n            // Lead surrogate of a surrogate pair.  The pair together will take 4 bytes to represent.\r\n            p += 4;\r\n            i++; // skip trail surrogate.\r\n        }\r\n        else {\r\n            p += 3;\r\n        }\r\n    }\r\n    return p;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The amount of milliseconds to exponentially increase.\r\n */\r\nconst DEFAULT_INTERVAL_MILLIS = 1000;\r\n/**\r\n * The factor to backoff by.\r\n * Should be a number greater than 1.\r\n */\r\nconst DEFAULT_BACKOFF_FACTOR = 2;\r\n/**\r\n * The maximum milliseconds to increase to.\r\n *\r\n * <p>Visible for testing\r\n */\r\nconst MAX_VALUE_MILLIS = 4 * 60 * 60 * 1000; // Four hours, like iOS and Android.\r\n/**\r\n * The percentage of backoff time to randomize by.\r\n * See\r\n * http://go/safe-client-behavior#step-1-determine-the-appropriate-retry-interval-to-handle-spike-traffic\r\n * for context.\r\n *\r\n * <p>Visible for testing\r\n */\r\nconst RANDOM_FACTOR = 0.5;\r\n/**\r\n * Based on the backoff method from\r\n * https://github.com/google/closure-library/blob/master/closure/goog/math/exponentialbackoff.js.\r\n * Extracted here so we don't need to pass metadata and a stateful ExponentialBackoff object around.\r\n */\r\nfunction calculateBackoffMillis(backoffCount, intervalMillis = DEFAULT_INTERVAL_MILLIS, backoffFactor = DEFAULT_BACKOFF_FACTOR) {\r\n    // Calculates an exponentially increasing value.\r\n    // Deviation: calculates value from count and a constant interval, so we only need to save value\r\n    // and count to restore state.\r\n    const currBaseValue = intervalMillis * Math.pow(backoffFactor, backoffCount);\r\n    // A random \"fuzz\" to avoid waves of retries.\r\n    // Deviation: randomFactor is required.\r\n    const randomWait = Math.round(\r\n    // A fraction of the backoff value to add/subtract.\r\n    // Deviation: changes multiplication order to improve readability.\r\n    RANDOM_FACTOR *\r\n        currBaseValue *\r\n        // A random float (rounded to int by Math.round above) in the range [-1, 1]. Determines\r\n        // if we add or subtract.\r\n        (Math.random() - 0.5) *\r\n        2);\r\n    // Limits backoff to max to avoid effectively permanent backoff.\r\n    return Math.min(MAX_VALUE_MILLIS, currBaseValue + randomWait);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Provide English ordinal letters after a number\r\n */\r\nfunction ordinal(i) {\r\n    if (!Number.isFinite(i)) {\r\n        return `${i}`;\r\n    }\r\n    return i + indicator(i);\r\n}\r\nfunction indicator(i) {\r\n    i = Math.abs(i);\r\n    const cent = i % 100;\r\n    if (cent >= 10 && cent <= 20) {\r\n        return 'th';\r\n    }\r\n    const dec = i % 10;\r\n    if (dec === 1) {\r\n        return 'st';\r\n    }\r\n    if (dec === 2) {\r\n        return 'nd';\r\n    }\r\n    if (dec === 3) {\r\n        return 'rd';\r\n    }\r\n    return 'th';\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction getModularInstance(service) {\r\n    if (service && service._delegate) {\r\n        return service._delegate;\r\n    }\r\n    else {\r\n        return service;\r\n    }\r\n}\n\nexport { CONSTANTS, Deferred, ErrorFactory, FirebaseError, MAX_VALUE_MILLIS, RANDOM_FACTOR, Sha1, areCookiesEnabled, assert, assertionError, async, base64, base64Decode, base64Encode, base64urlEncodeWithoutPadding, calculateBackoffMillis, contains, createMockUserToken, createSubscribe, decode, deepCopy, deepEqual, deepExtend, errorPrefix, extractQuerystring, getGlobal, getModularInstance, getUA, isAdmin, isBrowser, isBrowserExtension, isElectron, isEmpty, isIE, isIndexedDBAvailable, isMobileCordova, isNode, isNodeSdk, isReactNative, isSafari, isUWP, isValidFormat, isValidTimestamp, issuedAtTime, jsonEval, map, ordinal, querystring, querystringDecode, safeGet, stringLength, stringToByteArray, stringify, validateArgCount, validateCallback, validateContextObject, validateIndexedDBOpenable, validateNamespace };\n//# sourceMappingURL=index.esm2017.js.map\n","import { Deferred } from '@firebase/util';\n\n/**\r\n * Component for service name T, e.g. `auth`, `auth-internal`\r\n */\r\nclass Component {\r\n    /**\r\n     *\r\n     * @param name The public service name, e.g. app, auth, firestore, database\r\n     * @param instanceFactory Service factory responsible for creating the public interface\r\n     * @param type whether the service provided by the component is public or private\r\n     */\r\n    constructor(name, instanceFactory, type) {\r\n        this.name = name;\r\n        this.instanceFactory = instanceFactory;\r\n        this.type = type;\r\n        this.multipleInstances = false;\r\n        /**\r\n         * Properties to be added to the service namespace\r\n         */\r\n        this.serviceProps = {};\r\n        this.instantiationMode = \"LAZY\" /* LAZY */;\r\n        this.onInstanceCreated = null;\r\n    }\r\n    setInstantiationMode(mode) {\r\n        this.instantiationMode = mode;\r\n        return this;\r\n    }\r\n    setMultipleInstances(multipleInstances) {\r\n        this.multipleInstances = multipleInstances;\r\n        return this;\r\n    }\r\n    setServiceProps(props) {\r\n        this.serviceProps = props;\r\n        return this;\r\n    }\r\n    setInstanceCreatedCallback(callback) {\r\n        this.onInstanceCreated = callback;\r\n        return this;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst DEFAULT_ENTRY_NAME = '[DEFAULT]';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Provider for instance for service name T, e.g. 'auth', 'auth-internal'\r\n * NameServiceMapping[T] is an alias for the type of the instance\r\n */\r\nclass Provider {\r\n    constructor(name, container) {\r\n        this.name = name;\r\n        this.container = container;\r\n        this.component = null;\r\n        this.instances = new Map();\r\n        this.instancesDeferred = new Map();\r\n        this.instancesOptions = new Map();\r\n        this.onInitCallbacks = new Map();\r\n    }\r\n    /**\r\n     * @param identifier A provider can provide mulitple instances of a service\r\n     * if this.component.multipleInstances is true.\r\n     */\r\n    get(identifier) {\r\n        // if multipleInstances is not supported, use the default name\r\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\r\n        if (!this.instancesDeferred.has(normalizedIdentifier)) {\r\n            const deferred = new Deferred();\r\n            this.instancesDeferred.set(normalizedIdentifier, deferred);\r\n            if (this.isInitialized(normalizedIdentifier) ||\r\n                this.shouldAutoInitialize()) {\r\n                // initialize the service if it can be auto-initialized\r\n                try {\r\n                    const instance = this.getOrInitializeService({\r\n                        instanceIdentifier: normalizedIdentifier\r\n                    });\r\n                    if (instance) {\r\n                        deferred.resolve(instance);\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    // when the instance factory throws an exception during get(), it should not cause\r\n                    // a fatal error. We just return the unresolved promise in this case.\r\n                }\r\n            }\r\n        }\r\n        return this.instancesDeferred.get(normalizedIdentifier).promise;\r\n    }\r\n    getImmediate(options) {\r\n        var _a;\r\n        // if multipleInstances is not supported, use the default name\r\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(options === null || options === void 0 ? void 0 : options.identifier);\r\n        const optional = (_a = options === null || options === void 0 ? void 0 : options.optional) !== null && _a !== void 0 ? _a : false;\r\n        if (this.isInitialized(normalizedIdentifier) ||\r\n            this.shouldAutoInitialize()) {\r\n            try {\r\n                return this.getOrInitializeService({\r\n                    instanceIdentifier: normalizedIdentifier\r\n                });\r\n            }\r\n            catch (e) {\r\n                if (optional) {\r\n                    return null;\r\n                }\r\n                else {\r\n                    throw e;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            // In case a component is not initialized and should/can not be auto-initialized at the moment, return null if the optional flag is set, or throw\r\n            if (optional) {\r\n                return null;\r\n            }\r\n            else {\r\n                throw Error(`Service ${this.name} is not available`);\r\n            }\r\n        }\r\n    }\r\n    getComponent() {\r\n        return this.component;\r\n    }\r\n    setComponent(component) {\r\n        if (component.name !== this.name) {\r\n            throw Error(`Mismatching Component ${component.name} for Provider ${this.name}.`);\r\n        }\r\n        if (this.component) {\r\n            throw Error(`Component for ${this.name} has already been provided`);\r\n        }\r\n        this.component = component;\r\n        // return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)\r\n        if (!this.shouldAutoInitialize()) {\r\n            return;\r\n        }\r\n        // if the service is eager, initialize the default instance\r\n        if (isComponentEager(component)) {\r\n            try {\r\n                this.getOrInitializeService({ instanceIdentifier: DEFAULT_ENTRY_NAME });\r\n            }\r\n            catch (e) {\r\n                // when the instance factory for an eager Component throws an exception during the eager\r\n                // initialization, it should not cause a fatal error.\r\n                // TODO: Investigate if we need to make it configurable, because some component may want to cause\r\n                // a fatal error in this case?\r\n            }\r\n        }\r\n        // Create service instances for the pending promises and resolve them\r\n        // NOTE: if this.multipleInstances is false, only the default instance will be created\r\n        // and all promises with resolve with it regardless of the identifier.\r\n        for (const [instanceIdentifier, instanceDeferred] of this.instancesDeferred.entries()) {\r\n            const normalizedIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);\r\n            try {\r\n                // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.\r\n                const instance = this.getOrInitializeService({\r\n                    instanceIdentifier: normalizedIdentifier\r\n                });\r\n                instanceDeferred.resolve(instance);\r\n            }\r\n            catch (e) {\r\n                // when the instance factory throws an exception, it should not cause\r\n                // a fatal error. We just leave the promise unresolved.\r\n            }\r\n        }\r\n    }\r\n    clearInstance(identifier = DEFAULT_ENTRY_NAME) {\r\n        this.instancesDeferred.delete(identifier);\r\n        this.instancesOptions.delete(identifier);\r\n        this.instances.delete(identifier);\r\n    }\r\n    // app.delete() will call this method on every provider to delete the services\r\n    // TODO: should we mark the provider as deleted?\r\n    async delete() {\r\n        const services = Array.from(this.instances.values());\r\n        await Promise.all([\r\n            ...services\r\n                .filter(service => 'INTERNAL' in service) // legacy services\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                .map(service => service.INTERNAL.delete()),\r\n            ...services\r\n                .filter(service => '_delete' in service) // modularized services\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                .map(service => service._delete())\r\n        ]);\r\n    }\r\n    isComponentSet() {\r\n        return this.component != null;\r\n    }\r\n    isInitialized(identifier = DEFAULT_ENTRY_NAME) {\r\n        return this.instances.has(identifier);\r\n    }\r\n    getOptions(identifier = DEFAULT_ENTRY_NAME) {\r\n        return this.instancesOptions.get(identifier) || {};\r\n    }\r\n    initialize(opts = {}) {\r\n        const { options = {} } = opts;\r\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(opts.instanceIdentifier);\r\n        if (this.isInitialized(normalizedIdentifier)) {\r\n            throw Error(`${this.name}(${normalizedIdentifier}) has already been initialized`);\r\n        }\r\n        if (!this.isComponentSet()) {\r\n            throw Error(`Component ${this.name} has not been registered yet`);\r\n        }\r\n        const instance = this.getOrInitializeService({\r\n            instanceIdentifier: normalizedIdentifier,\r\n            options\r\n        });\r\n        // resolve any pending promise waiting for the service instance\r\n        for (const [instanceIdentifier, instanceDeferred] of this.instancesDeferred.entries()) {\r\n            const normalizedDeferredIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);\r\n            if (normalizedIdentifier === normalizedDeferredIdentifier) {\r\n                instanceDeferred.resolve(instance);\r\n            }\r\n        }\r\n        return instance;\r\n    }\r\n    /**\r\n     *\r\n     * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().\r\n     * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.\r\n     *\r\n     * @param identifier An optional instance identifier\r\n     * @returns a function to unregister the callback\r\n     */\r\n    onInit(callback, identifier) {\r\n        var _a;\r\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\r\n        const existingCallbacks = (_a = this.onInitCallbacks.get(normalizedIdentifier)) !== null && _a !== void 0 ? _a : new Set();\r\n        existingCallbacks.add(callback);\r\n        this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);\r\n        const existingInstance = this.instances.get(normalizedIdentifier);\r\n        if (existingInstance) {\r\n            callback(existingInstance, normalizedIdentifier);\r\n        }\r\n        return () => {\r\n            existingCallbacks.delete(callback);\r\n        };\r\n    }\r\n    /**\r\n     * Invoke onInit callbacks synchronously\r\n     * @param instance the service instance`\r\n     */\r\n    invokeOnInitCallbacks(instance, identifier) {\r\n        const callbacks = this.onInitCallbacks.get(identifier);\r\n        if (!callbacks) {\r\n            return;\r\n        }\r\n        for (const callback of callbacks) {\r\n            try {\r\n                callback(instance, identifier);\r\n            }\r\n            catch (_a) {\r\n                // ignore errors in the onInit callback\r\n            }\r\n        }\r\n    }\r\n    getOrInitializeService({ instanceIdentifier, options = {} }) {\r\n        let instance = this.instances.get(instanceIdentifier);\r\n        if (!instance && this.component) {\r\n            instance = this.component.instanceFactory(this.container, {\r\n                instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),\r\n                options\r\n            });\r\n            this.instances.set(instanceIdentifier, instance);\r\n            this.instancesOptions.set(instanceIdentifier, options);\r\n            /**\r\n             * Invoke onInit listeners.\r\n             * Note this.component.onInstanceCreated is different, which is used by the component creator,\r\n             * while onInit listeners are registered by consumers of the provider.\r\n             */\r\n            this.invokeOnInitCallbacks(instance, instanceIdentifier);\r\n            /**\r\n             * Order is important\r\n             * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which\r\n             * makes `isInitialized()` return true.\r\n             */\r\n            if (this.component.onInstanceCreated) {\r\n                try {\r\n                    this.component.onInstanceCreated(this.container, instanceIdentifier, instance);\r\n                }\r\n                catch (_a) {\r\n                    // ignore errors in the onInstanceCreatedCallback\r\n                }\r\n            }\r\n        }\r\n        return instance || null;\r\n    }\r\n    normalizeInstanceIdentifier(identifier = DEFAULT_ENTRY_NAME) {\r\n        if (this.component) {\r\n            return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;\r\n        }\r\n        else {\r\n            return identifier; // assume multiple instances are supported before the component is provided.\r\n        }\r\n    }\r\n    shouldAutoInitialize() {\r\n        return (!!this.component &&\r\n            this.component.instantiationMode !== \"EXPLICIT\" /* EXPLICIT */);\r\n    }\r\n}\r\n// undefined should be passed to the service factory for the default instance\r\nfunction normalizeIdentifierForFactory(identifier) {\r\n    return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;\r\n}\r\nfunction isComponentEager(component) {\r\n    return component.instantiationMode === \"EAGER\" /* EAGER */;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`\r\n */\r\nclass ComponentContainer {\r\n    constructor(name) {\r\n        this.name = name;\r\n        this.providers = new Map();\r\n    }\r\n    /**\r\n     *\r\n     * @param component Component being added\r\n     * @param overwrite When a component with the same name has already been registered,\r\n     * if overwrite is true: overwrite the existing component with the new component and create a new\r\n     * provider with the new component. It can be useful in tests where you want to use different mocks\r\n     * for different tests.\r\n     * if overwrite is false: throw an exception\r\n     */\r\n    addComponent(component) {\r\n        const provider = this.getProvider(component.name);\r\n        if (provider.isComponentSet()) {\r\n            throw new Error(`Component ${component.name} has already been registered with ${this.name}`);\r\n        }\r\n        provider.setComponent(component);\r\n    }\r\n    addOrOverwriteComponent(component) {\r\n        const provider = this.getProvider(component.name);\r\n        if (provider.isComponentSet()) {\r\n            // delete the existing provider from the container, so we can register the new component\r\n            this.providers.delete(component.name);\r\n        }\r\n        this.addComponent(component);\r\n    }\r\n    /**\r\n     * getProvider provides a type safe interface where it can only be called with a field name\r\n     * present in NameServiceMapping interface.\r\n     *\r\n     * Firebase SDKs providing services should extend NameServiceMapping interface to register\r\n     * themselves.\r\n     */\r\n    getProvider(name) {\r\n        if (this.providers.has(name)) {\r\n            return this.providers.get(name);\r\n        }\r\n        // create a Provider for a service that hasn't registered with Firebase\r\n        const provider = new Provider(name, this);\r\n        this.providers.set(name, provider);\r\n        return provider;\r\n    }\r\n    getProviders() {\r\n        return Array.from(this.providers.values());\r\n    }\r\n}\n\nexport { Component, ComponentContainer, Provider };\n//# sourceMappingURL=index.esm2017.js.map\n","/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A container for all of the Logger instances\r\n */\r\nconst instances = [];\r\n/**\r\n * The JS SDK supports 5 log levels and also allows a user the ability to\r\n * silence the logs altogether.\r\n *\r\n * The order is a follows:\r\n * DEBUG < VERBOSE < INFO < WARN < ERROR\r\n *\r\n * All of the log types above the current log level will be captured (i.e. if\r\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\r\n * `VERBOSE` logs will not)\r\n */\r\nvar LogLevel;\r\n(function (LogLevel) {\r\n    LogLevel[LogLevel[\"DEBUG\"] = 0] = \"DEBUG\";\r\n    LogLevel[LogLevel[\"VERBOSE\"] = 1] = \"VERBOSE\";\r\n    LogLevel[LogLevel[\"INFO\"] = 2] = \"INFO\";\r\n    LogLevel[LogLevel[\"WARN\"] = 3] = \"WARN\";\r\n    LogLevel[LogLevel[\"ERROR\"] = 4] = \"ERROR\";\r\n    LogLevel[LogLevel[\"SILENT\"] = 5] = \"SILENT\";\r\n})(LogLevel || (LogLevel = {}));\r\nconst levelStringToEnum = {\r\n    'debug': LogLevel.DEBUG,\r\n    'verbose': LogLevel.VERBOSE,\r\n    'info': LogLevel.INFO,\r\n    'warn': LogLevel.WARN,\r\n    'error': LogLevel.ERROR,\r\n    'silent': LogLevel.SILENT\r\n};\r\n/**\r\n * The default log level\r\n */\r\nconst defaultLogLevel = LogLevel.INFO;\r\n/**\r\n * By default, `console.debug` is not displayed in the developer console (in\r\n * chrome). To avoid forcing users to have to opt-in to these logs twice\r\n * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\r\n * logs to the `console.log` function.\r\n */\r\nconst ConsoleMethod = {\r\n    [LogLevel.DEBUG]: 'log',\r\n    [LogLevel.VERBOSE]: 'log',\r\n    [LogLevel.INFO]: 'info',\r\n    [LogLevel.WARN]: 'warn',\r\n    [LogLevel.ERROR]: 'error'\r\n};\r\n/**\r\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\r\n * messages on to their corresponding console counterparts (if the log method\r\n * is supported by the current log level)\r\n */\r\nconst defaultLogHandler = (instance, logType, ...args) => {\r\n    if (logType < instance.logLevel) {\r\n        return;\r\n    }\r\n    const now = new Date().toISOString();\r\n    const method = ConsoleMethod[logType];\r\n    if (method) {\r\n        console[method](`[${now}]  ${instance.name}:`, ...args);\r\n    }\r\n    else {\r\n        throw new Error(`Attempted to log a message with an invalid logType (value: ${logType})`);\r\n    }\r\n};\r\nclass Logger {\r\n    /**\r\n     * Gives you an instance of a Logger to capture messages according to\r\n     * Firebase's logging scheme.\r\n     *\r\n     * @param name The name that the logs will be associated with\r\n     */\r\n    constructor(name) {\r\n        this.name = name;\r\n        /**\r\n         * The log level of the given Logger instance.\r\n         */\r\n        this._logLevel = defaultLogLevel;\r\n        /**\r\n         * The main (internal) log handler for the Logger instance.\r\n         * Can be set to a new function in internal package code but not by user.\r\n         */\r\n        this._logHandler = defaultLogHandler;\r\n        /**\r\n         * The optional, additional, user-defined log handler for the Logger instance.\r\n         */\r\n        this._userLogHandler = null;\r\n        /**\r\n         * Capture the current instance for later use\r\n         */\r\n        instances.push(this);\r\n    }\r\n    get logLevel() {\r\n        return this._logLevel;\r\n    }\r\n    set logLevel(val) {\r\n        if (!(val in LogLevel)) {\r\n            throw new TypeError(`Invalid value \"${val}\" assigned to \\`logLevel\\``);\r\n        }\r\n        this._logLevel = val;\r\n    }\r\n    // Workaround for setter/getter having to be the same type.\r\n    setLogLevel(val) {\r\n        this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;\r\n    }\r\n    get logHandler() {\r\n        return this._logHandler;\r\n    }\r\n    set logHandler(val) {\r\n        if (typeof val !== 'function') {\r\n            throw new TypeError('Value assigned to `logHandler` must be a function');\r\n        }\r\n        this._logHandler = val;\r\n    }\r\n    get userLogHandler() {\r\n        return this._userLogHandler;\r\n    }\r\n    set userLogHandler(val) {\r\n        this._userLogHandler = val;\r\n    }\r\n    /**\r\n     * The functions below are all based on the `console` interface\r\n     */\r\n    debug(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.DEBUG, ...args);\r\n        this._logHandler(this, LogLevel.DEBUG, ...args);\r\n    }\r\n    log(...args) {\r\n        this._userLogHandler &&\r\n            this._userLogHandler(this, LogLevel.VERBOSE, ...args);\r\n        this._logHandler(this, LogLevel.VERBOSE, ...args);\r\n    }\r\n    info(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.INFO, ...args);\r\n        this._logHandler(this, LogLevel.INFO, ...args);\r\n    }\r\n    warn(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.WARN, ...args);\r\n        this._logHandler(this, LogLevel.WARN, ...args);\r\n    }\r\n    error(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.ERROR, ...args);\r\n        this._logHandler(this, LogLevel.ERROR, ...args);\r\n    }\r\n}\r\nfunction setLogLevel(level) {\r\n    instances.forEach(inst => {\r\n        inst.setLogLevel(level);\r\n    });\r\n}\r\nfunction setUserLogHandler(logCallback, options) {\r\n    for (const instance of instances) {\r\n        let customLogLevel = null;\r\n        if (options && options.level) {\r\n            customLogLevel = levelStringToEnum[options.level];\r\n        }\r\n        if (logCallback === null) {\r\n            instance.userLogHandler = null;\r\n        }\r\n        else {\r\n            instance.userLogHandler = (instance, level, ...args) => {\r\n                const message = args\r\n                    .map(arg => {\r\n                    if (arg == null) {\r\n                        return null;\r\n                    }\r\n                    else if (typeof arg === 'string') {\r\n                        return arg;\r\n                    }\r\n                    else if (typeof arg === 'number' || typeof arg === 'boolean') {\r\n                        return arg.toString();\r\n                    }\r\n                    else if (arg instanceof Error) {\r\n                        return arg.message;\r\n                    }\r\n                    else {\r\n                        try {\r\n                            return JSON.stringify(arg);\r\n                        }\r\n                        catch (ignored) {\r\n                            return null;\r\n                        }\r\n                    }\r\n                })\r\n                    .filter(arg => arg)\r\n                    .join(' ');\r\n                if (level >= (customLogLevel !== null && customLogLevel !== void 0 ? customLogLevel : instance.logLevel)) {\r\n                    logCallback({\r\n                        level: LogLevel[level].toLowerCase(),\r\n                        message,\r\n                        args,\r\n                        type: instance.name\r\n                    });\r\n                }\r\n            };\r\n        }\r\n    }\r\n}\n\nexport { LogLevel, Logger, setLogLevel, setUserLogHandler };\n//# sourceMappingURL=index.esm2017.js.map\n","import { Component, ComponentContainer } from '@firebase/component';\nimport { Logger, setUserLogHandler, setLogLevel as setLogLevel$1 } from '@firebase/logger';\nimport { ErrorFactory, deepEqual } from '@firebase/util';\nexport { FirebaseError } from '@firebase/util';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass PlatformLoggerServiceImpl {\r\n    constructor(container) {\r\n        this.container = container;\r\n    }\r\n    // In initial implementation, this will be called by installations on\r\n    // auth token refresh, and installations will send this string.\r\n    getPlatformInfoString() {\r\n        const providers = this.container.getProviders();\r\n        // Loop through providers and get library/version pairs from any that are\r\n        // version components.\r\n        return providers\r\n            .map(provider => {\r\n            if (isVersionServiceProvider(provider)) {\r\n                const service = provider.getImmediate();\r\n                return `${service.library}/${service.version}`;\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        })\r\n            .filter(logString => logString)\r\n            .join(' ');\r\n    }\r\n}\r\n/**\r\n *\r\n * @param provider check if this provider provides a VersionService\r\n *\r\n * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider\r\n * provides VersionService. The provider is not necessarily a 'app-version'\r\n * provider.\r\n */\r\nfunction isVersionServiceProvider(provider) {\r\n    const component = provider.getComponent();\r\n    return (component === null || component === void 0 ? void 0 : component.type) === \"VERSION\" /* VERSION */;\r\n}\n\nconst name$o = \"@firebase/app\";\nconst version$1 = \"0.7.16\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst logger = new Logger('@firebase/app');\n\nconst name$n = \"@firebase/app-compat\";\n\nconst name$m = \"@firebase/analytics-compat\";\n\nconst name$l = \"@firebase/analytics\";\n\nconst name$k = \"@firebase/app-check-compat\";\n\nconst name$j = \"@firebase/app-check\";\n\nconst name$i = \"@firebase/auth\";\n\nconst name$h = \"@firebase/auth-compat\";\n\nconst name$g = \"@firebase/database\";\n\nconst name$f = \"@firebase/database-compat\";\n\nconst name$e = \"@firebase/functions\";\n\nconst name$d = \"@firebase/functions-compat\";\n\nconst name$c = \"@firebase/installations\";\n\nconst name$b = \"@firebase/installations-compat\";\n\nconst name$a = \"@firebase/messaging\";\n\nconst name$9 = \"@firebase/messaging-compat\";\n\nconst name$8 = \"@firebase/performance\";\n\nconst name$7 = \"@firebase/performance-compat\";\n\nconst name$6 = \"@firebase/remote-config\";\n\nconst name$5 = \"@firebase/remote-config-compat\";\n\nconst name$4 = \"@firebase/storage\";\n\nconst name$3 = \"@firebase/storage-compat\";\n\nconst name$2 = \"@firebase/firestore\";\n\nconst name$1 = \"@firebase/firestore-compat\";\n\nconst name = \"firebase\";\nconst version = \"9.6.6\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The default app name\r\n *\r\n * @internal\r\n */\r\nconst DEFAULT_ENTRY_NAME = '[DEFAULT]';\r\nconst PLATFORM_LOG_STRING = {\r\n    [name$o]: 'fire-core',\r\n    [name$n]: 'fire-core-compat',\r\n    [name$l]: 'fire-analytics',\r\n    [name$m]: 'fire-analytics-compat',\r\n    [name$j]: 'fire-app-check',\r\n    [name$k]: 'fire-app-check-compat',\r\n    [name$i]: 'fire-auth',\r\n    [name$h]: 'fire-auth-compat',\r\n    [name$g]: 'fire-rtdb',\r\n    [name$f]: 'fire-rtdb-compat',\r\n    [name$e]: 'fire-fn',\r\n    [name$d]: 'fire-fn-compat',\r\n    [name$c]: 'fire-iid',\r\n    [name$b]: 'fire-iid-compat',\r\n    [name$a]: 'fire-fcm',\r\n    [name$9]: 'fire-fcm-compat',\r\n    [name$8]: 'fire-perf',\r\n    [name$7]: 'fire-perf-compat',\r\n    [name$6]: 'fire-rc',\r\n    [name$5]: 'fire-rc-compat',\r\n    [name$4]: 'fire-gcs',\r\n    [name$3]: 'fire-gcs-compat',\r\n    [name$2]: 'fire-fst',\r\n    [name$1]: 'fire-fst-compat',\r\n    'fire-js': 'fire-js',\r\n    [name]: 'fire-js-all'\r\n};\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @internal\r\n */\r\nconst _apps = new Map();\r\n/**\r\n * Registered components.\r\n *\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nconst _components = new Map();\r\n/**\r\n * @param component - the component being added to this app's container\r\n *\r\n * @internal\r\n */\r\nfunction _addComponent(app, component) {\r\n    try {\r\n        app.container.addComponent(component);\r\n    }\r\n    catch (e) {\r\n        logger.debug(`Component ${component.name} failed to register with FirebaseApp ${app.name}`, e);\r\n    }\r\n}\r\n/**\r\n *\r\n * @internal\r\n */\r\nfunction _addOrOverwriteComponent(app, component) {\r\n    app.container.addOrOverwriteComponent(component);\r\n}\r\n/**\r\n *\r\n * @param component - the component to register\r\n * @returns whether or not the component is registered successfully\r\n *\r\n * @internal\r\n */\r\nfunction _registerComponent(component) {\r\n    const componentName = component.name;\r\n    if (_components.has(componentName)) {\r\n        logger.debug(`There were multiple attempts to register component ${componentName}.`);\r\n        return false;\r\n    }\r\n    _components.set(componentName, component);\r\n    // add the component to existing app instances\r\n    for (const app of _apps.values()) {\r\n        _addComponent(app, component);\r\n    }\r\n    return true;\r\n}\r\n/**\r\n *\r\n * @param app - FirebaseApp instance\r\n * @param name - service name\r\n *\r\n * @returns the provider for the service with the matching name\r\n *\r\n * @internal\r\n */\r\nfunction _getProvider(app, name) {\r\n    return app.container.getProvider(name);\r\n}\r\n/**\r\n *\r\n * @param app - FirebaseApp instance\r\n * @param name - service name\r\n * @param instanceIdentifier - service instance identifier in case the service supports multiple instances\r\n *\r\n * @internal\r\n */\r\nfunction _removeServiceInstance(app, name, instanceIdentifier = DEFAULT_ENTRY_NAME) {\r\n    _getProvider(app, name).clearInstance(instanceIdentifier);\r\n}\r\n/**\r\n * Test only\r\n *\r\n * @internal\r\n */\r\nfunction _clearComponents() {\r\n    _components.clear();\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst ERRORS = {\r\n    [\"no-app\" /* NO_APP */]: \"No Firebase App '{$appName}' has been created - \" +\r\n        'call Firebase App.initializeApp()',\r\n    [\"bad-app-name\" /* BAD_APP_NAME */]: \"Illegal App name: '{$appName}\",\r\n    [\"duplicate-app\" /* DUPLICATE_APP */]: \"Firebase App named '{$appName}' already exists with different options or config\",\r\n    [\"app-deleted\" /* APP_DELETED */]: \"Firebase App named '{$appName}' already deleted\",\r\n    [\"invalid-app-argument\" /* INVALID_APP_ARGUMENT */]: 'firebase.{$appName}() takes either no argument or a ' +\r\n        'Firebase App instance.',\r\n    [\"invalid-log-argument\" /* INVALID_LOG_ARGUMENT */]: 'First argument to `onLog` must be null or a function.'\r\n};\r\nconst ERROR_FACTORY = new ErrorFactory('app', 'Firebase', ERRORS);\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass FirebaseAppImpl {\r\n    constructor(options, config, container) {\r\n        this._isDeleted = false;\r\n        this._options = Object.assign({}, options);\r\n        this._config = Object.assign({}, config);\r\n        this._name = config.name;\r\n        this._automaticDataCollectionEnabled =\r\n            config.automaticDataCollectionEnabled;\r\n        this._container = container;\r\n        this.container.addComponent(new Component('app', () => this, \"PUBLIC\" /* PUBLIC */));\r\n    }\r\n    get automaticDataCollectionEnabled() {\r\n        this.checkDestroyed();\r\n        return this._automaticDataCollectionEnabled;\r\n    }\r\n    set automaticDataCollectionEnabled(val) {\r\n        this.checkDestroyed();\r\n        this._automaticDataCollectionEnabled = val;\r\n    }\r\n    get name() {\r\n        this.checkDestroyed();\r\n        return this._name;\r\n    }\r\n    get options() {\r\n        this.checkDestroyed();\r\n        return this._options;\r\n    }\r\n    get config() {\r\n        this.checkDestroyed();\r\n        return this._config;\r\n    }\r\n    get container() {\r\n        return this._container;\r\n    }\r\n    get isDeleted() {\r\n        return this._isDeleted;\r\n    }\r\n    set isDeleted(val) {\r\n        this._isDeleted = val;\r\n    }\r\n    /**\r\n     * This function will throw an Error if the App has already been deleted -\r\n     * use before performing API actions on the App.\r\n     */\r\n    checkDestroyed() {\r\n        if (this.isDeleted) {\r\n            throw ERROR_FACTORY.create(\"app-deleted\" /* APP_DELETED */, { appName: this._name });\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The current SDK version.\r\n *\r\n * @public\r\n */\r\nconst SDK_VERSION = version;\r\nfunction initializeApp(options, rawConfig = {}) {\r\n    if (typeof rawConfig !== 'object') {\r\n        const name = rawConfig;\r\n        rawConfig = { name };\r\n    }\r\n    const config = Object.assign({ name: DEFAULT_ENTRY_NAME, automaticDataCollectionEnabled: false }, rawConfig);\r\n    const name = config.name;\r\n    if (typeof name !== 'string' || !name) {\r\n        throw ERROR_FACTORY.create(\"bad-app-name\" /* BAD_APP_NAME */, {\r\n            appName: String(name)\r\n        });\r\n    }\r\n    const existingApp = _apps.get(name);\r\n    if (existingApp) {\r\n        // return the existing app if options and config deep equal the ones in the existing app.\r\n        if (deepEqual(options, existingApp.options) &&\r\n            deepEqual(config, existingApp.config)) {\r\n            return existingApp;\r\n        }\r\n        else {\r\n            throw ERROR_FACTORY.create(\"duplicate-app\" /* DUPLICATE_APP */, { appName: name });\r\n        }\r\n    }\r\n    const container = new ComponentContainer(name);\r\n    for (const component of _components.values()) {\r\n        container.addComponent(component);\r\n    }\r\n    const newApp = new FirebaseAppImpl(options, config, container);\r\n    _apps.set(name, newApp);\r\n    return newApp;\r\n}\r\n/**\r\n * Retrieves a {@link @firebase/app#FirebaseApp} instance.\r\n *\r\n * When called with no arguments, the default app is returned. When an app name\r\n * is provided, the app corresponding to that name is returned.\r\n *\r\n * An exception is thrown if the app being retrieved has not yet been\r\n * initialized.\r\n *\r\n * @example\r\n * ```javascript\r\n * // Return the default app\r\n * const app = getApp();\r\n * ```\r\n *\r\n * @example\r\n * ```javascript\r\n * // Return a named app\r\n * const otherApp = getApp(\"otherApp\");\r\n * ```\r\n *\r\n * @param name - Optional name of the app to return. If no name is\r\n *   provided, the default is `\"[DEFAULT]\"`.\r\n *\r\n * @returns The app corresponding to the provided app name.\r\n *   If no app name is provided, the default app is returned.\r\n *\r\n * @public\r\n */\r\nfunction getApp(name = DEFAULT_ENTRY_NAME) {\r\n    const app = _apps.get(name);\r\n    if (!app) {\r\n        throw ERROR_FACTORY.create(\"no-app\" /* NO_APP */, { appName: name });\r\n    }\r\n    return app;\r\n}\r\n/**\r\n * A (read-only) array of all initialized apps.\r\n * @public\r\n */\r\nfunction getApps() {\r\n    return Array.from(_apps.values());\r\n}\r\n/**\r\n * Renders this app unusable and frees the resources of all associated\r\n * services.\r\n *\r\n * @example\r\n * ```javascript\r\n * deleteApp(app)\r\n *   .then(function() {\r\n *     console.log(\"App deleted successfully\");\r\n *   })\r\n *   .catch(function(error) {\r\n *     console.log(\"Error deleting app:\", error);\r\n *   });\r\n * ```\r\n *\r\n * @public\r\n */\r\nasync function deleteApp(app) {\r\n    const name = app.name;\r\n    if (_apps.has(name)) {\r\n        _apps.delete(name);\r\n        await Promise.all(app.container\r\n            .getProviders()\r\n            .map(provider => provider.delete()));\r\n        app.isDeleted = true;\r\n    }\r\n}\r\n/**\r\n * Registers a library's name and version for platform logging purposes.\r\n * @param library - Name of 1p or 3p library (e.g. firestore, angularfire)\r\n * @param version - Current version of that library.\r\n * @param variant - Bundle variant, e.g., node, rn, etc.\r\n *\r\n * @public\r\n */\r\nfunction registerVersion(libraryKeyOrName, version, variant) {\r\n    var _a;\r\n    // TODO: We can use this check to whitelist strings when/if we set up\r\n    // a good whitelist system.\r\n    let library = (_a = PLATFORM_LOG_STRING[libraryKeyOrName]) !== null && _a !== void 0 ? _a : libraryKeyOrName;\r\n    if (variant) {\r\n        library += `-${variant}`;\r\n    }\r\n    const libraryMismatch = library.match(/\\s|\\//);\r\n    const versionMismatch = version.match(/\\s|\\//);\r\n    if (libraryMismatch || versionMismatch) {\r\n        const warning = [\r\n            `Unable to register library \"${library}\" with version \"${version}\":`\r\n        ];\r\n        if (libraryMismatch) {\r\n            warning.push(`library name \"${library}\" contains illegal characters (whitespace or \"/\")`);\r\n        }\r\n        if (libraryMismatch && versionMismatch) {\r\n            warning.push('and');\r\n        }\r\n        if (versionMismatch) {\r\n            warning.push(`version name \"${version}\" contains illegal characters (whitespace or \"/\")`);\r\n        }\r\n        logger.warn(warning.join(' '));\r\n        return;\r\n    }\r\n    _registerComponent(new Component(`${library}-version`, () => ({ library, version }), \"VERSION\" /* VERSION */));\r\n}\r\n/**\r\n * Sets log handler for all Firebase SDKs.\r\n * @param logCallback - An optional custom log handler that executes user code whenever\r\n * the Firebase SDK makes a logging call.\r\n *\r\n * @public\r\n */\r\nfunction onLog(logCallback, options) {\r\n    if (logCallback !== null && typeof logCallback !== 'function') {\r\n        throw ERROR_FACTORY.create(\"invalid-log-argument\" /* INVALID_LOG_ARGUMENT */);\r\n    }\r\n    setUserLogHandler(logCallback, options);\r\n}\r\n/**\r\n * Sets log level for all Firebase SDKs.\r\n *\r\n * All of the log types above the current log level are captured (i.e. if\r\n * you set the log level to `info`, errors are logged, but `debug` and\r\n * `verbose` logs are not).\r\n *\r\n * @public\r\n */\r\nfunction setLogLevel(logLevel) {\r\n    setLogLevel$1(logLevel);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction registerCoreComponents(variant) {\r\n    _registerComponent(new Component('platform-logger', container => new PlatformLoggerServiceImpl(container), \"PRIVATE\" /* PRIVATE */));\r\n    // Register `app` package.\r\n    registerVersion(name$o, version$1, variant);\r\n    // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\r\n    registerVersion(name$o, version$1, 'esm2017');\r\n    // Register platform SDK identifier (no version).\r\n    registerVersion('fire-js', '');\r\n}\n\n/**\r\n * Firebase App\r\n *\r\n * @remarks This package coordinates the communication between the different Firebase components\r\n * @packageDocumentation\r\n */\r\nregisterCoreComponents('');\n\nexport { SDK_VERSION, DEFAULT_ENTRY_NAME as _DEFAULT_ENTRY_NAME, _addComponent, _addOrOverwriteComponent, _apps, _clearComponents, _components, _getProvider, _registerComponent, _removeServiceInstance, deleteApp, getApp, getApps, initializeApp, onLog, registerVersion, setLogLevel };\n//# sourceMappingURL=index.esm2017.js.map\n","import { registerVersion } from '@firebase/app';\nexport * from '@firebase/app';\n\nvar name = \"firebase\";\nvar version = \"9.6.6\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nregisterVersion(name, version, 'app');\n//# sourceMappingURL=index.esm.js.map\n","// Import the functions you need from the SDKs you need\n\nimport { initializeApp } from \"firebase/app\";\n// TODO: Add SDKs for Firebase products that you want to use\n\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\n\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBLM0jRrQr7dgRGfmj-czXsUgKq_HEDmeg\",\n\n  authDomain: \"smartsolutions-f3f1d.firebaseapp.com\",\n\n  databaseURL: \"https://smartsolutions-f3f1d-default-rtdb.firebaseio.com\",\n\n  projectId: \"smartsolutions-f3f1d\",\n\n  storageBucket: \"smartsolutions-f3f1d.appspot.com\",\n\n  messagingSenderId: \"577346773409\",\n\n  appId: \"1:577346773409:web:f0354e0e04282989446be0\",\n\n  measurementId: \"G-R309HXRD90\",\n};\n\n// Initialize Firebase\n\nexport const app = initializeApp(firebaseConfig);\n","import { getApp, _getProvider, SDK_VERSION as SDK_VERSION$1, _registerComponent, registerVersion } from '@firebase/app';\nimport { Component } from '@firebase/component';\nimport { stringify, jsonEval, contains, assert, base64, stringToByteArray, Sha1, isNodeSdk, deepCopy, base64Encode, isMobileCordova, stringLength, Deferred, safeGet, isAdmin, isValidFormat, isEmpty, isReactNative, assertionError, map, querystring, errorPrefix, getModularInstance, createMockUserToken } from '@firebase/util';\nimport { Logger, LogLevel } from '@firebase/logger';\n\nconst name = \"@firebase/database\";\nconst version = \"0.12.5\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** The semver (www.semver.org) version of the SDK. */\r\nlet SDK_VERSION = '';\r\n/**\r\n * SDK_VERSION should be set before any database instance is created\r\n * @internal\r\n */\r\nfunction setSDKVersion(version) {\r\n    SDK_VERSION = version;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Wraps a DOM Storage object and:\r\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\r\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\r\n *\r\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\r\n * and one for localStorage.\r\n *\r\n */\r\nclass DOMStorageWrapper {\r\n    /**\r\n     * @param domStorage_ - The underlying storage object (e.g. localStorage or sessionStorage)\r\n     */\r\n    constructor(domStorage_) {\r\n        this.domStorage_ = domStorage_;\r\n        // Use a prefix to avoid collisions with other stuff saved by the app.\r\n        this.prefix_ = 'firebase:';\r\n    }\r\n    /**\r\n     * @param key - The key to save the value under\r\n     * @param value - The value being stored, or null to remove the key.\r\n     */\r\n    set(key, value) {\r\n        if (value == null) {\r\n            this.domStorage_.removeItem(this.prefixedName_(key));\r\n        }\r\n        else {\r\n            this.domStorage_.setItem(this.prefixedName_(key), stringify(value));\r\n        }\r\n    }\r\n    /**\r\n     * @returns The value that was stored under this key, or null\r\n     */\r\n    get(key) {\r\n        const storedVal = this.domStorage_.getItem(this.prefixedName_(key));\r\n        if (storedVal == null) {\r\n            return null;\r\n        }\r\n        else {\r\n            return jsonEval(storedVal);\r\n        }\r\n    }\r\n    remove(key) {\r\n        this.domStorage_.removeItem(this.prefixedName_(key));\r\n    }\r\n    prefixedName_(name) {\r\n        return this.prefix_ + name;\r\n    }\r\n    toString() {\r\n        return this.domStorage_.toString();\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\r\n * (TODO: create interface for both to implement).\r\n */\r\nclass MemoryStorage {\r\n    constructor() {\r\n        this.cache_ = {};\r\n        this.isInMemoryStorage = true;\r\n    }\r\n    set(key, value) {\r\n        if (value == null) {\r\n            delete this.cache_[key];\r\n        }\r\n        else {\r\n            this.cache_[key] = value;\r\n        }\r\n    }\r\n    get(key) {\r\n        if (contains(this.cache_, key)) {\r\n            return this.cache_[key];\r\n        }\r\n        return null;\r\n    }\r\n    remove(key) {\r\n        delete this.cache_[key];\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\r\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\r\n * to reflect this type\r\n *\r\n * @param domStorageName - Name of the underlying storage object\r\n *   (e.g. 'localStorage' or 'sessionStorage').\r\n * @returns Turning off type information until a common interface is defined.\r\n */\r\nconst createStoragefor = function (domStorageName) {\r\n    try {\r\n        // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\r\n        // so it must be inside the try/catch.\r\n        if (typeof window !== 'undefined' &&\r\n            typeof window[domStorageName] !== 'undefined') {\r\n            // Need to test cache. Just because it's here doesn't mean it works\r\n            const domStorage = window[domStorageName];\r\n            domStorage.setItem('firebase:sentinel', 'cache');\r\n            domStorage.removeItem('firebase:sentinel');\r\n            return new DOMStorageWrapper(domStorage);\r\n        }\r\n    }\r\n    catch (e) { }\r\n    // Failed to create wrapper.  Just return in-memory storage.\r\n    // TODO: log?\r\n    return new MemoryStorage();\r\n};\r\n/** A storage object that lasts across sessions */\r\nconst PersistentStorage = createStoragefor('localStorage');\r\n/** A storage object that only lasts one session */\r\nconst SessionStorage = createStoragefor('sessionStorage');\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst logClient = new Logger('@firebase/database');\r\n/**\r\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\r\n */\r\nconst LUIDGenerator = (function () {\r\n    let id = 1;\r\n    return function () {\r\n        return id++;\r\n    };\r\n})();\r\n/**\r\n * Sha1 hash of the input string\r\n * @param str - The string to hash\r\n * @returns {!string} The resulting hash\r\n */\r\nconst sha1 = function (str) {\r\n    const utf8Bytes = stringToByteArray(str);\r\n    const sha1 = new Sha1();\r\n    sha1.update(utf8Bytes);\r\n    const sha1Bytes = sha1.digest();\r\n    return base64.encodeByteArray(sha1Bytes);\r\n};\r\nconst buildLogMessage_ = function (...varArgs) {\r\n    let message = '';\r\n    for (let i = 0; i < varArgs.length; i++) {\r\n        const arg = varArgs[i];\r\n        if (Array.isArray(arg) ||\r\n            (arg &&\r\n                typeof arg === 'object' &&\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                typeof arg.length === 'number')) {\r\n            message += buildLogMessage_.apply(null, arg);\r\n        }\r\n        else if (typeof arg === 'object') {\r\n            message += stringify(arg);\r\n        }\r\n        else {\r\n            message += arg;\r\n        }\r\n        message += ' ';\r\n    }\r\n    return message;\r\n};\r\n/**\r\n * Use this for all debug messages in Firebase.\r\n */\r\nlet logger = null;\r\n/**\r\n * Flag to check for log availability on first log message\r\n */\r\nlet firstLog_ = true;\r\n/**\r\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\r\n * @param logger_ - A flag to turn on logging, or a custom logger\r\n * @param persistent - Whether or not to persist logging settings across refreshes\r\n */\r\nconst enableLogging$1 = function (logger_, persistent) {\r\n    assert(!persistent || logger_ === true || logger_ === false, \"Can't turn on custom loggers persistently.\");\r\n    if (logger_ === true) {\r\n        logClient.logLevel = LogLevel.VERBOSE;\r\n        logger = logClient.log.bind(logClient);\r\n        if (persistent) {\r\n            SessionStorage.set('logging_enabled', true);\r\n        }\r\n    }\r\n    else if (typeof logger_ === 'function') {\r\n        logger = logger_;\r\n    }\r\n    else {\r\n        logger = null;\r\n        SessionStorage.remove('logging_enabled');\r\n    }\r\n};\r\nconst log = function (...varArgs) {\r\n    if (firstLog_ === true) {\r\n        firstLog_ = false;\r\n        if (logger === null && SessionStorage.get('logging_enabled') === true) {\r\n            enableLogging$1(true);\r\n        }\r\n    }\r\n    if (logger) {\r\n        const message = buildLogMessage_.apply(null, varArgs);\r\n        logger(message);\r\n    }\r\n};\r\nconst logWrapper = function (prefix) {\r\n    return function (...varArgs) {\r\n        log(prefix, ...varArgs);\r\n    };\r\n};\r\nconst error = function (...varArgs) {\r\n    const message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_(...varArgs);\r\n    logClient.error(message);\r\n};\r\nconst fatal = function (...varArgs) {\r\n    const message = `FIREBASE FATAL ERROR: ${buildLogMessage_(...varArgs)}`;\r\n    logClient.error(message);\r\n    throw new Error(message);\r\n};\r\nconst warn = function (...varArgs) {\r\n    const message = 'FIREBASE WARNING: ' + buildLogMessage_(...varArgs);\r\n    logClient.warn(message);\r\n};\r\n/**\r\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\r\n * does not use https.\r\n */\r\nconst warnIfPageIsSecure = function () {\r\n    // Be very careful accessing browser globals. Who knows what may or may not exist.\r\n    if (typeof window !== 'undefined' &&\r\n        window.location &&\r\n        window.location.protocol &&\r\n        window.location.protocol.indexOf('https:') !== -1) {\r\n        warn('Insecure Firebase access from a secure page. ' +\r\n            'Please use https in calls to new Firebase().');\r\n    }\r\n};\r\n/**\r\n * Returns true if data is NaN, or +/- Infinity.\r\n */\r\nconst isInvalidJSONNumber = function (data) {\r\n    return (typeof data === 'number' &&\r\n        (data !== data || // NaN\r\n            data === Number.POSITIVE_INFINITY ||\r\n            data === Number.NEGATIVE_INFINITY));\r\n};\r\nconst executeWhenDOMReady = function (fn) {\r\n    if (isNodeSdk() || document.readyState === 'complete') {\r\n        fn();\r\n    }\r\n    else {\r\n        // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\r\n        // fire before onload), but fall back to onload.\r\n        let called = false;\r\n        const wrappedFn = function () {\r\n            if (!document.body) {\r\n                setTimeout(wrappedFn, Math.floor(10));\r\n                return;\r\n            }\r\n            if (!called) {\r\n                called = true;\r\n                fn();\r\n            }\r\n        };\r\n        if (document.addEventListener) {\r\n            document.addEventListener('DOMContentLoaded', wrappedFn, false);\r\n            // fallback to onload.\r\n            window.addEventListener('load', wrappedFn, false);\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }\r\n        else if (document.attachEvent) {\r\n            // IE.\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            document.attachEvent('onreadystatechange', () => {\r\n                if (document.readyState === 'complete') {\r\n                    wrappedFn();\r\n                }\r\n            });\r\n            // fallback to onload.\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            window.attachEvent('onload', wrappedFn);\r\n            // jQuery has an extra hack for IE that we could employ (based on\r\n            // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\r\n            // I'm hoping we don't need it.\r\n        }\r\n    }\r\n};\r\n/**\r\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\r\n */\r\nconst MIN_NAME = '[MIN_NAME]';\r\n/**\r\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\r\n */\r\nconst MAX_NAME = '[MAX_NAME]';\r\n/**\r\n * Compares valid Firebase key names, plus min and max name\r\n */\r\nconst nameCompare = function (a, b) {\r\n    if (a === b) {\r\n        return 0;\r\n    }\r\n    else if (a === MIN_NAME || b === MAX_NAME) {\r\n        return -1;\r\n    }\r\n    else if (b === MIN_NAME || a === MAX_NAME) {\r\n        return 1;\r\n    }\r\n    else {\r\n        const aAsInt = tryParseInt(a), bAsInt = tryParseInt(b);\r\n        if (aAsInt !== null) {\r\n            if (bAsInt !== null) {\r\n                return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;\r\n            }\r\n            else {\r\n                return -1;\r\n            }\r\n        }\r\n        else if (bAsInt !== null) {\r\n            return 1;\r\n        }\r\n        else {\r\n            return a < b ? -1 : 1;\r\n        }\r\n    }\r\n};\r\n/**\r\n * @returns {!number} comparison result.\r\n */\r\nconst stringCompare = function (a, b) {\r\n    if (a === b) {\r\n        return 0;\r\n    }\r\n    else if (a < b) {\r\n        return -1;\r\n    }\r\n    else {\r\n        return 1;\r\n    }\r\n};\r\nconst requireKey = function (key, obj) {\r\n    if (obj && key in obj) {\r\n        return obj[key];\r\n    }\r\n    else {\r\n        throw new Error('Missing required key (' + key + ') in object: ' + stringify(obj));\r\n    }\r\n};\r\nconst ObjectToUniqueKey = function (obj) {\r\n    if (typeof obj !== 'object' || obj === null) {\r\n        return stringify(obj);\r\n    }\r\n    const keys = [];\r\n    // eslint-disable-next-line guard-for-in\r\n    for (const k in obj) {\r\n        keys.push(k);\r\n    }\r\n    // Export as json, but with the keys sorted.\r\n    keys.sort();\r\n    let key = '{';\r\n    for (let i = 0; i < keys.length; i++) {\r\n        if (i !== 0) {\r\n            key += ',';\r\n        }\r\n        key += stringify(keys[i]);\r\n        key += ':';\r\n        key += ObjectToUniqueKey(obj[keys[i]]);\r\n    }\r\n    key += '}';\r\n    return key;\r\n};\r\n/**\r\n * Splits a string into a number of smaller segments of maximum size\r\n * @param str - The string\r\n * @param segsize - The maximum number of chars in the string.\r\n * @returns The string, split into appropriately-sized chunks\r\n */\r\nconst splitStringBySize = function (str, segsize) {\r\n    const len = str.length;\r\n    if (len <= segsize) {\r\n        return [str];\r\n    }\r\n    const dataSegs = [];\r\n    for (let c = 0; c < len; c += segsize) {\r\n        if (c + segsize > len) {\r\n            dataSegs.push(str.substring(c, len));\r\n        }\r\n        else {\r\n            dataSegs.push(str.substring(c, c + segsize));\r\n        }\r\n    }\r\n    return dataSegs;\r\n};\r\n/**\r\n * Apply a function to each (key, value) pair in an object or\r\n * apply a function to each (index, value) pair in an array\r\n * @param obj - The object or array to iterate over\r\n * @param fn - The function to apply\r\n */\r\nfunction each(obj, fn) {\r\n    for (const key in obj) {\r\n        if (obj.hasOwnProperty(key)) {\r\n            fn(key, obj[key]);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\r\n * I made one modification at the end and removed the NaN / Infinity\r\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\r\n * @param v - A double\r\n *\r\n */\r\nconst doubleToIEEE754String = function (v) {\r\n    assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\r\n    const ebits = 11, fbits = 52;\r\n    const bias = (1 << (ebits - 1)) - 1;\r\n    let s, e, f, ln, i;\r\n    // Compute sign, exponent, fraction\r\n    // Skip NaN / Infinity handling --MJL.\r\n    if (v === 0) {\r\n        e = 0;\r\n        f = 0;\r\n        s = 1 / v === -Infinity ? 1 : 0;\r\n    }\r\n    else {\r\n        s = v < 0;\r\n        v = Math.abs(v);\r\n        if (v >= Math.pow(2, 1 - bias)) {\r\n            // Normalized\r\n            ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\r\n            e = ln + bias;\r\n            f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\r\n        }\r\n        else {\r\n            // Denormalized\r\n            e = 0;\r\n            f = Math.round(v / Math.pow(2, 1 - bias - fbits));\r\n        }\r\n    }\r\n    // Pack sign, exponent, fraction\r\n    const bits = [];\r\n    for (i = fbits; i; i -= 1) {\r\n        bits.push(f % 2 ? 1 : 0);\r\n        f = Math.floor(f / 2);\r\n    }\r\n    for (i = ebits; i; i -= 1) {\r\n        bits.push(e % 2 ? 1 : 0);\r\n        e = Math.floor(e / 2);\r\n    }\r\n    bits.push(s ? 1 : 0);\r\n    bits.reverse();\r\n    const str = bits.join('');\r\n    // Return the data as a hex string. --MJL\r\n    let hexByteString = '';\r\n    for (i = 0; i < 64; i += 8) {\r\n        let hexByte = parseInt(str.substr(i, 8), 2).toString(16);\r\n        if (hexByte.length === 1) {\r\n            hexByte = '0' + hexByte;\r\n        }\r\n        hexByteString = hexByteString + hexByte;\r\n    }\r\n    return hexByteString.toLowerCase();\r\n};\r\n/**\r\n * Used to detect if we're in a Chrome content script (which executes in an\r\n * isolated environment where long-polling doesn't work).\r\n */\r\nconst isChromeExtensionContentScript = function () {\r\n    return !!(typeof window === 'object' &&\r\n        window['chrome'] &&\r\n        window['chrome']['extension'] &&\r\n        !/^chrome/.test(window.location.href));\r\n};\r\n/**\r\n * Used to detect if we're in a Windows 8 Store app.\r\n */\r\nconst isWindowsStoreApp = function () {\r\n    // Check for the presence of a couple WinRT globals\r\n    return typeof Windows === 'object' && typeof Windows.UI === 'object';\r\n};\r\n/**\r\n * Converts a server error code to a Javascript Error\r\n */\r\nfunction errorForServerCode(code, query) {\r\n    let reason = 'Unknown Error';\r\n    if (code === 'too_big') {\r\n        reason =\r\n            'The data requested exceeds the maximum size ' +\r\n                'that can be accessed with a single request.';\r\n    }\r\n    else if (code === 'permission_denied') {\r\n        reason = \"Client doesn't have permission to access the desired data.\";\r\n    }\r\n    else if (code === 'unavailable') {\r\n        reason = 'The service is unavailable';\r\n    }\r\n    const error = new Error(code + ' at ' + query._path.toString() + ': ' + reason);\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    error.code = code.toUpperCase();\r\n    return error;\r\n}\r\n/**\r\n * Used to test for integer-looking strings\r\n */\r\nconst INTEGER_REGEXP_ = new RegExp('^-?(0*)\\\\d{1,10}$');\r\n/**\r\n * For use in keys, the minimum possible 32-bit integer.\r\n */\r\nconst INTEGER_32_MIN = -2147483648;\r\n/**\r\n * For use in kyes, the maximum possible 32-bit integer.\r\n */\r\nconst INTEGER_32_MAX = 2147483647;\r\n/**\r\n * If the string contains a 32-bit integer, return it.  Else return null.\r\n */\r\nconst tryParseInt = function (str) {\r\n    if (INTEGER_REGEXP_.test(str)) {\r\n        const intVal = Number(str);\r\n        if (intVal >= INTEGER_32_MIN && intVal <= INTEGER_32_MAX) {\r\n            return intVal;\r\n        }\r\n    }\r\n    return null;\r\n};\r\n/**\r\n * Helper to run some code but catch any exceptions and re-throw them later.\r\n * Useful for preventing user callbacks from breaking internal code.\r\n *\r\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\r\n * convenient (we don't have to try to figure out when is a safe point to\r\n * re-throw it), and the behavior seems reasonable:\r\n *\r\n * * If you aren't pausing on exceptions, you get an error in the console with\r\n *   the correct stack trace.\r\n * * If you're pausing on all exceptions, the debugger will pause on your\r\n *   exception and then again when we rethrow it.\r\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\r\n *   on us re-throwing it.\r\n *\r\n * @param fn - The code to guard.\r\n */\r\nconst exceptionGuard = function (fn) {\r\n    try {\r\n        fn();\r\n    }\r\n    catch (e) {\r\n        // Re-throw exception when it's safe.\r\n        setTimeout(() => {\r\n            // It used to be that \"throw e\" would result in a good console error with\r\n            // relevant context, but as of Chrome 39, you just get the firebase.js\r\n            // file/line number where we re-throw it, which is useless. So we log\r\n            // e.stack explicitly.\r\n            const stack = e.stack || '';\r\n            warn('Exception was thrown by user callback.', stack);\r\n            throw e;\r\n        }, Math.floor(0));\r\n    }\r\n};\r\n/**\r\n * @returns {boolean} true if we think we're currently being crawled.\r\n */\r\nconst beingCrawled = function () {\r\n    const userAgent = (typeof window === 'object' &&\r\n        window['navigator'] &&\r\n        window['navigator']['userAgent']) ||\r\n        '';\r\n    // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\r\n    // believe to support JavaScript/AJAX rendering.\r\n    // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\r\n    // would have seen the page\" is flaky if we don't treat it as a crawler.\r\n    return (userAgent.search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i) >= 0);\r\n};\r\n/**\r\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\r\n *\r\n * It is removed with clearTimeout() as normal.\r\n *\r\n * @param fn - Function to run.\r\n * @param time - Milliseconds to wait before running.\r\n * @returns The setTimeout() return value.\r\n */\r\nconst setTimeoutNonBlocking = function (fn, time) {\r\n    const timeout = setTimeout(fn, time);\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    if (typeof timeout === 'object' && timeout['unref']) {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        timeout['unref']();\r\n    }\r\n    return timeout;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Abstraction around AppCheck's token fetching capabilities.\r\n */\r\nclass AppCheckTokenProvider {\r\n    constructor(appName_, appCheckProvider) {\r\n        this.appName_ = appName_;\r\n        this.appCheckProvider = appCheckProvider;\r\n        this.appCheck = appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.getImmediate({ optional: true });\r\n        if (!this.appCheck) {\r\n            appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.get().then(appCheck => (this.appCheck = appCheck));\r\n        }\r\n    }\r\n    getToken(forceRefresh) {\r\n        if (!this.appCheck) {\r\n            return new Promise((resolve, reject) => {\r\n                // Support delayed initialization of FirebaseAppCheck. This allows our\r\n                // customers to initialize the RTDB SDK before initializing Firebase\r\n                // AppCheck and ensures that all requests are authenticated if a token\r\n                // becomes available before the timoeout below expires.\r\n                setTimeout(() => {\r\n                    if (this.appCheck) {\r\n                        this.getToken(forceRefresh).then(resolve, reject);\r\n                    }\r\n                    else {\r\n                        resolve(null);\r\n                    }\r\n                }, 0);\r\n            });\r\n        }\r\n        return this.appCheck.getToken(forceRefresh);\r\n    }\r\n    addTokenChangeListener(listener) {\r\n        var _a;\r\n        (_a = this.appCheckProvider) === null || _a === void 0 ? void 0 : _a.get().then(appCheck => appCheck.addTokenListener(listener));\r\n    }\r\n    notifyForInvalidToken() {\r\n        warn(`Provided AppCheck credentials for the app named \"${this.appName_}\" ` +\r\n            'are invalid. This usually indicates your app was not initialized correctly.');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Abstraction around FirebaseApp's token fetching capabilities.\r\n */\r\nclass FirebaseAuthTokenProvider {\r\n    constructor(appName_, firebaseOptions_, authProvider_) {\r\n        this.appName_ = appName_;\r\n        this.firebaseOptions_ = firebaseOptions_;\r\n        this.authProvider_ = authProvider_;\r\n        this.auth_ = null;\r\n        this.auth_ = authProvider_.getImmediate({ optional: true });\r\n        if (!this.auth_) {\r\n            authProvider_.onInit(auth => (this.auth_ = auth));\r\n        }\r\n    }\r\n    getToken(forceRefresh) {\r\n        if (!this.auth_) {\r\n            return new Promise((resolve, reject) => {\r\n                // Support delayed initialization of FirebaseAuth. This allows our\r\n                // customers to initialize the RTDB SDK before initializing Firebase\r\n                // Auth and ensures that all requests are authenticated if a token\r\n                // becomes available before the timoeout below expires.\r\n                setTimeout(() => {\r\n                    if (this.auth_) {\r\n                        this.getToken(forceRefresh).then(resolve, reject);\r\n                    }\r\n                    else {\r\n                        resolve(null);\r\n                    }\r\n                }, 0);\r\n            });\r\n        }\r\n        return this.auth_.getToken(forceRefresh).catch(error => {\r\n            // TODO: Need to figure out all the cases this is raised and whether\r\n            // this makes sense.\r\n            if (error && error.code === 'auth/token-not-initialized') {\r\n                log('Got auth/token-not-initialized error.  Treating as null token.');\r\n                return null;\r\n            }\r\n            else {\r\n                return Promise.reject(error);\r\n            }\r\n        });\r\n    }\r\n    addTokenChangeListener(listener) {\r\n        // TODO: We might want to wrap the listener and call it with no args to\r\n        // avoid a leaky abstraction, but that makes removing the listener harder.\r\n        if (this.auth_) {\r\n            this.auth_.addAuthTokenListener(listener);\r\n        }\r\n        else {\r\n            this.authProvider_\r\n                .get()\r\n                .then(auth => auth.addAuthTokenListener(listener));\r\n        }\r\n    }\r\n    removeTokenChangeListener(listener) {\r\n        this.authProvider_\r\n            .get()\r\n            .then(auth => auth.removeAuthTokenListener(listener));\r\n    }\r\n    notifyForInvalidToken() {\r\n        let errorMessage = 'Provided authentication credentials for the app named \"' +\r\n            this.appName_ +\r\n            '\" are invalid. This usually indicates your app was not ' +\r\n            'initialized correctly. ';\r\n        if ('credential' in this.firebaseOptions_) {\r\n            errorMessage +=\r\n                'Make sure the \"credential\" property provided to initializeApp() ' +\r\n                    'is authorized to access the specified \"databaseURL\" and is from the correct ' +\r\n                    'project.';\r\n        }\r\n        else if ('serviceAccount' in this.firebaseOptions_) {\r\n            errorMessage +=\r\n                'Make sure the \"serviceAccount\" property provided to initializeApp() ' +\r\n                    'is authorized to access the specified \"databaseURL\" and is from the correct ' +\r\n                    'project.';\r\n        }\r\n        else {\r\n            errorMessage +=\r\n                'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' +\r\n                    'initializeApp() match the values provided for your app at ' +\r\n                    'https://console.firebase.google.com/.';\r\n        }\r\n        warn(errorMessage);\r\n    }\r\n}\r\n/* AuthTokenProvider that supplies a constant token. Used by Admin SDK or mockUserToken with emulators. */\r\nclass EmulatorTokenProvider {\r\n    constructor(accessToken) {\r\n        this.accessToken = accessToken;\r\n    }\r\n    getToken(forceRefresh) {\r\n        return Promise.resolve({\r\n            accessToken: this.accessToken\r\n        });\r\n    }\r\n    addTokenChangeListener(listener) {\r\n        // Invoke the listener immediately to match the behavior in Firebase Auth\r\n        // (see packages/auth/src/auth.js#L1807)\r\n        listener(this.accessToken);\r\n    }\r\n    removeTokenChangeListener(listener) { }\r\n    notifyForInvalidToken() { }\r\n}\r\n/** A string that is treated as an admin access token by the RTDB emulator. Used by Admin SDK. */\r\nEmulatorTokenProvider.OWNER = 'owner';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst PROTOCOL_VERSION = '5';\r\nconst VERSION_PARAM = 'v';\r\nconst TRANSPORT_SESSION_PARAM = 's';\r\nconst REFERER_PARAM = 'r';\r\nconst FORGE_REF = 'f';\r\n// Matches console.firebase.google.com, firebase-console-*.corp.google.com and\r\n// firebase.corp.google.com\r\nconst FORGE_DOMAIN_RE = /(console\\.firebase|firebase-console-\\w+\\.corp|firebase\\.corp)\\.google\\.com/;\r\nconst LAST_SESSION_PARAM = 'ls';\r\nconst APPLICATION_ID_PARAM = 'p';\r\nconst APP_CHECK_TOKEN_PARAM = 'ac';\r\nconst WEBSOCKET = 'websocket';\r\nconst LONG_POLLING = 'long_polling';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A class that holds metadata about a Repo object\r\n */\r\nclass RepoInfo {\r\n    /**\r\n     * @param host - Hostname portion of the url for the repo\r\n     * @param secure - Whether or not this repo is accessed over ssl\r\n     * @param namespace - The namespace represented by the repo\r\n     * @param webSocketOnly - Whether to prefer websockets over all other transports (used by Nest).\r\n     * @param nodeAdmin - Whether this instance uses Admin SDK credentials\r\n     * @param persistenceKey - Override the default session persistence storage key\r\n     */\r\n    constructor(host, secure, namespace, webSocketOnly, nodeAdmin = false, persistenceKey = '', includeNamespaceInQueryParams = false) {\r\n        this.secure = secure;\r\n        this.namespace = namespace;\r\n        this.webSocketOnly = webSocketOnly;\r\n        this.nodeAdmin = nodeAdmin;\r\n        this.persistenceKey = persistenceKey;\r\n        this.includeNamespaceInQueryParams = includeNamespaceInQueryParams;\r\n        this._host = host.toLowerCase();\r\n        this._domain = this._host.substr(this._host.indexOf('.') + 1);\r\n        this.internalHost =\r\n            PersistentStorage.get('host:' + host) || this._host;\r\n    }\r\n    isCacheableHost() {\r\n        return this.internalHost.substr(0, 2) === 's-';\r\n    }\r\n    isCustomHost() {\r\n        return (this._domain !== 'firebaseio.com' &&\r\n            this._domain !== 'firebaseio-demo.com');\r\n    }\r\n    get host() {\r\n        return this._host;\r\n    }\r\n    set host(newHost) {\r\n        if (newHost !== this.internalHost) {\r\n            this.internalHost = newHost;\r\n            if (this.isCacheableHost()) {\r\n                PersistentStorage.set('host:' + this._host, this.internalHost);\r\n            }\r\n        }\r\n    }\r\n    toString() {\r\n        let str = this.toURLString();\r\n        if (this.persistenceKey) {\r\n            str += '<' + this.persistenceKey + '>';\r\n        }\r\n        return str;\r\n    }\r\n    toURLString() {\r\n        const protocol = this.secure ? 'https://' : 'http://';\r\n        const query = this.includeNamespaceInQueryParams\r\n            ? `?ns=${this.namespace}`\r\n            : '';\r\n        return `${protocol}${this.host}/${query}`;\r\n    }\r\n}\r\nfunction repoInfoNeedsQueryParam(repoInfo) {\r\n    return (repoInfo.host !== repoInfo.internalHost ||\r\n        repoInfo.isCustomHost() ||\r\n        repoInfo.includeNamespaceInQueryParams);\r\n}\r\n/**\r\n * Returns the websocket URL for this repo\r\n * @param repoInfo - RepoInfo object\r\n * @param type - of connection\r\n * @param params - list\r\n * @returns The URL for this repo\r\n */\r\nfunction repoInfoConnectionURL(repoInfo, type, params) {\r\n    assert(typeof type === 'string', 'typeof type must == string');\r\n    assert(typeof params === 'object', 'typeof params must == object');\r\n    let connURL;\r\n    if (type === WEBSOCKET) {\r\n        connURL =\r\n            (repoInfo.secure ? 'wss://' : 'ws://') + repoInfo.internalHost + '/.ws?';\r\n    }\r\n    else if (type === LONG_POLLING) {\r\n        connURL =\r\n            (repoInfo.secure ? 'https://' : 'http://') +\r\n                repoInfo.internalHost +\r\n                '/.lp?';\r\n    }\r\n    else {\r\n        throw new Error('Unknown connection type: ' + type);\r\n    }\r\n    if (repoInfoNeedsQueryParam(repoInfo)) {\r\n        params['ns'] = repoInfo.namespace;\r\n    }\r\n    const pairs = [];\r\n    each(params, (key, value) => {\r\n        pairs.push(key + '=' + value);\r\n    });\r\n    return connURL + pairs.join('&');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Tracks a collection of stats.\r\n */\r\nclass StatsCollection {\r\n    constructor() {\r\n        this.counters_ = {};\r\n    }\r\n    incrementCounter(name, amount = 1) {\r\n        if (!contains(this.counters_, name)) {\r\n            this.counters_[name] = 0;\r\n        }\r\n        this.counters_[name] += amount;\r\n    }\r\n    get() {\r\n        return deepCopy(this.counters_);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst collections = {};\r\nconst reporters = {};\r\nfunction statsManagerGetCollection(repoInfo) {\r\n    const hashString = repoInfo.toString();\r\n    if (!collections[hashString]) {\r\n        collections[hashString] = new StatsCollection();\r\n    }\r\n    return collections[hashString];\r\n}\r\nfunction statsManagerGetOrCreateReporter(repoInfo, creatorFunction) {\r\n    const hashString = repoInfo.toString();\r\n    if (!reporters[hashString]) {\r\n        reporters[hashString] = creatorFunction();\r\n    }\r\n    return reporters[hashString];\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class ensures the packets from the server arrive in order\r\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\r\n */\r\nclass PacketReceiver {\r\n    /**\r\n     * @param onMessage_\r\n     */\r\n    constructor(onMessage_) {\r\n        this.onMessage_ = onMessage_;\r\n        this.pendingResponses = [];\r\n        this.currentResponseNum = 0;\r\n        this.closeAfterResponse = -1;\r\n        this.onClose = null;\r\n    }\r\n    closeAfter(responseNum, callback) {\r\n        this.closeAfterResponse = responseNum;\r\n        this.onClose = callback;\r\n        if (this.closeAfterResponse < this.currentResponseNum) {\r\n            this.onClose();\r\n            this.onClose = null;\r\n        }\r\n    }\r\n    /**\r\n     * Each message from the server comes with a response number, and an array of data. The responseNumber\r\n     * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\r\n     * browsers will respond in the same order as the requests we sent\r\n     */\r\n    handleResponse(requestNum, data) {\r\n        this.pendingResponses[requestNum] = data;\r\n        while (this.pendingResponses[this.currentResponseNum]) {\r\n            const toProcess = this.pendingResponses[this.currentResponseNum];\r\n            delete this.pendingResponses[this.currentResponseNum];\r\n            for (let i = 0; i < toProcess.length; ++i) {\r\n                if (toProcess[i]) {\r\n                    exceptionGuard(() => {\r\n                        this.onMessage_(toProcess[i]);\r\n                    });\r\n                }\r\n            }\r\n            if (this.currentResponseNum === this.closeAfterResponse) {\r\n                if (this.onClose) {\r\n                    this.onClose();\r\n                    this.onClose = null;\r\n                }\r\n                break;\r\n            }\r\n            this.currentResponseNum++;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// URL query parameters associated with longpolling\r\nconst FIREBASE_LONGPOLL_START_PARAM = 'start';\r\nconst FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\r\nconst FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\r\nconst FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\r\nconst FIREBASE_LONGPOLL_ID_PARAM = 'id';\r\nconst FIREBASE_LONGPOLL_PW_PARAM = 'pw';\r\nconst FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\r\nconst FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\r\nconst FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\r\nconst FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\r\nconst FIREBASE_LONGPOLL_DATA_PARAM = 'd';\r\nconst FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\r\n//Data size constants.\r\n//TODO: Perf: the maximum length actually differs from browser to browser.\r\n// We should check what browser we're on and set accordingly.\r\nconst MAX_URL_DATA_SIZE = 1870;\r\nconst SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\r\nconst MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\r\n/**\r\n * Keepalive period\r\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\r\n * length of 30 seconds that we can't exceed.\r\n */\r\nconst KEEPALIVE_REQUEST_INTERVAL = 25000;\r\n/**\r\n * How long to wait before aborting a long-polling connection attempt.\r\n */\r\nconst LP_CONNECT_TIMEOUT = 30000;\r\n/**\r\n * This class manages a single long-polling connection.\r\n */\r\nclass BrowserPollConnection {\r\n    /**\r\n     * @param connId An identifier for this connection, used for logging\r\n     * @param repoInfo The info for the endpoint to send data to.\r\n     * @param applicationId The Firebase App ID for this project.\r\n     * @param appCheckToken The AppCheck token for this client.\r\n     * @param authToken The AuthToken to use for this connection.\r\n     * @param transportSessionId Optional transportSessionid if we are\r\n     * reconnecting for an existing transport session\r\n     * @param lastSessionId Optional lastSessionId if the PersistentConnection has\r\n     * already created a connection previously\r\n     */\r\n    constructor(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {\r\n        this.connId = connId;\r\n        this.repoInfo = repoInfo;\r\n        this.applicationId = applicationId;\r\n        this.appCheckToken = appCheckToken;\r\n        this.authToken = authToken;\r\n        this.transportSessionId = transportSessionId;\r\n        this.lastSessionId = lastSessionId;\r\n        this.bytesSent = 0;\r\n        this.bytesReceived = 0;\r\n        this.everConnected_ = false;\r\n        this.log_ = logWrapper(connId);\r\n        this.stats_ = statsManagerGetCollection(repoInfo);\r\n        this.urlFn = (params) => {\r\n            // Always add the token if we have one.\r\n            if (this.appCheckToken) {\r\n                params[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\r\n            }\r\n            return repoInfoConnectionURL(repoInfo, LONG_POLLING, params);\r\n        };\r\n    }\r\n    /**\r\n     * @param onMessage - Callback when messages arrive\r\n     * @param onDisconnect - Callback with connection lost.\r\n     */\r\n    open(onMessage, onDisconnect) {\r\n        this.curSegmentNum = 0;\r\n        this.onDisconnect_ = onDisconnect;\r\n        this.myPacketOrderer = new PacketReceiver(onMessage);\r\n        this.isClosed_ = false;\r\n        this.connectTimeoutTimer_ = setTimeout(() => {\r\n            this.log_('Timed out trying to connect.');\r\n            // Make sure we clear the host cache\r\n            this.onClosed_();\r\n            this.connectTimeoutTimer_ = null;\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }, Math.floor(LP_CONNECT_TIMEOUT));\r\n        // Ensure we delay the creation of the iframe until the DOM is loaded.\r\n        executeWhenDOMReady(() => {\r\n            if (this.isClosed_) {\r\n                return;\r\n            }\r\n            //Set up a callback that gets triggered once a connection is set up.\r\n            this.scriptTagHolder = new FirebaseIFrameScriptHolder((...args) => {\r\n                const [command, arg1, arg2, arg3, arg4] = args;\r\n                this.incrementIncomingBytes_(args);\r\n                if (!this.scriptTagHolder) {\r\n                    return; // we closed the connection.\r\n                }\r\n                if (this.connectTimeoutTimer_) {\r\n                    clearTimeout(this.connectTimeoutTimer_);\r\n                    this.connectTimeoutTimer_ = null;\r\n                }\r\n                this.everConnected_ = true;\r\n                if (command === FIREBASE_LONGPOLL_START_PARAM) {\r\n                    this.id = arg1;\r\n                    this.password = arg2;\r\n                }\r\n                else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\r\n                    // Don't clear the host cache. We got a response from the server, so we know it's reachable\r\n                    if (arg1) {\r\n                        // We aren't expecting any more data (other than what the server's already in the process of sending us\r\n                        // through our already open polls), so don't send any more.\r\n                        this.scriptTagHolder.sendNewPolls = false;\r\n                        // arg1 in this case is the last response number sent by the server. We should try to receive\r\n                        // all of the responses up to this one before closing\r\n                        this.myPacketOrderer.closeAfter(arg1, () => {\r\n                            this.onClosed_();\r\n                        });\r\n                    }\r\n                    else {\r\n                        this.onClosed_();\r\n                    }\r\n                }\r\n                else {\r\n                    throw new Error('Unrecognized command received: ' + command);\r\n                }\r\n            }, (...args) => {\r\n                const [pN, data] = args;\r\n                this.incrementIncomingBytes_(args);\r\n                this.myPacketOrderer.handleResponse(pN, data);\r\n            }, () => {\r\n                this.onClosed_();\r\n            }, this.urlFn);\r\n            //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\r\n            //from cache.\r\n            const urlParams = {};\r\n            urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\r\n            urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(Math.random() * 100000000);\r\n            if (this.scriptTagHolder.uniqueCallbackIdentifier) {\r\n                urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] =\r\n                    this.scriptTagHolder.uniqueCallbackIdentifier;\r\n            }\r\n            urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\r\n            if (this.transportSessionId) {\r\n                urlParams[TRANSPORT_SESSION_PARAM] = this.transportSessionId;\r\n            }\r\n            if (this.lastSessionId) {\r\n                urlParams[LAST_SESSION_PARAM] = this.lastSessionId;\r\n            }\r\n            if (this.applicationId) {\r\n                urlParams[APPLICATION_ID_PARAM] = this.applicationId;\r\n            }\r\n            if (this.appCheckToken) {\r\n                urlParams[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\r\n            }\r\n            if (typeof location !== 'undefined' &&\r\n                location.hostname &&\r\n                FORGE_DOMAIN_RE.test(location.hostname)) {\r\n                urlParams[REFERER_PARAM] = FORGE_REF;\r\n            }\r\n            const connectURL = this.urlFn(urlParams);\r\n            this.log_('Connecting via long-poll to ' + connectURL);\r\n            this.scriptTagHolder.addTag(connectURL, () => {\r\n                /* do nothing */\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Call this when a handshake has completed successfully and we want to consider the connection established\r\n     */\r\n    start() {\r\n        this.scriptTagHolder.startLongPoll(this.id, this.password);\r\n        this.addDisconnectPingFrame(this.id, this.password);\r\n    }\r\n    /**\r\n     * Forces long polling to be considered as a potential transport\r\n     */\r\n    static forceAllow() {\r\n        BrowserPollConnection.forceAllow_ = true;\r\n    }\r\n    /**\r\n     * Forces longpolling to not be considered as a potential transport\r\n     */\r\n    static forceDisallow() {\r\n        BrowserPollConnection.forceDisallow_ = true;\r\n    }\r\n    // Static method, use string literal so it can be accessed in a generic way\r\n    static isAvailable() {\r\n        if (isNodeSdk()) {\r\n            return false;\r\n        }\r\n        else if (BrowserPollConnection.forceAllow_) {\r\n            return true;\r\n        }\r\n        else {\r\n            // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\r\n            // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\r\n            return (!BrowserPollConnection.forceDisallow_ &&\r\n                typeof document !== 'undefined' &&\r\n                document.createElement != null &&\r\n                !isChromeExtensionContentScript() &&\r\n                !isWindowsStoreApp());\r\n        }\r\n    }\r\n    /**\r\n     * No-op for polling\r\n     */\r\n    markConnectionHealthy() { }\r\n    /**\r\n     * Stops polling and cleans up the iframe\r\n     */\r\n    shutdown_() {\r\n        this.isClosed_ = true;\r\n        if (this.scriptTagHolder) {\r\n            this.scriptTagHolder.close();\r\n            this.scriptTagHolder = null;\r\n        }\r\n        //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\r\n        if (this.myDisconnFrame) {\r\n            document.body.removeChild(this.myDisconnFrame);\r\n            this.myDisconnFrame = null;\r\n        }\r\n        if (this.connectTimeoutTimer_) {\r\n            clearTimeout(this.connectTimeoutTimer_);\r\n            this.connectTimeoutTimer_ = null;\r\n        }\r\n    }\r\n    /**\r\n     * Triggered when this transport is closed\r\n     */\r\n    onClosed_() {\r\n        if (!this.isClosed_) {\r\n            this.log_('Longpoll is closing itself');\r\n            this.shutdown_();\r\n            if (this.onDisconnect_) {\r\n                this.onDisconnect_(this.everConnected_);\r\n                this.onDisconnect_ = null;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\r\n     * that we've left.\r\n     */\r\n    close() {\r\n        if (!this.isClosed_) {\r\n            this.log_('Longpoll is being closed.');\r\n            this.shutdown_();\r\n        }\r\n    }\r\n    /**\r\n     * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\r\n     * broken into chunks (since URLs have a small maximum length).\r\n     * @param data - The JSON data to transmit.\r\n     */\r\n    send(data) {\r\n        const dataStr = stringify(data);\r\n        this.bytesSent += dataStr.length;\r\n        this.stats_.incrementCounter('bytes_sent', dataStr.length);\r\n        //first, lets get the base64-encoded data\r\n        const base64data = base64Encode(dataStr);\r\n        //We can only fit a certain amount in each URL, so we need to split this request\r\n        //up into multiple pieces if it doesn't fit in one request.\r\n        const dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\r\n        //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\r\n        //of segments so that we can reassemble the packet on the server.\r\n        for (let i = 0; i < dataSegs.length; i++) {\r\n            this.scriptTagHolder.enqueueSegment(this.curSegmentNum, dataSegs.length, dataSegs[i]);\r\n            this.curSegmentNum++;\r\n        }\r\n    }\r\n    /**\r\n     * This is how we notify the server that we're leaving.\r\n     * We aren't able to send requests with DHTML on a window close event, but we can\r\n     * trigger XHR requests in some browsers (everything but Opera basically).\r\n     */\r\n    addDisconnectPingFrame(id, pw) {\r\n        if (isNodeSdk()) {\r\n            return;\r\n        }\r\n        this.myDisconnFrame = document.createElement('iframe');\r\n        const urlParams = {};\r\n        urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\r\n        urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\r\n        urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\r\n        this.myDisconnFrame.src = this.urlFn(urlParams);\r\n        this.myDisconnFrame.style.display = 'none';\r\n        document.body.appendChild(this.myDisconnFrame);\r\n    }\r\n    /**\r\n     * Used to track the bytes received by this client\r\n     */\r\n    incrementIncomingBytes_(args) {\r\n        // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\r\n        const bytesReceived = stringify(args).length;\r\n        this.bytesReceived += bytesReceived;\r\n        this.stats_.incrementCounter('bytes_received', bytesReceived);\r\n    }\r\n}\r\n/*********************************************************************************************\r\n * A wrapper around an iframe that is used as a long-polling script holder.\r\n *********************************************************************************************/\r\nclass FirebaseIFrameScriptHolder {\r\n    /**\r\n     * @param commandCB - The callback to be called when control commands are recevied from the server.\r\n     * @param onMessageCB - The callback to be triggered when responses arrive from the server.\r\n     * @param onDisconnect - The callback to be triggered when this tag holder is closed\r\n     * @param urlFn - A function that provides the URL of the endpoint to send data to.\r\n     */\r\n    constructor(commandCB, onMessageCB, onDisconnect, urlFn) {\r\n        this.onDisconnect = onDisconnect;\r\n        this.urlFn = urlFn;\r\n        //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\r\n        //problems in some browsers.\r\n        this.outstandingRequests = new Set();\r\n        //A queue of the pending segments waiting for transmission to the server.\r\n        this.pendingSegs = [];\r\n        //A serial number. We use this for two things:\r\n        // 1) A way to ensure the browser doesn't cache responses to polls\r\n        // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\r\n        //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\r\n        //    JSONP code in the order it was added to the iframe.\r\n        this.currentSerial = Math.floor(Math.random() * 100000000);\r\n        // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\r\n        // incoming data from the server that we're waiting for).\r\n        this.sendNewPolls = true;\r\n        if (!isNodeSdk()) {\r\n            //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\r\n            //iframes where we put the long-polling script tags. We have two callbacks:\r\n            //   1) Command Callback - Triggered for control issues, like starting a connection.\r\n            //   2) Message Callback - Triggered when new data arrives.\r\n            this.uniqueCallbackIdentifier = LUIDGenerator();\r\n            window[FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier] = commandCB;\r\n            window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] =\r\n                onMessageCB;\r\n            //Create an iframe for us to add script tags to.\r\n            this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\r\n            // Set the iframe's contents.\r\n            let script = '';\r\n            // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\r\n            // for ie9, but ie8 needs to do it again in the document itself.\r\n            if (this.myIFrame.src &&\r\n                this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:') {\r\n                const currentDomain = document.domain;\r\n                script = '<script>document.domain=\"' + currentDomain + '\";</script>';\r\n            }\r\n            const iframeContents = '<html><body>' + script + '</body></html>';\r\n            try {\r\n                this.myIFrame.doc.open();\r\n                this.myIFrame.doc.write(iframeContents);\r\n                this.myIFrame.doc.close();\r\n            }\r\n            catch (e) {\r\n                log('frame writing exception');\r\n                if (e.stack) {\r\n                    log(e.stack);\r\n                }\r\n                log(e);\r\n            }\r\n        }\r\n        else {\r\n            this.commandCB = commandCB;\r\n            this.onMessageCB = onMessageCB;\r\n        }\r\n    }\r\n    /**\r\n     * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\r\n     * actually use.\r\n     */\r\n    static createIFrame_() {\r\n        const iframe = document.createElement('iframe');\r\n        iframe.style.display = 'none';\r\n        // This is necessary in order to initialize the document inside the iframe\r\n        if (document.body) {\r\n            document.body.appendChild(iframe);\r\n            try {\r\n                // If document.domain has been modified in IE, this will throw an error, and we need to set the\r\n                // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\r\n                // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\r\n                const a = iframe.contentWindow.document;\r\n                if (!a) {\r\n                    // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\r\n                    log('No IE domain setting required');\r\n                }\r\n            }\r\n            catch (e) {\r\n                const domain = document.domain;\r\n                iframe.src =\r\n                    \"javascript:void((function(){document.open();document.domain='\" +\r\n                        domain +\r\n                        \"';document.close();})())\";\r\n            }\r\n        }\r\n        else {\r\n            // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\r\n            // never gets hit.\r\n            throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\r\n        }\r\n        // Get the document of the iframe in a browser-specific way.\r\n        if (iframe.contentDocument) {\r\n            iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\r\n        }\r\n        else if (iframe.contentWindow) {\r\n            iframe.doc = iframe.contentWindow.document; // Internet Explorer\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }\r\n        else if (iframe.document) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            iframe.doc = iframe.document; //others?\r\n        }\r\n        return iframe;\r\n    }\r\n    /**\r\n     * Cancel all outstanding queries and remove the frame.\r\n     */\r\n    close() {\r\n        //Mark this iframe as dead, so no new requests are sent.\r\n        this.alive = false;\r\n        if (this.myIFrame) {\r\n            //We have to actually remove all of the html inside this iframe before removing it from the\r\n            //window, or IE will continue loading and executing the script tags we've already added, which\r\n            //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.\r\n            this.myIFrame.doc.body.innerHTML = '';\r\n            setTimeout(() => {\r\n                if (this.myIFrame !== null) {\r\n                    document.body.removeChild(this.myIFrame);\r\n                    this.myIFrame = null;\r\n                }\r\n            }, Math.floor(0));\r\n        }\r\n        // Protect from being called recursively.\r\n        const onDisconnect = this.onDisconnect;\r\n        if (onDisconnect) {\r\n            this.onDisconnect = null;\r\n            onDisconnect();\r\n        }\r\n    }\r\n    /**\r\n     * Actually start the long-polling session by adding the first script tag(s) to the iframe.\r\n     * @param id - The ID of this connection\r\n     * @param pw - The password for this connection\r\n     */\r\n    startLongPoll(id, pw) {\r\n        this.myID = id;\r\n        this.myPW = pw;\r\n        this.alive = true;\r\n        //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\r\n        while (this.newRequest_()) { }\r\n    }\r\n    /**\r\n     * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\r\n     * too many outstanding requests and we are still alive.\r\n     *\r\n     * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\r\n     * needed.\r\n     */\r\n    newRequest_() {\r\n        // We keep one outstanding request open all the time to receive data, but if we need to send data\r\n        // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\r\n        // close the old request.\r\n        if (this.alive &&\r\n            this.sendNewPolls &&\r\n            this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)) {\r\n            //construct our url\r\n            this.currentSerial++;\r\n            const urlParams = {};\r\n            urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\r\n            urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\r\n            urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\r\n            let theURL = this.urlFn(urlParams);\r\n            //Now add as much data as we can.\r\n            let curDataString = '';\r\n            let i = 0;\r\n            while (this.pendingSegs.length > 0) {\r\n                //first, lets see if the next segment will fit.\r\n                const nextSeg = this.pendingSegs[0];\r\n                if (nextSeg.d.length +\r\n                    SEG_HEADER_SIZE +\r\n                    curDataString.length <=\r\n                    MAX_URL_DATA_SIZE) {\r\n                    //great, the segment will fit. Lets append it.\r\n                    const theSeg = this.pendingSegs.shift();\r\n                    curDataString =\r\n                        curDataString +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.seg +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.ts +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_DATA_PARAM +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.d;\r\n                    i++;\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n            theURL = theURL + curDataString;\r\n            this.addLongPollTag_(theURL, this.currentSerial);\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    /**\r\n     * Queue a packet for transmission to the server.\r\n     * @param segnum - A sequential id for this packet segment used for reassembly\r\n     * @param totalsegs - The total number of segments in this packet\r\n     * @param data - The data for this segment.\r\n     */\r\n    enqueueSegment(segnum, totalsegs, data) {\r\n        //add this to the queue of segments to send.\r\n        this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });\r\n        //send the data immediately if there isn't already data being transmitted, unless\r\n        //startLongPoll hasn't been called yet.\r\n        if (this.alive) {\r\n            this.newRequest_();\r\n        }\r\n    }\r\n    /**\r\n     * Add a script tag for a regular long-poll request.\r\n     * @param url - The URL of the script tag.\r\n     * @param serial - The serial number of the request.\r\n     */\r\n    addLongPollTag_(url, serial) {\r\n        //remember that we sent this request.\r\n        this.outstandingRequests.add(serial);\r\n        const doNewRequest = () => {\r\n            this.outstandingRequests.delete(serial);\r\n            this.newRequest_();\r\n        };\r\n        // If this request doesn't return on its own accord (by the server sending us some data), we'll\r\n        // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\r\n        const keepaliveTimeout = setTimeout(doNewRequest, Math.floor(KEEPALIVE_REQUEST_INTERVAL));\r\n        const readyStateCB = () => {\r\n            // Request completed.  Cancel the keepalive.\r\n            clearTimeout(keepaliveTimeout);\r\n            // Trigger a new request so we can continue receiving data.\r\n            doNewRequest();\r\n        };\r\n        this.addTag(url, readyStateCB);\r\n    }\r\n    /**\r\n     * Add an arbitrary script tag to the iframe.\r\n     * @param url - The URL for the script tag source.\r\n     * @param loadCB - A callback to be triggered once the script has loaded.\r\n     */\r\n    addTag(url, loadCB) {\r\n        if (isNodeSdk()) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            this.doNodeLongPoll(url, loadCB);\r\n        }\r\n        else {\r\n            setTimeout(() => {\r\n                try {\r\n                    // if we're already closed, don't add this poll\r\n                    if (!this.sendNewPolls) {\r\n                        return;\r\n                    }\r\n                    const newScript = this.myIFrame.doc.createElement('script');\r\n                    newScript.type = 'text/javascript';\r\n                    newScript.async = true;\r\n                    newScript.src = url;\r\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                    newScript.onload = newScript.onreadystatechange =\r\n                        function () {\r\n                            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                            const rstate = newScript.readyState;\r\n                            if (!rstate || rstate === 'loaded' || rstate === 'complete') {\r\n                                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                                newScript.onload = newScript.onreadystatechange = null;\r\n                                if (newScript.parentNode) {\r\n                                    newScript.parentNode.removeChild(newScript);\r\n                                }\r\n                                loadCB();\r\n                            }\r\n                        };\r\n                    newScript.onerror = () => {\r\n                        log('Long-poll script failed to load: ' + url);\r\n                        this.sendNewPolls = false;\r\n                        this.close();\r\n                    };\r\n                    this.myIFrame.doc.body.appendChild(newScript);\r\n                }\r\n                catch (e) {\r\n                    // TODO: we should make this error visible somehow\r\n                }\r\n            }, Math.floor(1));\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst WEBSOCKET_MAX_FRAME_SIZE = 16384;\r\nconst WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\r\nlet WebSocketImpl = null;\r\nif (typeof MozWebSocket !== 'undefined') {\r\n    WebSocketImpl = MozWebSocket;\r\n}\r\nelse if (typeof WebSocket !== 'undefined') {\r\n    WebSocketImpl = WebSocket;\r\n}\r\n/**\r\n * Create a new websocket connection with the given callbacks.\r\n */\r\nclass WebSocketConnection {\r\n    /**\r\n     * @param connId identifier for this transport\r\n     * @param repoInfo The info for the websocket endpoint.\r\n     * @param applicationId The Firebase App ID for this project.\r\n     * @param appCheckToken The App Check Token for this client.\r\n     * @param authToken The Auth Token for this client.\r\n     * @param transportSessionId Optional transportSessionId if this is connecting\r\n     * to an existing transport session\r\n     * @param lastSessionId Optional lastSessionId if there was a previous\r\n     * connection\r\n     */\r\n    constructor(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {\r\n        this.connId = connId;\r\n        this.applicationId = applicationId;\r\n        this.appCheckToken = appCheckToken;\r\n        this.authToken = authToken;\r\n        this.keepaliveTimer = null;\r\n        this.frames = null;\r\n        this.totalFrames = 0;\r\n        this.bytesSent = 0;\r\n        this.bytesReceived = 0;\r\n        this.log_ = logWrapper(this.connId);\r\n        this.stats_ = statsManagerGetCollection(repoInfo);\r\n        this.connURL = WebSocketConnection.connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken);\r\n        this.nodeAdmin = repoInfo.nodeAdmin;\r\n    }\r\n    /**\r\n     * @param repoInfo - The info for the websocket endpoint.\r\n     * @param transportSessionId - Optional transportSessionId if this is connecting to an existing transport\r\n     *                                         session\r\n     * @param lastSessionId - Optional lastSessionId if there was a previous connection\r\n     * @returns connection url\r\n     */\r\n    static connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken) {\r\n        const urlParams = {};\r\n        urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\r\n        if (!isNodeSdk() &&\r\n            typeof location !== 'undefined' &&\r\n            location.hostname &&\r\n            FORGE_DOMAIN_RE.test(location.hostname)) {\r\n            urlParams[REFERER_PARAM] = FORGE_REF;\r\n        }\r\n        if (transportSessionId) {\r\n            urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\r\n        }\r\n        if (lastSessionId) {\r\n            urlParams[LAST_SESSION_PARAM] = lastSessionId;\r\n        }\r\n        if (appCheckToken) {\r\n            urlParams[APP_CHECK_TOKEN_PARAM] = appCheckToken;\r\n        }\r\n        return repoInfoConnectionURL(repoInfo, WEBSOCKET, urlParams);\r\n    }\r\n    /**\r\n     * @param onMessage - Callback when messages arrive\r\n     * @param onDisconnect - Callback with connection lost.\r\n     */\r\n    open(onMessage, onDisconnect) {\r\n        this.onDisconnect = onDisconnect;\r\n        this.onMessage = onMessage;\r\n        this.log_('Websocket connecting to ' + this.connURL);\r\n        this.everConnected_ = false;\r\n        // Assume failure until proven otherwise.\r\n        PersistentStorage.set('previous_websocket_failure', true);\r\n        try {\r\n            if (isNodeSdk()) {\r\n                const device = this.nodeAdmin ? 'AdminNode' : 'Node';\r\n                // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\r\n                const options = {\r\n                    headers: {\r\n                        'User-Agent': `Firebase/${PROTOCOL_VERSION}/${SDK_VERSION}/${process.platform}/${device}`,\r\n                        'X-Firebase-GMPID': this.applicationId || ''\r\n                    }\r\n                };\r\n                // If using Node with admin creds, AppCheck-related checks are unnecessary.\r\n                // Note that we send the credentials here even if they aren't admin credentials, which is\r\n                // not a problem.\r\n                // Note that this header is just used to bypass appcheck, and the token should still be sent\r\n                // through the websocket connection once it is established.\r\n                if (this.authToken) {\r\n                    options.headers['Authorization'] = `Bearer ${this.authToken}`;\r\n                }\r\n                if (this.appCheckToken) {\r\n                    options.headers['X-Firebase-AppCheck'] = this.appCheckToken;\r\n                }\r\n                // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\r\n                const env = process['env'];\r\n                const proxy = this.connURL.indexOf('wss://') === 0\r\n                    ? env['HTTPS_PROXY'] || env['https_proxy']\r\n                    : env['HTTP_PROXY'] || env['http_proxy'];\r\n                if (proxy) {\r\n                    options['proxy'] = { origin: proxy };\r\n                }\r\n                this.mySock = new WebSocketImpl(this.connURL, [], options);\r\n            }\r\n            else {\r\n                const options = {\r\n                    headers: {\r\n                        'X-Firebase-GMPID': this.applicationId || '',\r\n                        'X-Firebase-AppCheck': this.appCheckToken || ''\r\n                    }\r\n                };\r\n                this.mySock = new WebSocketImpl(this.connURL, [], options);\r\n            }\r\n        }\r\n        catch (e) {\r\n            this.log_('Error instantiating WebSocket.');\r\n            const error = e.message || e.data;\r\n            if (error) {\r\n                this.log_(error);\r\n            }\r\n            this.onClosed_();\r\n            return;\r\n        }\r\n        this.mySock.onopen = () => {\r\n            this.log_('Websocket connected.');\r\n            this.everConnected_ = true;\r\n        };\r\n        this.mySock.onclose = () => {\r\n            this.log_('Websocket connection was disconnected.');\r\n            this.mySock = null;\r\n            this.onClosed_();\r\n        };\r\n        this.mySock.onmessage = m => {\r\n            this.handleIncomingFrame(m);\r\n        };\r\n        this.mySock.onerror = e => {\r\n            this.log_('WebSocket error.  Closing connection.');\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            const error = e.message || e.data;\r\n            if (error) {\r\n                this.log_(error);\r\n            }\r\n            this.onClosed_();\r\n        };\r\n    }\r\n    /**\r\n     * No-op for websockets, we don't need to do anything once the connection is confirmed as open\r\n     */\r\n    start() { }\r\n    static forceDisallow() {\r\n        WebSocketConnection.forceDisallow_ = true;\r\n    }\r\n    static isAvailable() {\r\n        let isOldAndroid = false;\r\n        if (typeof navigator !== 'undefined' && navigator.userAgent) {\r\n            const oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\r\n            const oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\r\n            if (oldAndroidMatch && oldAndroidMatch.length > 1) {\r\n                if (parseFloat(oldAndroidMatch[1]) < 4.4) {\r\n                    isOldAndroid = true;\r\n                }\r\n            }\r\n        }\r\n        return (!isOldAndroid &&\r\n            WebSocketImpl !== null &&\r\n            !WebSocketConnection.forceDisallow_);\r\n    }\r\n    /**\r\n     * Returns true if we previously failed to connect with this transport.\r\n     */\r\n    static previouslyFailed() {\r\n        // If our persistent storage is actually only in-memory storage,\r\n        // we default to assuming that it previously failed to be safe.\r\n        return (PersistentStorage.isInMemoryStorage ||\r\n            PersistentStorage.get('previous_websocket_failure') === true);\r\n    }\r\n    markConnectionHealthy() {\r\n        PersistentStorage.remove('previous_websocket_failure');\r\n    }\r\n    appendFrame_(data) {\r\n        this.frames.push(data);\r\n        if (this.frames.length === this.totalFrames) {\r\n            const fullMess = this.frames.join('');\r\n            this.frames = null;\r\n            const jsonMess = jsonEval(fullMess);\r\n            //handle the message\r\n            this.onMessage(jsonMess);\r\n        }\r\n    }\r\n    /**\r\n     * @param frameCount - The number of frames we are expecting from the server\r\n     */\r\n    handleNewFrameCount_(frameCount) {\r\n        this.totalFrames = frameCount;\r\n        this.frames = [];\r\n    }\r\n    /**\r\n     * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\r\n     * @returns Any remaining data to be process, or null if there is none\r\n     */\r\n    extractFrameCount_(data) {\r\n        assert(this.frames === null, 'We already have a frame buffer');\r\n        // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\r\n        // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\r\n        if (data.length <= 6) {\r\n            const frameCount = Number(data);\r\n            if (!isNaN(frameCount)) {\r\n                this.handleNewFrameCount_(frameCount);\r\n                return null;\r\n            }\r\n        }\r\n        this.handleNewFrameCount_(1);\r\n        return data;\r\n    }\r\n    /**\r\n     * Process a websocket frame that has arrived from the server.\r\n     * @param mess - The frame data\r\n     */\r\n    handleIncomingFrame(mess) {\r\n        if (this.mySock === null) {\r\n            return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\r\n        }\r\n        const data = mess['data'];\r\n        this.bytesReceived += data.length;\r\n        this.stats_.incrementCounter('bytes_received', data.length);\r\n        this.resetKeepAlive();\r\n        if (this.frames !== null) {\r\n            // we're buffering\r\n            this.appendFrame_(data);\r\n        }\r\n        else {\r\n            // try to parse out a frame count, otherwise, assume 1 and process it\r\n            const remainingData = this.extractFrameCount_(data);\r\n            if (remainingData !== null) {\r\n                this.appendFrame_(remainingData);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Send a message to the server\r\n     * @param data - The JSON object to transmit\r\n     */\r\n    send(data) {\r\n        this.resetKeepAlive();\r\n        const dataStr = stringify(data);\r\n        this.bytesSent += dataStr.length;\r\n        this.stats_.incrementCounter('bytes_sent', dataStr.length);\r\n        //We can only fit a certain amount in each websocket frame, so we need to split this request\r\n        //up into multiple pieces if it doesn't fit in one request.\r\n        const dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\r\n        //Send the length header\r\n        if (dataSegs.length > 1) {\r\n            this.sendString_(String(dataSegs.length));\r\n        }\r\n        //Send the actual data in segments.\r\n        for (let i = 0; i < dataSegs.length; i++) {\r\n            this.sendString_(dataSegs[i]);\r\n        }\r\n    }\r\n    shutdown_() {\r\n        this.isClosed_ = true;\r\n        if (this.keepaliveTimer) {\r\n            clearInterval(this.keepaliveTimer);\r\n            this.keepaliveTimer = null;\r\n        }\r\n        if (this.mySock) {\r\n            this.mySock.close();\r\n            this.mySock = null;\r\n        }\r\n    }\r\n    onClosed_() {\r\n        if (!this.isClosed_) {\r\n            this.log_('WebSocket is closing itself');\r\n            this.shutdown_();\r\n            // since this is an internal close, trigger the close listener\r\n            if (this.onDisconnect) {\r\n                this.onDisconnect(this.everConnected_);\r\n                this.onDisconnect = null;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * External-facing close handler.\r\n     * Close the websocket and kill the connection.\r\n     */\r\n    close() {\r\n        if (!this.isClosed_) {\r\n            this.log_('WebSocket is being closed');\r\n            this.shutdown_();\r\n        }\r\n    }\r\n    /**\r\n     * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\r\n     * the last activity.\r\n     */\r\n    resetKeepAlive() {\r\n        clearInterval(this.keepaliveTimer);\r\n        this.keepaliveTimer = setInterval(() => {\r\n            //If there has been no websocket activity for a while, send a no-op\r\n            if (this.mySock) {\r\n                this.sendString_('0');\r\n            }\r\n            this.resetKeepAlive();\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL));\r\n    }\r\n    /**\r\n     * Send a string over the websocket.\r\n     *\r\n     * @param str - String to send.\r\n     */\r\n    sendString_(str) {\r\n        // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\r\n        // calls for some unknown reason.  We treat these as an error and disconnect.\r\n        // See https://app.asana.com/0/58926111402292/68021340250410\r\n        try {\r\n            this.mySock.send(str);\r\n        }\r\n        catch (e) {\r\n            this.log_('Exception thrown from WebSocket.send():', e.message || e.data, 'Closing connection.');\r\n            setTimeout(this.onClosed_.bind(this), 0);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Number of response before we consider the connection \"healthy.\"\r\n */\r\nWebSocketConnection.responsesRequiredToBeHealthy = 2;\r\n/**\r\n * Time to wait for the connection te become healthy before giving up.\r\n */\r\nWebSocketConnection.healthyTimeout = 30000;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\r\n * lifecycle.\r\n *\r\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\r\n * they are available.\r\n */\r\nclass TransportManager {\r\n    /**\r\n     * @param repoInfo - Metadata around the namespace we're connecting to\r\n     */\r\n    constructor(repoInfo) {\r\n        this.initTransports_(repoInfo);\r\n    }\r\n    static get ALL_TRANSPORTS() {\r\n        return [BrowserPollConnection, WebSocketConnection];\r\n    }\r\n    initTransports_(repoInfo) {\r\n        const isWebSocketsAvailable = WebSocketConnection && WebSocketConnection['isAvailable']();\r\n        let isSkipPollConnection = isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\r\n        if (repoInfo.webSocketOnly) {\r\n            if (!isWebSocketsAvailable) {\r\n                warn(\"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\");\r\n            }\r\n            isSkipPollConnection = true;\r\n        }\r\n        if (isSkipPollConnection) {\r\n            this.transports_ = [WebSocketConnection];\r\n        }\r\n        else {\r\n            const transports = (this.transports_ = []);\r\n            for (const transport of TransportManager.ALL_TRANSPORTS) {\r\n                if (transport && transport['isAvailable']()) {\r\n                    transports.push(transport);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @returns The constructor for the initial transport to use\r\n     */\r\n    initialTransport() {\r\n        if (this.transports_.length > 0) {\r\n            return this.transports_[0];\r\n        }\r\n        else {\r\n            throw new Error('No transports available');\r\n        }\r\n    }\r\n    /**\r\n     * @returns The constructor for the next transport, or null\r\n     */\r\n    upgradeTransport() {\r\n        if (this.transports_.length > 1) {\r\n            return this.transports_[1];\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Abort upgrade attempt if it takes longer than 60s.\r\nconst UPGRADE_TIMEOUT = 60000;\r\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\r\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\r\nconst DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\r\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\r\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\r\n// but we've sent/received enough bytes, we don't cancel the connection.\r\nconst BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\r\nconst BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\r\nconst MESSAGE_TYPE = 't';\r\nconst MESSAGE_DATA = 'd';\r\nconst CONTROL_SHUTDOWN = 's';\r\nconst CONTROL_RESET = 'r';\r\nconst CONTROL_ERROR = 'e';\r\nconst CONTROL_PONG = 'o';\r\nconst SWITCH_ACK = 'a';\r\nconst END_TRANSMISSION = 'n';\r\nconst PING = 'p';\r\nconst SERVER_HELLO = 'h';\r\n/**\r\n * Creates a new real-time connection to the server using whichever method works\r\n * best in the current browser.\r\n */\r\nclass Connection {\r\n    /**\r\n     * @param id - an id for this connection\r\n     * @param repoInfo_ - the info for the endpoint to connect to\r\n     * @param applicationId_ - the Firebase App ID for this project\r\n     * @param appCheckToken_ - The App Check Token for this device.\r\n     * @param authToken_ - The auth token for this session.\r\n     * @param onMessage_ - the callback to be triggered when a server-push message arrives\r\n     * @param onReady_ - the callback to be triggered when this connection is ready to send messages.\r\n     * @param onDisconnect_ - the callback to be triggered when a connection was lost\r\n     * @param onKill_ - the callback to be triggered when this connection has permanently shut down.\r\n     * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\r\n     */\r\n    constructor(id, repoInfo_, applicationId_, appCheckToken_, authToken_, onMessage_, onReady_, onDisconnect_, onKill_, lastSessionId) {\r\n        this.id = id;\r\n        this.repoInfo_ = repoInfo_;\r\n        this.applicationId_ = applicationId_;\r\n        this.appCheckToken_ = appCheckToken_;\r\n        this.authToken_ = authToken_;\r\n        this.onMessage_ = onMessage_;\r\n        this.onReady_ = onReady_;\r\n        this.onDisconnect_ = onDisconnect_;\r\n        this.onKill_ = onKill_;\r\n        this.lastSessionId = lastSessionId;\r\n        this.connectionCount = 0;\r\n        this.pendingDataMessages = [];\r\n        this.state_ = 0 /* CONNECTING */;\r\n        this.log_ = logWrapper('c:' + this.id + ':');\r\n        this.transportManager_ = new TransportManager(repoInfo_);\r\n        this.log_('Connection created');\r\n        this.start_();\r\n    }\r\n    /**\r\n     * Starts a connection attempt\r\n     */\r\n    start_() {\r\n        const conn = this.transportManager_.initialTransport();\r\n        this.conn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, null, this.lastSessionId);\r\n        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\r\n        // can consider the transport healthy.\r\n        this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\r\n        const onMessageReceived = this.connReceiver_(this.conn_);\r\n        const onConnectionLost = this.disconnReceiver_(this.conn_);\r\n        this.tx_ = this.conn_;\r\n        this.rx_ = this.conn_;\r\n        this.secondaryConn_ = null;\r\n        this.isHealthy_ = false;\r\n        /*\r\n         * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\r\n         * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\r\n         * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\r\n         * still have the context of your originating frame.\r\n         */\r\n        setTimeout(() => {\r\n            // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\r\n            this.conn_ && this.conn_.open(onMessageReceived, onConnectionLost);\r\n        }, Math.floor(0));\r\n        const healthyTimeoutMS = conn['healthyTimeout'] || 0;\r\n        if (healthyTimeoutMS > 0) {\r\n            this.healthyTimeout_ = setTimeoutNonBlocking(() => {\r\n                this.healthyTimeout_ = null;\r\n                if (!this.isHealthy_) {\r\n                    if (this.conn_ &&\r\n                        this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE) {\r\n                        this.log_('Connection exceeded healthy timeout but has received ' +\r\n                            this.conn_.bytesReceived +\r\n                            ' bytes.  Marking connection healthy.');\r\n                        this.isHealthy_ = true;\r\n                        this.conn_.markConnectionHealthy();\r\n                    }\r\n                    else if (this.conn_ &&\r\n                        this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE) {\r\n                        this.log_('Connection exceeded healthy timeout but has sent ' +\r\n                            this.conn_.bytesSent +\r\n                            ' bytes.  Leaving connection alive.');\r\n                        // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\r\n                        // the server.\r\n                    }\r\n                    else {\r\n                        this.log_('Closing unhealthy connection after timeout.');\r\n                        this.close();\r\n                    }\r\n                }\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            }, Math.floor(healthyTimeoutMS));\r\n        }\r\n    }\r\n    nextTransportId_() {\r\n        return 'c:' + this.id + ':' + this.connectionCount++;\r\n    }\r\n    disconnReceiver_(conn) {\r\n        return everConnected => {\r\n            if (conn === this.conn_) {\r\n                this.onConnectionLost_(everConnected);\r\n            }\r\n            else if (conn === this.secondaryConn_) {\r\n                this.log_('Secondary connection lost.');\r\n                this.onSecondaryConnectionLost_();\r\n            }\r\n            else {\r\n                this.log_('closing an old connection');\r\n            }\r\n        };\r\n    }\r\n    connReceiver_(conn) {\r\n        return (message) => {\r\n            if (this.state_ !== 2 /* DISCONNECTED */) {\r\n                if (conn === this.rx_) {\r\n                    this.onPrimaryMessageReceived_(message);\r\n                }\r\n                else if (conn === this.secondaryConn_) {\r\n                    this.onSecondaryMessageReceived_(message);\r\n                }\r\n                else {\r\n                    this.log_('message on old connection');\r\n                }\r\n            }\r\n        };\r\n    }\r\n    /**\r\n     * @param dataMsg - An arbitrary data message to be sent to the server\r\n     */\r\n    sendRequest(dataMsg) {\r\n        // wrap in a data message envelope and send it on\r\n        const msg = { t: 'd', d: dataMsg };\r\n        this.sendData_(msg);\r\n    }\r\n    tryCleanupConnection() {\r\n        if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\r\n            this.log_('cleaning up and promoting a connection: ' + this.secondaryConn_.connId);\r\n            this.conn_ = this.secondaryConn_;\r\n            this.secondaryConn_ = null;\r\n            // the server will shutdown the old connection\r\n        }\r\n    }\r\n    onSecondaryControl_(controlData) {\r\n        if (MESSAGE_TYPE in controlData) {\r\n            const cmd = controlData[MESSAGE_TYPE];\r\n            if (cmd === SWITCH_ACK) {\r\n                this.upgradeIfSecondaryHealthy_();\r\n            }\r\n            else if (cmd === CONTROL_RESET) {\r\n                // Most likely the session wasn't valid. Abandon the switch attempt\r\n                this.log_('Got a reset on secondary, closing it');\r\n                this.secondaryConn_.close();\r\n                // If we were already using this connection for something, than we need to fully close\r\n                if (this.tx_ === this.secondaryConn_ ||\r\n                    this.rx_ === this.secondaryConn_) {\r\n                    this.close();\r\n                }\r\n            }\r\n            else if (cmd === CONTROL_PONG) {\r\n                this.log_('got pong on secondary.');\r\n                this.secondaryResponsesRequired_--;\r\n                this.upgradeIfSecondaryHealthy_();\r\n            }\r\n        }\r\n    }\r\n    onSecondaryMessageReceived_(parsedData) {\r\n        const layer = requireKey('t', parsedData);\r\n        const data = requireKey('d', parsedData);\r\n        if (layer === 'c') {\r\n            this.onSecondaryControl_(data);\r\n        }\r\n        else if (layer === 'd') {\r\n            // got a data message, but we're still second connection. Need to buffer it up\r\n            this.pendingDataMessages.push(data);\r\n        }\r\n        else {\r\n            throw new Error('Unknown protocol layer: ' + layer);\r\n        }\r\n    }\r\n    upgradeIfSecondaryHealthy_() {\r\n        if (this.secondaryResponsesRequired_ <= 0) {\r\n            this.log_('Secondary connection is healthy.');\r\n            this.isHealthy_ = true;\r\n            this.secondaryConn_.markConnectionHealthy();\r\n            this.proceedWithUpgrade_();\r\n        }\r\n        else {\r\n            // Send a ping to make sure the connection is healthy.\r\n            this.log_('sending ping on secondary.');\r\n            this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });\r\n        }\r\n    }\r\n    proceedWithUpgrade_() {\r\n        // tell this connection to consider itself open\r\n        this.secondaryConn_.start();\r\n        // send ack\r\n        this.log_('sending client ack on secondary');\r\n        this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });\r\n        // send end packet on primary transport, switch to sending on this one\r\n        // can receive on this one, buffer responses until end received on primary transport\r\n        this.log_('Ending transmission on primary');\r\n        this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });\r\n        this.tx_ = this.secondaryConn_;\r\n        this.tryCleanupConnection();\r\n    }\r\n    onPrimaryMessageReceived_(parsedData) {\r\n        // Must refer to parsedData properties in quotes, so closure doesn't touch them.\r\n        const layer = requireKey('t', parsedData);\r\n        const data = requireKey('d', parsedData);\r\n        if (layer === 'c') {\r\n            this.onControl_(data);\r\n        }\r\n        else if (layer === 'd') {\r\n            this.onDataMessage_(data);\r\n        }\r\n    }\r\n    onDataMessage_(message) {\r\n        this.onPrimaryResponse_();\r\n        // We don't do anything with data messages, just kick them up a level\r\n        this.onMessage_(message);\r\n    }\r\n    onPrimaryResponse_() {\r\n        if (!this.isHealthy_) {\r\n            this.primaryResponsesRequired_--;\r\n            if (this.primaryResponsesRequired_ <= 0) {\r\n                this.log_('Primary connection is healthy.');\r\n                this.isHealthy_ = true;\r\n                this.conn_.markConnectionHealthy();\r\n            }\r\n        }\r\n    }\r\n    onControl_(controlData) {\r\n        const cmd = requireKey(MESSAGE_TYPE, controlData);\r\n        if (MESSAGE_DATA in controlData) {\r\n            const payload = controlData[MESSAGE_DATA];\r\n            if (cmd === SERVER_HELLO) {\r\n                this.onHandshake_(payload);\r\n            }\r\n            else if (cmd === END_TRANSMISSION) {\r\n                this.log_('recvd end transmission on primary');\r\n                this.rx_ = this.secondaryConn_;\r\n                for (let i = 0; i < this.pendingDataMessages.length; ++i) {\r\n                    this.onDataMessage_(this.pendingDataMessages[i]);\r\n                }\r\n                this.pendingDataMessages = [];\r\n                this.tryCleanupConnection();\r\n            }\r\n            else if (cmd === CONTROL_SHUTDOWN) {\r\n                // This was previously the 'onKill' callback passed to the lower-level connection\r\n                // payload in this case is the reason for the shutdown. Generally a human-readable error\r\n                this.onConnectionShutdown_(payload);\r\n            }\r\n            else if (cmd === CONTROL_RESET) {\r\n                // payload in this case is the host we should contact\r\n                this.onReset_(payload);\r\n            }\r\n            else if (cmd === CONTROL_ERROR) {\r\n                error('Server Error: ' + payload);\r\n            }\r\n            else if (cmd === CONTROL_PONG) {\r\n                this.log_('got pong on primary.');\r\n                this.onPrimaryResponse_();\r\n                this.sendPingOnPrimaryIfNecessary_();\r\n            }\r\n            else {\r\n                error('Unknown control packet command: ' + cmd);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @param handshake - The handshake data returned from the server\r\n     */\r\n    onHandshake_(handshake) {\r\n        const timestamp = handshake.ts;\r\n        const version = handshake.v;\r\n        const host = handshake.h;\r\n        this.sessionId = handshake.s;\r\n        this.repoInfo_.host = host;\r\n        // if we've already closed the connection, then don't bother trying to progress further\r\n        if (this.state_ === 0 /* CONNECTING */) {\r\n            this.conn_.start();\r\n            this.onConnectionEstablished_(this.conn_, timestamp);\r\n            if (PROTOCOL_VERSION !== version) {\r\n                warn('Protocol version mismatch detected');\r\n            }\r\n            // TODO: do we want to upgrade? when? maybe a delay?\r\n            this.tryStartUpgrade_();\r\n        }\r\n    }\r\n    tryStartUpgrade_() {\r\n        const conn = this.transportManager_.upgradeTransport();\r\n        if (conn) {\r\n            this.startUpgrade_(conn);\r\n        }\r\n    }\r\n    startUpgrade_(conn) {\r\n        this.secondaryConn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, this.sessionId);\r\n        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\r\n        // can consider the transport healthy.\r\n        this.secondaryResponsesRequired_ =\r\n            conn['responsesRequiredToBeHealthy'] || 0;\r\n        const onMessage = this.connReceiver_(this.secondaryConn_);\r\n        const onDisconnect = this.disconnReceiver_(this.secondaryConn_);\r\n        this.secondaryConn_.open(onMessage, onDisconnect);\r\n        // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\r\n        setTimeoutNonBlocking(() => {\r\n            if (this.secondaryConn_) {\r\n                this.log_('Timed out trying to upgrade.');\r\n                this.secondaryConn_.close();\r\n            }\r\n        }, Math.floor(UPGRADE_TIMEOUT));\r\n    }\r\n    onReset_(host) {\r\n        this.log_('Reset packet received.  New host: ' + host);\r\n        this.repoInfo_.host = host;\r\n        // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\r\n        // We don't currently support resets after the connection has already been established\r\n        if (this.state_ === 1 /* CONNECTED */) {\r\n            this.close();\r\n        }\r\n        else {\r\n            // Close whatever connections we have open and start again.\r\n            this.closeConnections_();\r\n            this.start_();\r\n        }\r\n    }\r\n    onConnectionEstablished_(conn, timestamp) {\r\n        this.log_('Realtime connection established.');\r\n        this.conn_ = conn;\r\n        this.state_ = 1 /* CONNECTED */;\r\n        if (this.onReady_) {\r\n            this.onReady_(timestamp, this.sessionId);\r\n            this.onReady_ = null;\r\n        }\r\n        // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\r\n        // send some pings.\r\n        if (this.primaryResponsesRequired_ === 0) {\r\n            this.log_('Primary connection is healthy.');\r\n            this.isHealthy_ = true;\r\n        }\r\n        else {\r\n            setTimeoutNonBlocking(() => {\r\n                this.sendPingOnPrimaryIfNecessary_();\r\n            }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\r\n        }\r\n    }\r\n    sendPingOnPrimaryIfNecessary_() {\r\n        // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\r\n        if (!this.isHealthy_ && this.state_ === 1 /* CONNECTED */) {\r\n            this.log_('sending ping on primary.');\r\n            this.sendData_({ t: 'c', d: { t: PING, d: {} } });\r\n        }\r\n    }\r\n    onSecondaryConnectionLost_() {\r\n        const conn = this.secondaryConn_;\r\n        this.secondaryConn_ = null;\r\n        if (this.tx_ === conn || this.rx_ === conn) {\r\n            // we are relying on this connection already in some capacity. Therefore, a failure is real\r\n            this.close();\r\n        }\r\n    }\r\n    /**\r\n     * @param everConnected - Whether or not the connection ever reached a server. Used to determine if\r\n     * we should flush the host cache\r\n     */\r\n    onConnectionLost_(everConnected) {\r\n        this.conn_ = null;\r\n        // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\r\n        // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\r\n        if (!everConnected && this.state_ === 0 /* CONNECTING */) {\r\n            this.log_('Realtime connection failed.');\r\n            // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\r\n            if (this.repoInfo_.isCacheableHost()) {\r\n                PersistentStorage.remove('host:' + this.repoInfo_.host);\r\n                // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\r\n                this.repoInfo_.internalHost = this.repoInfo_.host;\r\n            }\r\n        }\r\n        else if (this.state_ === 1 /* CONNECTED */) {\r\n            this.log_('Realtime connection lost.');\r\n        }\r\n        this.close();\r\n    }\r\n    onConnectionShutdown_(reason) {\r\n        this.log_('Connection shutdown command received. Shutting down...');\r\n        if (this.onKill_) {\r\n            this.onKill_(reason);\r\n            this.onKill_ = null;\r\n        }\r\n        // We intentionally don't want to fire onDisconnect (kill is a different case),\r\n        // so clear the callback.\r\n        this.onDisconnect_ = null;\r\n        this.close();\r\n    }\r\n    sendData_(data) {\r\n        if (this.state_ !== 1 /* CONNECTED */) {\r\n            throw 'Connection is not connected';\r\n        }\r\n        else {\r\n            this.tx_.send(data);\r\n        }\r\n    }\r\n    /**\r\n     * Cleans up this connection, calling the appropriate callbacks\r\n     */\r\n    close() {\r\n        if (this.state_ !== 2 /* DISCONNECTED */) {\r\n            this.log_('Closing realtime connection.');\r\n            this.state_ = 2 /* DISCONNECTED */;\r\n            this.closeConnections_();\r\n            if (this.onDisconnect_) {\r\n                this.onDisconnect_();\r\n                this.onDisconnect_ = null;\r\n            }\r\n        }\r\n    }\r\n    closeConnections_() {\r\n        this.log_('Shutting down all connections');\r\n        if (this.conn_) {\r\n            this.conn_.close();\r\n            this.conn_ = null;\r\n        }\r\n        if (this.secondaryConn_) {\r\n            this.secondaryConn_.close();\r\n            this.secondaryConn_ = null;\r\n        }\r\n        if (this.healthyTimeout_) {\r\n            clearTimeout(this.healthyTimeout_);\r\n            this.healthyTimeout_ = null;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Interface defining the set of actions that can be performed against the Firebase server\r\n * (basically corresponds to our wire protocol).\r\n *\r\n * @interface\r\n */\r\nclass ServerActions {\r\n    put(pathString, data, onComplete, hash) { }\r\n    merge(pathString, data, onComplete, hash) { }\r\n    /**\r\n     * Refreshes the auth token for the current connection.\r\n     * @param token - The authentication token\r\n     */\r\n    refreshAuthToken(token) { }\r\n    /**\r\n     * Refreshes the app check token for the current connection.\r\n     * @param token The app check token\r\n     */\r\n    refreshAppCheckToken(token) { }\r\n    onDisconnectPut(pathString, data, onComplete) { }\r\n    onDisconnectMerge(pathString, data, onComplete) { }\r\n    onDisconnectCancel(pathString, onComplete) { }\r\n    reportStats(stats) { }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Base class to be used if you want to emit events. Call the constructor with\r\n * the set of allowed event names.\r\n */\r\nclass EventEmitter {\r\n    constructor(allowedEvents_) {\r\n        this.allowedEvents_ = allowedEvents_;\r\n        this.listeners_ = {};\r\n        assert(Array.isArray(allowedEvents_) && allowedEvents_.length > 0, 'Requires a non-empty array');\r\n    }\r\n    /**\r\n     * To be called by derived classes to trigger events.\r\n     */\r\n    trigger(eventType, ...varArgs) {\r\n        if (Array.isArray(this.listeners_[eventType])) {\r\n            // Clone the list, since callbacks could add/remove listeners.\r\n            const listeners = [...this.listeners_[eventType]];\r\n            for (let i = 0; i < listeners.length; i++) {\r\n                listeners[i].callback.apply(listeners[i].context, varArgs);\r\n            }\r\n        }\r\n    }\r\n    on(eventType, callback, context) {\r\n        this.validateEventType_(eventType);\r\n        this.listeners_[eventType] = this.listeners_[eventType] || [];\r\n        this.listeners_[eventType].push({ callback, context });\r\n        const eventData = this.getInitialEvent(eventType);\r\n        if (eventData) {\r\n            callback.apply(context, eventData);\r\n        }\r\n    }\r\n    off(eventType, callback, context) {\r\n        this.validateEventType_(eventType);\r\n        const listeners = this.listeners_[eventType] || [];\r\n        for (let i = 0; i < listeners.length; i++) {\r\n            if (listeners[i].callback === callback &&\r\n                (!context || context === listeners[i].context)) {\r\n                listeners.splice(i, 1);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    validateEventType_(eventType) {\r\n        assert(this.allowedEvents_.find(et => {\r\n            return et === eventType;\r\n        }), 'Unknown event: ' + eventType);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Monitors online state (as reported by window.online/offline events).\r\n *\r\n * The expectation is that this could have many false positives (thinks we are online\r\n * when we're not), but no false negatives.  So we can safely use it to determine when\r\n * we definitely cannot reach the internet.\r\n */\r\nclass OnlineMonitor extends EventEmitter {\r\n    constructor() {\r\n        super(['online']);\r\n        this.online_ = true;\r\n        // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\r\n        // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\r\n        // It would seem that the 'online' event does not always fire consistently. So we disable it\r\n        // for Cordova.\r\n        if (typeof window !== 'undefined' &&\r\n            typeof window.addEventListener !== 'undefined' &&\r\n            !isMobileCordova()) {\r\n            window.addEventListener('online', () => {\r\n                if (!this.online_) {\r\n                    this.online_ = true;\r\n                    this.trigger('online', true);\r\n                }\r\n            }, false);\r\n            window.addEventListener('offline', () => {\r\n                if (this.online_) {\r\n                    this.online_ = false;\r\n                    this.trigger('online', false);\r\n                }\r\n            }, false);\r\n        }\r\n    }\r\n    static getInstance() {\r\n        return new OnlineMonitor();\r\n    }\r\n    getInitialEvent(eventType) {\r\n        assert(eventType === 'online', 'Unknown event type: ' + eventType);\r\n        return [this.online_];\r\n    }\r\n    currentlyOnline() {\r\n        return this.online_;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** Maximum key depth. */\r\nconst MAX_PATH_DEPTH = 32;\r\n/** Maximum number of (UTF8) bytes in a Firebase path. */\r\nconst MAX_PATH_LENGTH_BYTES = 768;\r\n/**\r\n * An immutable object representing a parsed path.  It's immutable so that you\r\n * can pass them around to other functions without worrying about them changing\r\n * it.\r\n */\r\nclass Path {\r\n    /**\r\n     * @param pathOrString - Path string to parse, or another path, or the raw\r\n     * tokens array\r\n     */\r\n    constructor(pathOrString, pieceNum) {\r\n        if (pieceNum === void 0) {\r\n            this.pieces_ = pathOrString.split('/');\r\n            // Remove empty pieces.\r\n            let copyTo = 0;\r\n            for (let i = 0; i < this.pieces_.length; i++) {\r\n                if (this.pieces_[i].length > 0) {\r\n                    this.pieces_[copyTo] = this.pieces_[i];\r\n                    copyTo++;\r\n                }\r\n            }\r\n            this.pieces_.length = copyTo;\r\n            this.pieceNum_ = 0;\r\n        }\r\n        else {\r\n            this.pieces_ = pathOrString;\r\n            this.pieceNum_ = pieceNum;\r\n        }\r\n    }\r\n    toString() {\r\n        let pathString = '';\r\n        for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\r\n            if (this.pieces_[i] !== '') {\r\n                pathString += '/' + this.pieces_[i];\r\n            }\r\n        }\r\n        return pathString || '/';\r\n    }\r\n}\r\nfunction newEmptyPath() {\r\n    return new Path('');\r\n}\r\nfunction pathGetFront(path) {\r\n    if (path.pieceNum_ >= path.pieces_.length) {\r\n        return null;\r\n    }\r\n    return path.pieces_[path.pieceNum_];\r\n}\r\n/**\r\n * @returns The number of segments in this path\r\n */\r\nfunction pathGetLength(path) {\r\n    return path.pieces_.length - path.pieceNum_;\r\n}\r\nfunction pathPopFront(path) {\r\n    let pieceNum = path.pieceNum_;\r\n    if (pieceNum < path.pieces_.length) {\r\n        pieceNum++;\r\n    }\r\n    return new Path(path.pieces_, pieceNum);\r\n}\r\nfunction pathGetBack(path) {\r\n    if (path.pieceNum_ < path.pieces_.length) {\r\n        return path.pieces_[path.pieces_.length - 1];\r\n    }\r\n    return null;\r\n}\r\nfunction pathToUrlEncodedString(path) {\r\n    let pathString = '';\r\n    for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\r\n        if (path.pieces_[i] !== '') {\r\n            pathString += '/' + encodeURIComponent(String(path.pieces_[i]));\r\n        }\r\n    }\r\n    return pathString || '/';\r\n}\r\n/**\r\n * Shallow copy of the parts of the path.\r\n *\r\n */\r\nfunction pathSlice(path, begin = 0) {\r\n    return path.pieces_.slice(path.pieceNum_ + begin);\r\n}\r\nfunction pathParent(path) {\r\n    if (path.pieceNum_ >= path.pieces_.length) {\r\n        return null;\r\n    }\r\n    const pieces = [];\r\n    for (let i = path.pieceNum_; i < path.pieces_.length - 1; i++) {\r\n        pieces.push(path.pieces_[i]);\r\n    }\r\n    return new Path(pieces, 0);\r\n}\r\nfunction pathChild(path, childPathObj) {\r\n    const pieces = [];\r\n    for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\r\n        pieces.push(path.pieces_[i]);\r\n    }\r\n    if (childPathObj instanceof Path) {\r\n        for (let i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {\r\n            pieces.push(childPathObj.pieces_[i]);\r\n        }\r\n    }\r\n    else {\r\n        const childPieces = childPathObj.split('/');\r\n        for (let i = 0; i < childPieces.length; i++) {\r\n            if (childPieces[i].length > 0) {\r\n                pieces.push(childPieces[i]);\r\n            }\r\n        }\r\n    }\r\n    return new Path(pieces, 0);\r\n}\r\n/**\r\n * @returns True if there are no segments in this path\r\n */\r\nfunction pathIsEmpty(path) {\r\n    return path.pieceNum_ >= path.pieces_.length;\r\n}\r\n/**\r\n * @returns The path from outerPath to innerPath\r\n */\r\nfunction newRelativePath(outerPath, innerPath) {\r\n    const outer = pathGetFront(outerPath), inner = pathGetFront(innerPath);\r\n    if (outer === null) {\r\n        return innerPath;\r\n    }\r\n    else if (outer === inner) {\r\n        return newRelativePath(pathPopFront(outerPath), pathPopFront(innerPath));\r\n    }\r\n    else {\r\n        throw new Error('INTERNAL ERROR: innerPath (' +\r\n            innerPath +\r\n            ') is not within ' +\r\n            'outerPath (' +\r\n            outerPath +\r\n            ')');\r\n    }\r\n}\r\n/**\r\n * @returns -1, 0, 1 if left is less, equal, or greater than the right.\r\n */\r\nfunction pathCompare(left, right) {\r\n    const leftKeys = pathSlice(left, 0);\r\n    const rightKeys = pathSlice(right, 0);\r\n    for (let i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\r\n        const cmp = nameCompare(leftKeys[i], rightKeys[i]);\r\n        if (cmp !== 0) {\r\n            return cmp;\r\n        }\r\n    }\r\n    if (leftKeys.length === rightKeys.length) {\r\n        return 0;\r\n    }\r\n    return leftKeys.length < rightKeys.length ? -1 : 1;\r\n}\r\n/**\r\n * @returns true if paths are the same.\r\n */\r\nfunction pathEquals(path, other) {\r\n    if (pathGetLength(path) !== pathGetLength(other)) {\r\n        return false;\r\n    }\r\n    for (let i = path.pieceNum_, j = other.pieceNum_; i <= path.pieces_.length; i++, j++) {\r\n        if (path.pieces_[i] !== other.pieces_[j]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * @returns True if this path is a parent (or the same as) other\r\n */\r\nfunction pathContains(path, other) {\r\n    let i = path.pieceNum_;\r\n    let j = other.pieceNum_;\r\n    if (pathGetLength(path) > pathGetLength(other)) {\r\n        return false;\r\n    }\r\n    while (i < path.pieces_.length) {\r\n        if (path.pieces_[i] !== other.pieces_[j]) {\r\n            return false;\r\n        }\r\n        ++i;\r\n        ++j;\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * Dynamic (mutable) path used to count path lengths.\r\n *\r\n * This class is used to efficiently check paths for valid\r\n * length (in UTF8 bytes) and depth (used in path validation).\r\n *\r\n * Throws Error exception if path is ever invalid.\r\n *\r\n * The definition of a path always begins with '/'.\r\n */\r\nclass ValidationPath {\r\n    /**\r\n     * @param path - Initial Path.\r\n     * @param errorPrefix_ - Prefix for any error messages.\r\n     */\r\n    constructor(path, errorPrefix_) {\r\n        this.errorPrefix_ = errorPrefix_;\r\n        this.parts_ = pathSlice(path, 0);\r\n        /** Initialize to number of '/' chars needed in path. */\r\n        this.byteLength_ = Math.max(1, this.parts_.length);\r\n        for (let i = 0; i < this.parts_.length; i++) {\r\n            this.byteLength_ += stringLength(this.parts_[i]);\r\n        }\r\n        validationPathCheckValid(this);\r\n    }\r\n}\r\nfunction validationPathPush(validationPath, child) {\r\n    // Count the needed '/'\r\n    if (validationPath.parts_.length > 0) {\r\n        validationPath.byteLength_ += 1;\r\n    }\r\n    validationPath.parts_.push(child);\r\n    validationPath.byteLength_ += stringLength(child);\r\n    validationPathCheckValid(validationPath);\r\n}\r\nfunction validationPathPop(validationPath) {\r\n    const last = validationPath.parts_.pop();\r\n    validationPath.byteLength_ -= stringLength(last);\r\n    // Un-count the previous '/'\r\n    if (validationPath.parts_.length > 0) {\r\n        validationPath.byteLength_ -= 1;\r\n    }\r\n}\r\nfunction validationPathCheckValid(validationPath) {\r\n    if (validationPath.byteLength_ > MAX_PATH_LENGTH_BYTES) {\r\n        throw new Error(validationPath.errorPrefix_ +\r\n            'has a key path longer than ' +\r\n            MAX_PATH_LENGTH_BYTES +\r\n            ' bytes (' +\r\n            validationPath.byteLength_ +\r\n            ').');\r\n    }\r\n    if (validationPath.parts_.length > MAX_PATH_DEPTH) {\r\n        throw new Error(validationPath.errorPrefix_ +\r\n            'path specified exceeds the maximum depth that can be written (' +\r\n            MAX_PATH_DEPTH +\r\n            ') or object contains a cycle ' +\r\n            validationPathToErrorString(validationPath));\r\n    }\r\n}\r\n/**\r\n * String for use in error messages - uses '.' notation for path.\r\n */\r\nfunction validationPathToErrorString(validationPath) {\r\n    if (validationPath.parts_.length === 0) {\r\n        return '';\r\n    }\r\n    return \"in property '\" + validationPath.parts_.join('.') + \"'\";\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass VisibilityMonitor extends EventEmitter {\r\n    constructor() {\r\n        super(['visible']);\r\n        let hidden;\r\n        let visibilityChange;\r\n        if (typeof document !== 'undefined' &&\r\n            typeof document.addEventListener !== 'undefined') {\r\n            if (typeof document['hidden'] !== 'undefined') {\r\n                // Opera 12.10 and Firefox 18 and later support\r\n                visibilityChange = 'visibilitychange';\r\n                hidden = 'hidden';\r\n            }\r\n            else if (typeof document['mozHidden'] !== 'undefined') {\r\n                visibilityChange = 'mozvisibilitychange';\r\n                hidden = 'mozHidden';\r\n            }\r\n            else if (typeof document['msHidden'] !== 'undefined') {\r\n                visibilityChange = 'msvisibilitychange';\r\n                hidden = 'msHidden';\r\n            }\r\n            else if (typeof document['webkitHidden'] !== 'undefined') {\r\n                visibilityChange = 'webkitvisibilitychange';\r\n                hidden = 'webkitHidden';\r\n            }\r\n        }\r\n        // Initially, we always assume we are visible. This ensures that in browsers\r\n        // without page visibility support or in cases where we are never visible\r\n        // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\r\n        // reconnects\r\n        this.visible_ = true;\r\n        if (visibilityChange) {\r\n            document.addEventListener(visibilityChange, () => {\r\n                const visible = !document[hidden];\r\n                if (visible !== this.visible_) {\r\n                    this.visible_ = visible;\r\n                    this.trigger('visible', visible);\r\n                }\r\n            }, false);\r\n        }\r\n    }\r\n    static getInstance() {\r\n        return new VisibilityMonitor();\r\n    }\r\n    getInitialEvent(eventType) {\r\n        assert(eventType === 'visible', 'Unknown event type: ' + eventType);\r\n        return [this.visible_];\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst RECONNECT_MIN_DELAY = 1000;\r\nconst RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\r\nconst GET_CONNECT_TIMEOUT = 3 * 1000;\r\nconst RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\r\nconst RECONNECT_DELAY_MULTIPLIER = 1.3;\r\nconst RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\r\nconst SERVER_KILL_INTERRUPT_REASON = 'server_kill';\r\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\r\nconst INVALID_TOKEN_THRESHOLD = 3;\r\n/**\r\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\r\n *\r\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\r\n * in quotes to make sure the closure compiler does not minify them.\r\n */\r\nclass PersistentConnection extends ServerActions {\r\n    /**\r\n     * @param repoInfo_ - Data about the namespace we are connecting to\r\n     * @param applicationId_ - The Firebase App ID for this project\r\n     * @param onDataUpdate_ - A callback for new data from the server\r\n     */\r\n    constructor(repoInfo_, applicationId_, onDataUpdate_, onConnectStatus_, onServerInfoUpdate_, authTokenProvider_, appCheckTokenProvider_, authOverride_) {\r\n        super();\r\n        this.repoInfo_ = repoInfo_;\r\n        this.applicationId_ = applicationId_;\r\n        this.onDataUpdate_ = onDataUpdate_;\r\n        this.onConnectStatus_ = onConnectStatus_;\r\n        this.onServerInfoUpdate_ = onServerInfoUpdate_;\r\n        this.authTokenProvider_ = authTokenProvider_;\r\n        this.appCheckTokenProvider_ = appCheckTokenProvider_;\r\n        this.authOverride_ = authOverride_;\r\n        // Used for diagnostic logging.\r\n        this.id = PersistentConnection.nextPersistentConnectionId_++;\r\n        this.log_ = logWrapper('p:' + this.id + ':');\r\n        this.interruptReasons_ = {};\r\n        this.listens = new Map();\r\n        this.outstandingPuts_ = [];\r\n        this.outstandingGets_ = [];\r\n        this.outstandingPutCount_ = 0;\r\n        this.outstandingGetCount_ = 0;\r\n        this.onDisconnectRequestQueue_ = [];\r\n        this.connected_ = false;\r\n        this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n        this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\r\n        this.securityDebugCallback_ = null;\r\n        this.lastSessionId = null;\r\n        this.establishConnectionTimer_ = null;\r\n        this.visible_ = false;\r\n        // Before we get connected, we keep a queue of pending messages to send.\r\n        this.requestCBHash_ = {};\r\n        this.requestNumber_ = 0;\r\n        this.realtime_ = null;\r\n        this.authToken_ = null;\r\n        this.appCheckToken_ = null;\r\n        this.forceTokenRefresh_ = false;\r\n        this.invalidAuthTokenCount_ = 0;\r\n        this.invalidAppCheckTokenCount_ = 0;\r\n        this.firstConnection_ = true;\r\n        this.lastConnectionAttemptTime_ = null;\r\n        this.lastConnectionEstablishedTime_ = null;\r\n        if (authOverride_ && !isNodeSdk()) {\r\n            throw new Error('Auth override specified in options, but not supported on non Node.js platforms');\r\n        }\r\n        VisibilityMonitor.getInstance().on('visible', this.onVisible_, this);\r\n        if (repoInfo_.host.indexOf('fblocal') === -1) {\r\n            OnlineMonitor.getInstance().on('online', this.onOnline_, this);\r\n        }\r\n    }\r\n    sendRequest(action, body, onResponse) {\r\n        const curReqNum = ++this.requestNumber_;\r\n        const msg = { r: curReqNum, a: action, b: body };\r\n        this.log_(stringify(msg));\r\n        assert(this.connected_, \"sendRequest call when we're not connected not allowed.\");\r\n        this.realtime_.sendRequest(msg);\r\n        if (onResponse) {\r\n            this.requestCBHash_[curReqNum] = onResponse;\r\n        }\r\n    }\r\n    get(query) {\r\n        this.initConnection_();\r\n        const deferred = new Deferred();\r\n        const request = {\r\n            p: query._path.toString(),\r\n            q: query._queryObject\r\n        };\r\n        const outstandingGet = {\r\n            action: 'g',\r\n            request,\r\n            onComplete: (message) => {\r\n                const payload = message['d'];\r\n                if (message['s'] === 'ok') {\r\n                    this.onDataUpdate_(request['p'], payload, \r\n                    /*isMerge*/ false, \r\n                    /*tag*/ null);\r\n                    deferred.resolve(payload);\r\n                }\r\n                else {\r\n                    deferred.reject(payload);\r\n                }\r\n            }\r\n        };\r\n        this.outstandingGets_.push(outstandingGet);\r\n        this.outstandingGetCount_++;\r\n        const index = this.outstandingGets_.length - 1;\r\n        if (!this.connected_) {\r\n            setTimeout(() => {\r\n                const get = this.outstandingGets_[index];\r\n                if (get === undefined || outstandingGet !== get) {\r\n                    return;\r\n                }\r\n                delete this.outstandingGets_[index];\r\n                this.outstandingGetCount_--;\r\n                if (this.outstandingGetCount_ === 0) {\r\n                    this.outstandingGets_ = [];\r\n                }\r\n                this.log_('get ' + index + ' timed out on connection');\r\n                deferred.reject(new Error('Client is offline.'));\r\n            }, GET_CONNECT_TIMEOUT);\r\n        }\r\n        if (this.connected_) {\r\n            this.sendGet_(index);\r\n        }\r\n        return deferred.promise;\r\n    }\r\n    listen(query, currentHashFn, tag, onComplete) {\r\n        this.initConnection_();\r\n        const queryId = query._queryIdentifier;\r\n        const pathString = query._path.toString();\r\n        this.log_('Listen called for ' + pathString + ' ' + queryId);\r\n        if (!this.listens.has(pathString)) {\r\n            this.listens.set(pathString, new Map());\r\n        }\r\n        assert(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'listen() called for non-default but complete query');\r\n        assert(!this.listens.get(pathString).has(queryId), 'listen() called twice for same path/queryId.');\r\n        const listenSpec = {\r\n            onComplete,\r\n            hashFn: currentHashFn,\r\n            query,\r\n            tag\r\n        };\r\n        this.listens.get(pathString).set(queryId, listenSpec);\r\n        if (this.connected_) {\r\n            this.sendListen_(listenSpec);\r\n        }\r\n    }\r\n    sendGet_(index) {\r\n        const get = this.outstandingGets_[index];\r\n        this.sendRequest('g', get.request, (message) => {\r\n            delete this.outstandingGets_[index];\r\n            this.outstandingGetCount_--;\r\n            if (this.outstandingGetCount_ === 0) {\r\n                this.outstandingGets_ = [];\r\n            }\r\n            if (get.onComplete) {\r\n                get.onComplete(message);\r\n            }\r\n        });\r\n    }\r\n    sendListen_(listenSpec) {\r\n        const query = listenSpec.query;\r\n        const pathString = query._path.toString();\r\n        const queryId = query._queryIdentifier;\r\n        this.log_('Listen on ' + pathString + ' for ' + queryId);\r\n        const req = { /*path*/ p: pathString };\r\n        const action = 'q';\r\n        // Only bother to send query if it's non-default.\r\n        if (listenSpec.tag) {\r\n            req['q'] = query._queryObject;\r\n            req['t'] = listenSpec.tag;\r\n        }\r\n        req[ /*hash*/'h'] = listenSpec.hashFn();\r\n        this.sendRequest(action, req, (message) => {\r\n            const payload = message[ /*data*/'d'];\r\n            const status = message[ /*status*/'s'];\r\n            // print warnings in any case...\r\n            PersistentConnection.warnOnListenWarnings_(payload, query);\r\n            const currentListenSpec = this.listens.get(pathString) &&\r\n                this.listens.get(pathString).get(queryId);\r\n            // only trigger actions if the listen hasn't been removed and readded\r\n            if (currentListenSpec === listenSpec) {\r\n                this.log_('listen response', message);\r\n                if (status !== 'ok') {\r\n                    this.removeListen_(pathString, queryId);\r\n                }\r\n                if (listenSpec.onComplete) {\r\n                    listenSpec.onComplete(status, payload);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    static warnOnListenWarnings_(payload, query) {\r\n        if (payload && typeof payload === 'object' && contains(payload, 'w')) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            const warnings = safeGet(payload, 'w');\r\n            if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\r\n                const indexSpec = '\".indexOn\": \"' + query._queryParams.getIndex().toString() + '\"';\r\n                const indexPath = query._path.toString();\r\n                warn(`Using an unspecified index. Your data will be downloaded and ` +\r\n                    `filtered on the client. Consider adding ${indexSpec} at ` +\r\n                    `${indexPath} to your security rules for better performance.`);\r\n            }\r\n        }\r\n    }\r\n    refreshAuthToken(token) {\r\n        this.authToken_ = token;\r\n        this.log_('Auth token refreshed');\r\n        if (this.authToken_) {\r\n            this.tryAuth();\r\n        }\r\n        else {\r\n            //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\r\n            //the credential so we dont become authenticated next time we connect.\r\n            if (this.connected_) {\r\n                this.sendRequest('unauth', {}, () => { });\r\n            }\r\n        }\r\n        this.reduceReconnectDelayIfAdminCredential_(token);\r\n    }\r\n    reduceReconnectDelayIfAdminCredential_(credential) {\r\n        // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\r\n        // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\r\n        const isFirebaseSecret = credential && credential.length === 40;\r\n        if (isFirebaseSecret || isAdmin(credential)) {\r\n            this.log_('Admin auth credential detected.  Reducing max reconnect time.');\r\n            this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\r\n        }\r\n    }\r\n    refreshAppCheckToken(token) {\r\n        this.appCheckToken_ = token;\r\n        this.log_('App check token refreshed');\r\n        if (this.appCheckToken_) {\r\n            this.tryAppCheck();\r\n        }\r\n        else {\r\n            //If we're connected we want to let the server know to unauthenticate us.\r\n            //If we're not connected, simply delete the credential so we dont become\r\n            // authenticated next time we connect.\r\n            if (this.connected_) {\r\n                this.sendRequest('unappeck', {}, () => { });\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\r\n     * a auth revoked (the connection is closed).\r\n     */\r\n    tryAuth() {\r\n        if (this.connected_ && this.authToken_) {\r\n            const token = this.authToken_;\r\n            const authMethod = isValidFormat(token) ? 'auth' : 'gauth';\r\n            const requestData = { cred: token };\r\n            if (this.authOverride_ === null) {\r\n                requestData['noauth'] = true;\r\n            }\r\n            else if (typeof this.authOverride_ === 'object') {\r\n                requestData['authvar'] = this.authOverride_;\r\n            }\r\n            this.sendRequest(authMethod, requestData, (res) => {\r\n                const status = res[ /*status*/'s'];\r\n                const data = res[ /*data*/'d'] || 'error';\r\n                if (this.authToken_ === token) {\r\n                    if (status === 'ok') {\r\n                        this.invalidAuthTokenCount_ = 0;\r\n                    }\r\n                    else {\r\n                        // Triggers reconnect and force refresh for auth token\r\n                        this.onAuthRevoked_(status, data);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Attempts to authenticate with the given token. If the authentication\r\n     * attempt fails, it's triggered like the token was revoked (the connection is\r\n     * closed).\r\n     */\r\n    tryAppCheck() {\r\n        if (this.connected_ && this.appCheckToken_) {\r\n            this.sendRequest('appcheck', { 'token': this.appCheckToken_ }, (res) => {\r\n                const status = res[ /*status*/'s'];\r\n                const data = res[ /*data*/'d'] || 'error';\r\n                if (status === 'ok') {\r\n                    this.invalidAppCheckTokenCount_ = 0;\r\n                }\r\n                else {\r\n                    this.onAppCheckRevoked_(status, data);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    unlisten(query, tag) {\r\n        const pathString = query._path.toString();\r\n        const queryId = query._queryIdentifier;\r\n        this.log_('Unlisten called for ' + pathString + ' ' + queryId);\r\n        assert(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'unlisten() called for non-default but complete query');\r\n        const listen = this.removeListen_(pathString, queryId);\r\n        if (listen && this.connected_) {\r\n            this.sendUnlisten_(pathString, queryId, query._queryObject, tag);\r\n        }\r\n    }\r\n    sendUnlisten_(pathString, queryId, queryObj, tag) {\r\n        this.log_('Unlisten on ' + pathString + ' for ' + queryId);\r\n        const req = { /*path*/ p: pathString };\r\n        const action = 'n';\r\n        // Only bother sending queryId if it's non-default.\r\n        if (tag) {\r\n            req['q'] = queryObj;\r\n            req['t'] = tag;\r\n        }\r\n        this.sendRequest(action, req);\r\n    }\r\n    onDisconnectPut(pathString, data, onComplete) {\r\n        this.initConnection_();\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('o', pathString, data, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString,\r\n                action: 'o',\r\n                data,\r\n                onComplete\r\n            });\r\n        }\r\n    }\r\n    onDisconnectMerge(pathString, data, onComplete) {\r\n        this.initConnection_();\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('om', pathString, data, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString,\r\n                action: 'om',\r\n                data,\r\n                onComplete\r\n            });\r\n        }\r\n    }\r\n    onDisconnectCancel(pathString, onComplete) {\r\n        this.initConnection_();\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('oc', pathString, null, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString,\r\n                action: 'oc',\r\n                data: null,\r\n                onComplete\r\n            });\r\n        }\r\n    }\r\n    sendOnDisconnect_(action, pathString, data, onComplete) {\r\n        const request = { /*path*/ p: pathString, /*data*/ d: data };\r\n        this.log_('onDisconnect ' + action, request);\r\n        this.sendRequest(action, request, (response) => {\r\n            if (onComplete) {\r\n                setTimeout(() => {\r\n                    onComplete(response[ /*status*/'s'], response[ /* data */'d']);\r\n                }, Math.floor(0));\r\n            }\r\n        });\r\n    }\r\n    put(pathString, data, onComplete, hash) {\r\n        this.putInternal('p', pathString, data, onComplete, hash);\r\n    }\r\n    merge(pathString, data, onComplete, hash) {\r\n        this.putInternal('m', pathString, data, onComplete, hash);\r\n    }\r\n    putInternal(action, pathString, data, onComplete, hash) {\r\n        this.initConnection_();\r\n        const request = {\r\n            /*path*/ p: pathString,\r\n            /*data*/ d: data\r\n        };\r\n        if (hash !== undefined) {\r\n            request[ /*hash*/'h'] = hash;\r\n        }\r\n        // TODO: Only keep track of the most recent put for a given path?\r\n        this.outstandingPuts_.push({\r\n            action,\r\n            request,\r\n            onComplete\r\n        });\r\n        this.outstandingPutCount_++;\r\n        const index = this.outstandingPuts_.length - 1;\r\n        if (this.connected_) {\r\n            this.sendPut_(index);\r\n        }\r\n        else {\r\n            this.log_('Buffering put: ' + pathString);\r\n        }\r\n    }\r\n    sendPut_(index) {\r\n        const action = this.outstandingPuts_[index].action;\r\n        const request = this.outstandingPuts_[index].request;\r\n        const onComplete = this.outstandingPuts_[index].onComplete;\r\n        this.outstandingPuts_[index].queued = this.connected_;\r\n        this.sendRequest(action, request, (message) => {\r\n            this.log_(action + ' response', message);\r\n            delete this.outstandingPuts_[index];\r\n            this.outstandingPutCount_--;\r\n            // Clean up array occasionally.\r\n            if (this.outstandingPutCount_ === 0) {\r\n                this.outstandingPuts_ = [];\r\n            }\r\n            if (onComplete) {\r\n                onComplete(message[ /*status*/'s'], message[ /* data */'d']);\r\n            }\r\n        });\r\n    }\r\n    reportStats(stats) {\r\n        // If we're not connected, we just drop the stats.\r\n        if (this.connected_) {\r\n            const request = { /*counters*/ c: stats };\r\n            this.log_('reportStats', request);\r\n            this.sendRequest(/*stats*/ 's', request, result => {\r\n                const status = result[ /*status*/'s'];\r\n                if (status !== 'ok') {\r\n                    const errorReason = result[ /* data */'d'];\r\n                    this.log_('reportStats', 'Error sending stats: ' + errorReason);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    onDataMessage_(message) {\r\n        if ('r' in message) {\r\n            // this is a response\r\n            this.log_('from server: ' + stringify(message));\r\n            const reqNum = message['r'];\r\n            const onResponse = this.requestCBHash_[reqNum];\r\n            if (onResponse) {\r\n                delete this.requestCBHash_[reqNum];\r\n                onResponse(message[ /*body*/'b']);\r\n            }\r\n        }\r\n        else if ('error' in message) {\r\n            throw 'A server-side error has occurred: ' + message['error'];\r\n        }\r\n        else if ('a' in message) {\r\n            // a and b are action and body, respectively\r\n            this.onDataPush_(message['a'], message['b']);\r\n        }\r\n    }\r\n    onDataPush_(action, body) {\r\n        this.log_('handleServerMessage', action, body);\r\n        if (action === 'd') {\r\n            this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], \r\n            /*isMerge*/ false, body['t']);\r\n        }\r\n        else if (action === 'm') {\r\n            this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], \r\n            /*isMerge=*/ true, body['t']);\r\n        }\r\n        else if (action === 'c') {\r\n            this.onListenRevoked_(body[ /*path*/'p'], body[ /*query*/'q']);\r\n        }\r\n        else if (action === 'ac') {\r\n            this.onAuthRevoked_(body[ /*status code*/'s'], body[ /* explanation */'d']);\r\n        }\r\n        else if (action === 'apc') {\r\n            this.onAppCheckRevoked_(body[ /*status code*/'s'], body[ /* explanation */'d']);\r\n        }\r\n        else if (action === 'sd') {\r\n            this.onSecurityDebugPacket_(body);\r\n        }\r\n        else {\r\n            error('Unrecognized action received from server: ' +\r\n                stringify(action) +\r\n                '\\nAre you using the latest client?');\r\n        }\r\n    }\r\n    onReady_(timestamp, sessionId) {\r\n        this.log_('connection ready');\r\n        this.connected_ = true;\r\n        this.lastConnectionEstablishedTime_ = new Date().getTime();\r\n        this.handleTimestamp_(timestamp);\r\n        this.lastSessionId = sessionId;\r\n        if (this.firstConnection_) {\r\n            this.sendConnectStats_();\r\n        }\r\n        this.restoreState_();\r\n        this.firstConnection_ = false;\r\n        this.onConnectStatus_(true);\r\n    }\r\n    scheduleConnect_(timeout) {\r\n        assert(!this.realtime_, \"Scheduling a connect when we're already connected/ing?\");\r\n        if (this.establishConnectionTimer_) {\r\n            clearTimeout(this.establishConnectionTimer_);\r\n        }\r\n        // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\r\n        // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\r\n        this.establishConnectionTimer_ = setTimeout(() => {\r\n            this.establishConnectionTimer_ = null;\r\n            this.establishConnection_();\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }, Math.floor(timeout));\r\n    }\r\n    initConnection_() {\r\n        if (!this.realtime_ && this.firstConnection_) {\r\n            this.scheduleConnect_(0);\r\n        }\r\n    }\r\n    onVisible_(visible) {\r\n        // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\r\n        if (visible &&\r\n            !this.visible_ &&\r\n            this.reconnectDelay_ === this.maxReconnectDelay_) {\r\n            this.log_('Window became visible.  Reducing delay.');\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n        this.visible_ = visible;\r\n    }\r\n    onOnline_(online) {\r\n        if (online) {\r\n            this.log_('Browser went online.');\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n        else {\r\n            this.log_('Browser went offline.  Killing connection.');\r\n            if (this.realtime_) {\r\n                this.realtime_.close();\r\n            }\r\n        }\r\n    }\r\n    onRealtimeDisconnect_() {\r\n        this.log_('data client disconnected');\r\n        this.connected_ = false;\r\n        this.realtime_ = null;\r\n        // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\r\n        this.cancelSentTransactions_();\r\n        // Clear out the pending requests.\r\n        this.requestCBHash_ = {};\r\n        if (this.shouldReconnect_()) {\r\n            if (!this.visible_) {\r\n                this.log_(\"Window isn't visible.  Delaying reconnect.\");\r\n                this.reconnectDelay_ = this.maxReconnectDelay_;\r\n                this.lastConnectionAttemptTime_ = new Date().getTime();\r\n            }\r\n            else if (this.lastConnectionEstablishedTime_) {\r\n                // If we've been connected long enough, reset reconnect delay to minimum.\r\n                const timeSinceLastConnectSucceeded = new Date().getTime() - this.lastConnectionEstablishedTime_;\r\n                if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {\r\n                    this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n                }\r\n                this.lastConnectionEstablishedTime_ = null;\r\n            }\r\n            const timeSinceLastConnectAttempt = new Date().getTime() - this.lastConnectionAttemptTime_;\r\n            let reconnectDelay = Math.max(0, this.reconnectDelay_ - timeSinceLastConnectAttempt);\r\n            reconnectDelay = Math.random() * reconnectDelay;\r\n            this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\r\n            this.scheduleConnect_(reconnectDelay);\r\n            // Adjust reconnect delay for next time.\r\n            this.reconnectDelay_ = Math.min(this.maxReconnectDelay_, this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER);\r\n        }\r\n        this.onConnectStatus_(false);\r\n    }\r\n    async establishConnection_() {\r\n        if (this.shouldReconnect_()) {\r\n            this.log_('Making a connection attempt');\r\n            this.lastConnectionAttemptTime_ = new Date().getTime();\r\n            this.lastConnectionEstablishedTime_ = null;\r\n            const onDataMessage = this.onDataMessage_.bind(this);\r\n            const onReady = this.onReady_.bind(this);\r\n            const onDisconnect = this.onRealtimeDisconnect_.bind(this);\r\n            const connId = this.id + ':' + PersistentConnection.nextConnectionId_++;\r\n            const lastSessionId = this.lastSessionId;\r\n            let canceled = false;\r\n            let connection = null;\r\n            const closeFn = function () {\r\n                if (connection) {\r\n                    connection.close();\r\n                }\r\n                else {\r\n                    canceled = true;\r\n                    onDisconnect();\r\n                }\r\n            };\r\n            const sendRequestFn = function (msg) {\r\n                assert(connection, \"sendRequest call when we're not connected not allowed.\");\r\n                connection.sendRequest(msg);\r\n            };\r\n            this.realtime_ = {\r\n                close: closeFn,\r\n                sendRequest: sendRequestFn\r\n            };\r\n            const forceRefresh = this.forceTokenRefresh_;\r\n            this.forceTokenRefresh_ = false;\r\n            try {\r\n                // First fetch auth and app check token, and establish connection after\r\n                // fetching the token was successful\r\n                const [authToken, appCheckToken] = await Promise.all([\r\n                    this.authTokenProvider_.getToken(forceRefresh),\r\n                    this.appCheckTokenProvider_.getToken(forceRefresh)\r\n                ]);\r\n                if (!canceled) {\r\n                    log('getToken() completed. Creating connection.');\r\n                    this.authToken_ = authToken && authToken.accessToken;\r\n                    this.appCheckToken_ = appCheckToken && appCheckToken.token;\r\n                    connection = new Connection(connId, this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, onDataMessage, onReady, onDisconnect, \r\n                    /* onKill= */ reason => {\r\n                        warn(reason + ' (' + this.repoInfo_.toString() + ')');\r\n                        this.interrupt(SERVER_KILL_INTERRUPT_REASON);\r\n                    }, lastSessionId);\r\n                }\r\n                else {\r\n                    log('getToken() completed but was canceled');\r\n                }\r\n            }\r\n            catch (error) {\r\n                this.log_('Failed to get token: ' + error);\r\n                if (!canceled) {\r\n                    if (this.repoInfo_.nodeAdmin) {\r\n                        // This may be a critical error for the Admin Node.js SDK, so log a warning.\r\n                        // But getToken() may also just have temporarily failed, so we still want to\r\n                        // continue retrying.\r\n                        warn(error);\r\n                    }\r\n                    closeFn();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    interrupt(reason) {\r\n        log('Interrupting connection for reason: ' + reason);\r\n        this.interruptReasons_[reason] = true;\r\n        if (this.realtime_) {\r\n            this.realtime_.close();\r\n        }\r\n        else {\r\n            if (this.establishConnectionTimer_) {\r\n                clearTimeout(this.establishConnectionTimer_);\r\n                this.establishConnectionTimer_ = null;\r\n            }\r\n            if (this.connected_) {\r\n                this.onRealtimeDisconnect_();\r\n            }\r\n        }\r\n    }\r\n    resume(reason) {\r\n        log('Resuming connection for reason: ' + reason);\r\n        delete this.interruptReasons_[reason];\r\n        if (isEmpty(this.interruptReasons_)) {\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n    }\r\n    handleTimestamp_(timestamp) {\r\n        const delta = timestamp - new Date().getTime();\r\n        this.onServerInfoUpdate_({ serverTimeOffset: delta });\r\n    }\r\n    cancelSentTransactions_() {\r\n        for (let i = 0; i < this.outstandingPuts_.length; i++) {\r\n            const put = this.outstandingPuts_[i];\r\n            if (put && /*hash*/ 'h' in put.request && put.queued) {\r\n                if (put.onComplete) {\r\n                    put.onComplete('disconnect');\r\n                }\r\n                delete this.outstandingPuts_[i];\r\n                this.outstandingPutCount_--;\r\n            }\r\n        }\r\n        // Clean up array occasionally.\r\n        if (this.outstandingPutCount_ === 0) {\r\n            this.outstandingPuts_ = [];\r\n        }\r\n    }\r\n    onListenRevoked_(pathString, query) {\r\n        // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\r\n        let queryId;\r\n        if (!query) {\r\n            queryId = 'default';\r\n        }\r\n        else {\r\n            queryId = query.map(q => ObjectToUniqueKey(q)).join('$');\r\n        }\r\n        const listen = this.removeListen_(pathString, queryId);\r\n        if (listen && listen.onComplete) {\r\n            listen.onComplete('permission_denied');\r\n        }\r\n    }\r\n    removeListen_(pathString, queryId) {\r\n        const normalizedPathString = new Path(pathString).toString(); // normalize path.\r\n        let listen;\r\n        if (this.listens.has(normalizedPathString)) {\r\n            const map = this.listens.get(normalizedPathString);\r\n            listen = map.get(queryId);\r\n            map.delete(queryId);\r\n            if (map.size === 0) {\r\n                this.listens.delete(normalizedPathString);\r\n            }\r\n        }\r\n        else {\r\n            // all listens for this path has already been removed\r\n            listen = undefined;\r\n        }\r\n        return listen;\r\n    }\r\n    onAuthRevoked_(statusCode, explanation) {\r\n        log('Auth token revoked: ' + statusCode + '/' + explanation);\r\n        this.authToken_ = null;\r\n        this.forceTokenRefresh_ = true;\r\n        this.realtime_.close();\r\n        if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\r\n            // We'll wait a couple times before logging the warning / increasing the\r\n            // retry period since oauth tokens will report as \"invalid\" if they're\r\n            // just expired. Plus there may be transient issues that resolve themselves.\r\n            this.invalidAuthTokenCount_++;\r\n            if (this.invalidAuthTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\r\n                // Set a long reconnect delay because recovery is unlikely\r\n                this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\r\n                // Notify the auth token provider that the token is invalid, which will log\r\n                // a warning\r\n                this.authTokenProvider_.notifyForInvalidToken();\r\n            }\r\n        }\r\n    }\r\n    onAppCheckRevoked_(statusCode, explanation) {\r\n        log('App check token revoked: ' + statusCode + '/' + explanation);\r\n        this.appCheckToken_ = null;\r\n        this.forceTokenRefresh_ = true;\r\n        // Note: We don't close the connection as the developer may not have\r\n        // enforcement enabled. The backend closes connections with enforcements.\r\n        if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\r\n            // We'll wait a couple times before logging the warning / increasing the\r\n            // retry period since oauth tokens will report as \"invalid\" if they're\r\n            // just expired. Plus there may be transient issues that resolve themselves.\r\n            this.invalidAppCheckTokenCount_++;\r\n            if (this.invalidAppCheckTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\r\n                this.appCheckTokenProvider_.notifyForInvalidToken();\r\n            }\r\n        }\r\n    }\r\n    onSecurityDebugPacket_(body) {\r\n        if (this.securityDebugCallback_) {\r\n            this.securityDebugCallback_(body);\r\n        }\r\n        else {\r\n            if ('msg' in body) {\r\n                console.log('FIREBASE: ' + body['msg'].replace('\\n', '\\nFIREBASE: '));\r\n            }\r\n        }\r\n    }\r\n    restoreState_() {\r\n        //Re-authenticate ourselves if we have a credential stored.\r\n        this.tryAuth();\r\n        this.tryAppCheck();\r\n        // Puts depend on having received the corresponding data update from the server before they complete, so we must\r\n        // make sure to send listens before puts.\r\n        for (const queries of this.listens.values()) {\r\n            for (const listenSpec of queries.values()) {\r\n                this.sendListen_(listenSpec);\r\n            }\r\n        }\r\n        for (let i = 0; i < this.outstandingPuts_.length; i++) {\r\n            if (this.outstandingPuts_[i]) {\r\n                this.sendPut_(i);\r\n            }\r\n        }\r\n        while (this.onDisconnectRequestQueue_.length) {\r\n            const request = this.onDisconnectRequestQueue_.shift();\r\n            this.sendOnDisconnect_(request.action, request.pathString, request.data, request.onComplete);\r\n        }\r\n        for (let i = 0; i < this.outstandingGets_.length; i++) {\r\n            if (this.outstandingGets_[i]) {\r\n                this.sendGet_(i);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Sends client stats for first connection\r\n     */\r\n    sendConnectStats_() {\r\n        const stats = {};\r\n        let clientName = 'js';\r\n        if (isNodeSdk()) {\r\n            if (this.repoInfo_.nodeAdmin) {\r\n                clientName = 'admin_node';\r\n            }\r\n            else {\r\n                clientName = 'node';\r\n            }\r\n        }\r\n        stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\\./g, '-')] = 1;\r\n        if (isMobileCordova()) {\r\n            stats['framework.cordova'] = 1;\r\n        }\r\n        else if (isReactNative()) {\r\n            stats['framework.reactnative'] = 1;\r\n        }\r\n        this.reportStats(stats);\r\n    }\r\n    shouldReconnect_() {\r\n        const online = OnlineMonitor.getInstance().currentlyOnline();\r\n        return isEmpty(this.interruptReasons_) && online;\r\n    }\r\n}\r\nPersistentConnection.nextPersistentConnectionId_ = 0;\r\n/**\r\n * Counter for number of connections created. Mainly used for tagging in the logs\r\n */\r\nPersistentConnection.nextConnectionId_ = 0;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass NamedNode {\r\n    constructor(name, node) {\r\n        this.name = name;\r\n        this.node = node;\r\n    }\r\n    static Wrap(name, node) {\r\n        return new NamedNode(name, node);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Index {\r\n    /**\r\n     * @returns A standalone comparison function for\r\n     * this index\r\n     */\r\n    getCompare() {\r\n        return this.compare.bind(this);\r\n    }\r\n    /**\r\n     * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\r\n     * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\r\n     *\r\n     *\r\n     * @returns True if the portion of the snapshot being indexed changed between oldNode and newNode\r\n     */\r\n    indexedValueChanged(oldNode, newNode) {\r\n        const oldWrapped = new NamedNode(MIN_NAME, oldNode);\r\n        const newWrapped = new NamedNode(MIN_NAME, newNode);\r\n        return this.compare(oldWrapped, newWrapped) !== 0;\r\n    }\r\n    /**\r\n     * @returns a node wrapper that will sort equal to or less than\r\n     * any other node wrapper, using this index\r\n     */\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet __EMPTY_NODE;\r\nclass KeyIndex extends Index {\r\n    static get __EMPTY_NODE() {\r\n        return __EMPTY_NODE;\r\n    }\r\n    static set __EMPTY_NODE(val) {\r\n        __EMPTY_NODE = val;\r\n    }\r\n    compare(a, b) {\r\n        return nameCompare(a.name, b.name);\r\n    }\r\n    isDefinedOn(node) {\r\n        // We could probably return true here (since every node has a key), but it's never called\r\n        // so just leaving unimplemented for now.\r\n        throw assertionError('KeyIndex.isDefinedOn not expected to be called.');\r\n    }\r\n    indexedValueChanged(oldNode, newNode) {\r\n        return false; // The key for a node never changes.\r\n    }\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n    maxPost() {\r\n        // TODO: This should really be created once and cached in a static property, but\r\n        // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\r\n        return new NamedNode(MAX_NAME, __EMPTY_NODE);\r\n    }\r\n    makePost(indexValue, name) {\r\n        assert(typeof indexValue === 'string', 'KeyIndex indexValue must always be a string.');\r\n        // We just use empty node, but it'll never be compared, since our comparator only looks at name.\r\n        return new NamedNode(indexValue, __EMPTY_NODE);\r\n    }\r\n    /**\r\n     * @returns String representation for inclusion in a query spec\r\n     */\r\n    toString() {\r\n        return '.key';\r\n    }\r\n}\r\nconst KEY_INDEX = new KeyIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An iterator over an LLRBNode.\r\n */\r\nclass SortedMapIterator {\r\n    /**\r\n     * @param node - Node to iterate.\r\n     * @param isReverse_ - Whether or not to iterate in reverse\r\n     */\r\n    constructor(node, startKey, comparator, isReverse_, resultGenerator_ = null) {\r\n        this.isReverse_ = isReverse_;\r\n        this.resultGenerator_ = resultGenerator_;\r\n        this.nodeStack_ = [];\r\n        let cmp = 1;\r\n        while (!node.isEmpty()) {\r\n            node = node;\r\n            cmp = startKey ? comparator(node.key, startKey) : 1;\r\n            // flip the comparison if we're going in reverse\r\n            if (isReverse_) {\r\n                cmp *= -1;\r\n            }\r\n            if (cmp < 0) {\r\n                // This node is less than our start key. ignore it\r\n                if (this.isReverse_) {\r\n                    node = node.left;\r\n                }\r\n                else {\r\n                    node = node.right;\r\n                }\r\n            }\r\n            else if (cmp === 0) {\r\n                // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\r\n                this.nodeStack_.push(node);\r\n                break;\r\n            }\r\n            else {\r\n                // This node is greater than our start key, add it to the stack and move to the next one\r\n                this.nodeStack_.push(node);\r\n                if (this.isReverse_) {\r\n                    node = node.right;\r\n                }\r\n                else {\r\n                    node = node.left;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    getNext() {\r\n        if (this.nodeStack_.length === 0) {\r\n            return null;\r\n        }\r\n        let node = this.nodeStack_.pop();\r\n        let result;\r\n        if (this.resultGenerator_) {\r\n            result = this.resultGenerator_(node.key, node.value);\r\n        }\r\n        else {\r\n            result = { key: node.key, value: node.value };\r\n        }\r\n        if (this.isReverse_) {\r\n            node = node.left;\r\n            while (!node.isEmpty()) {\r\n                this.nodeStack_.push(node);\r\n                node = node.right;\r\n            }\r\n        }\r\n        else {\r\n            node = node.right;\r\n            while (!node.isEmpty()) {\r\n                this.nodeStack_.push(node);\r\n                node = node.left;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    hasNext() {\r\n        return this.nodeStack_.length > 0;\r\n    }\r\n    peek() {\r\n        if (this.nodeStack_.length === 0) {\r\n            return null;\r\n        }\r\n        const node = this.nodeStack_[this.nodeStack_.length - 1];\r\n        if (this.resultGenerator_) {\r\n            return this.resultGenerator_(node.key, node.value);\r\n        }\r\n        else {\r\n            return { key: node.key, value: node.value };\r\n        }\r\n    }\r\n}\r\n/**\r\n * Represents a node in a Left-leaning Red-Black tree.\r\n */\r\nclass LLRBNode {\r\n    /**\r\n     * @param key - Key associated with this node.\r\n     * @param value - Value associated with this node.\r\n     * @param color - Whether this node is red.\r\n     * @param left - Left child.\r\n     * @param right - Right child.\r\n     */\r\n    constructor(key, value, color, left, right) {\r\n        this.key = key;\r\n        this.value = value;\r\n        this.color = color != null ? color : LLRBNode.RED;\r\n        this.left =\r\n            left != null ? left : SortedMap.EMPTY_NODE;\r\n        this.right =\r\n            right != null ? right : SortedMap.EMPTY_NODE;\r\n    }\r\n    /**\r\n     * Returns a copy of the current node, optionally replacing pieces of it.\r\n     *\r\n     * @param key - New key for the node, or null.\r\n     * @param value - New value for the node, or null.\r\n     * @param color - New color for the node, or null.\r\n     * @param left - New left child for the node, or null.\r\n     * @param right - New right child for the node, or null.\r\n     * @returns The node copy.\r\n     */\r\n    copy(key, value, color, left, right) {\r\n        return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);\r\n    }\r\n    /**\r\n     * @returns The total number of nodes in the tree.\r\n     */\r\n    count() {\r\n        return this.left.count() + 1 + this.right.count();\r\n    }\r\n    /**\r\n     * @returns True if the tree is empty.\r\n     */\r\n    isEmpty() {\r\n        return false;\r\n    }\r\n    /**\r\n     * Traverses the tree in key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     *   node.  If it returns true, traversal is aborted.\r\n     * @returns The first truthy value returned by action, or the last falsey\r\n     *   value returned by action\r\n     */\r\n    inorderTraversal(action) {\r\n        return (this.left.inorderTraversal(action) ||\r\n            !!action(this.key, this.value) ||\r\n            this.right.inorderTraversal(action));\r\n    }\r\n    /**\r\n     * Traverses the tree in reverse key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @returns True if traversal was aborted.\r\n     */\r\n    reverseTraversal(action) {\r\n        return (this.right.reverseTraversal(action) ||\r\n            action(this.key, this.value) ||\r\n            this.left.reverseTraversal(action));\r\n    }\r\n    /**\r\n     * @returns The minimum node in the tree.\r\n     */\r\n    min_() {\r\n        if (this.left.isEmpty()) {\r\n            return this;\r\n        }\r\n        else {\r\n            return this.left.min_();\r\n        }\r\n    }\r\n    /**\r\n     * @returns The maximum key in the tree.\r\n     */\r\n    minKey() {\r\n        return this.min_().key;\r\n    }\r\n    /**\r\n     * @returns The maximum key in the tree.\r\n     */\r\n    maxKey() {\r\n        if (this.right.isEmpty()) {\r\n            return this.key;\r\n        }\r\n        else {\r\n            return this.right.maxKey();\r\n        }\r\n    }\r\n    /**\r\n     * @param key - Key to insert.\r\n     * @param value - Value to insert.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with the key/value added.\r\n     */\r\n    insert(key, value, comparator) {\r\n        let n = this;\r\n        const cmp = comparator(key, n.key);\r\n        if (cmp < 0) {\r\n            n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\r\n        }\r\n        else if (cmp === 0) {\r\n            n = n.copy(null, value, null, null, null);\r\n        }\r\n        else {\r\n            n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));\r\n        }\r\n        return n.fixUp_();\r\n    }\r\n    /**\r\n     * @returns New tree, with the minimum key removed.\r\n     */\r\n    removeMin_() {\r\n        if (this.left.isEmpty()) {\r\n            return SortedMap.EMPTY_NODE;\r\n        }\r\n        let n = this;\r\n        if (!n.left.isRed_() && !n.left.left.isRed_()) {\r\n            n = n.moveRedLeft_();\r\n        }\r\n        n = n.copy(null, null, null, n.left.removeMin_(), null);\r\n        return n.fixUp_();\r\n    }\r\n    /**\r\n     * @param key - The key of the item to remove.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with the specified item removed.\r\n     */\r\n    remove(key, comparator) {\r\n        let n, smallest;\r\n        n = this;\r\n        if (comparator(key, n.key) < 0) {\r\n            if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\r\n                n = n.moveRedLeft_();\r\n            }\r\n            n = n.copy(null, null, null, n.left.remove(key, comparator), null);\r\n        }\r\n        else {\r\n            if (n.left.isRed_()) {\r\n                n = n.rotateRight_();\r\n            }\r\n            if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\r\n                n = n.moveRedRight_();\r\n            }\r\n            if (comparator(key, n.key) === 0) {\r\n                if (n.right.isEmpty()) {\r\n                    return SortedMap.EMPTY_NODE;\r\n                }\r\n                else {\r\n                    smallest = n.right.min_();\r\n                    n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin_());\r\n                }\r\n            }\r\n            n = n.copy(null, null, null, null, n.right.remove(key, comparator));\r\n        }\r\n        return n.fixUp_();\r\n    }\r\n    /**\r\n     * @returns Whether this is a RED node.\r\n     */\r\n    isRed_() {\r\n        return this.color;\r\n    }\r\n    /**\r\n     * @returns New tree after performing any needed rotations.\r\n     */\r\n    fixUp_() {\r\n        let n = this;\r\n        if (n.right.isRed_() && !n.left.isRed_()) {\r\n            n = n.rotateLeft_();\r\n        }\r\n        if (n.left.isRed_() && n.left.left.isRed_()) {\r\n            n = n.rotateRight_();\r\n        }\r\n        if (n.left.isRed_() && n.right.isRed_()) {\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    }\r\n    /**\r\n     * @returns New tree, after moveRedLeft.\r\n     */\r\n    moveRedLeft_() {\r\n        let n = this.colorFlip_();\r\n        if (n.right.left.isRed_()) {\r\n            n = n.copy(null, null, null, null, n.right.rotateRight_());\r\n            n = n.rotateLeft_();\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    }\r\n    /**\r\n     * @returns New tree, after moveRedRight.\r\n     */\r\n    moveRedRight_() {\r\n        let n = this.colorFlip_();\r\n        if (n.left.left.isRed_()) {\r\n            n = n.rotateRight_();\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    }\r\n    /**\r\n     * @returns New tree, after rotateLeft.\r\n     */\r\n    rotateLeft_() {\r\n        const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\r\n        return this.right.copy(null, null, this.color, nl, null);\r\n    }\r\n    /**\r\n     * @returns New tree, after rotateRight.\r\n     */\r\n    rotateRight_() {\r\n        const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\r\n        return this.left.copy(null, null, this.color, null, nr);\r\n    }\r\n    /**\r\n     * @returns Newt ree, after colorFlip.\r\n     */\r\n    colorFlip_() {\r\n        const left = this.left.copy(null, null, !this.left.color, null, null);\r\n        const right = this.right.copy(null, null, !this.right.color, null, null);\r\n        return this.copy(null, null, !this.color, left, right);\r\n    }\r\n    /**\r\n     * For testing.\r\n     *\r\n     * @returns True if all is well.\r\n     */\r\n    checkMaxDepth_() {\r\n        const blackDepth = this.check_();\r\n        return Math.pow(2.0, blackDepth) <= this.count() + 1;\r\n    }\r\n    check_() {\r\n        if (this.isRed_() && this.left.isRed_()) {\r\n            throw new Error('Red node has red child(' + this.key + ',' + this.value + ')');\r\n        }\r\n        if (this.right.isRed_()) {\r\n            throw new Error('Right child of (' + this.key + ',' + this.value + ') is red');\r\n        }\r\n        const blackDepth = this.left.check_();\r\n        if (blackDepth !== this.right.check_()) {\r\n            throw new Error('Black depths differ');\r\n        }\r\n        else {\r\n            return blackDepth + (this.isRed_() ? 0 : 1);\r\n        }\r\n    }\r\n}\r\nLLRBNode.RED = true;\r\nLLRBNode.BLACK = false;\r\n/**\r\n * Represents an empty node (a leaf node in the Red-Black Tree).\r\n */\r\nclass LLRBEmptyNode {\r\n    /**\r\n     * Returns a copy of the current node.\r\n     *\r\n     * @returns The node copy.\r\n     */\r\n    copy(key, value, color, left, right) {\r\n        return this;\r\n    }\r\n    /**\r\n     * Returns a copy of the tree, with the specified key/value added.\r\n     *\r\n     * @param key - Key to be added.\r\n     * @param value - Value to be added.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with item added.\r\n     */\r\n    insert(key, value, comparator) {\r\n        return new LLRBNode(key, value, null);\r\n    }\r\n    /**\r\n     * Returns a copy of the tree, with the specified key removed.\r\n     *\r\n     * @param key - The key to remove.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with item removed.\r\n     */\r\n    remove(key, comparator) {\r\n        return this;\r\n    }\r\n    /**\r\n     * @returns The total number of nodes in the tree.\r\n     */\r\n    count() {\r\n        return 0;\r\n    }\r\n    /**\r\n     * @returns True if the tree is empty.\r\n     */\r\n    isEmpty() {\r\n        return true;\r\n    }\r\n    /**\r\n     * Traverses the tree in key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @returns True if traversal was aborted.\r\n     */\r\n    inorderTraversal(action) {\r\n        return false;\r\n    }\r\n    /**\r\n     * Traverses the tree in reverse key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @returns True if traversal was aborted.\r\n     */\r\n    reverseTraversal(action) {\r\n        return false;\r\n    }\r\n    minKey() {\r\n        return null;\r\n    }\r\n    maxKey() {\r\n        return null;\r\n    }\r\n    check_() {\r\n        return 0;\r\n    }\r\n    /**\r\n     * @returns Whether this node is red.\r\n     */\r\n    isRed_() {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\r\n * tree.\r\n */\r\nclass SortedMap {\r\n    /**\r\n     * @param comparator_ - Key comparator.\r\n     * @param root_ - Optional root node for the map.\r\n     */\r\n    constructor(comparator_, root_ = SortedMap.EMPTY_NODE) {\r\n        this.comparator_ = comparator_;\r\n        this.root_ = root_;\r\n    }\r\n    /**\r\n     * Returns a copy of the map, with the specified key/value added or replaced.\r\n     * (TODO: We should perhaps rename this method to 'put')\r\n     *\r\n     * @param key - Key to be added.\r\n     * @param value - Value to be added.\r\n     * @returns New map, with item added.\r\n     */\r\n    insert(key, value) {\r\n        return new SortedMap(this.comparator_, this.root_\r\n            .insert(key, value, this.comparator_)\r\n            .copy(null, null, LLRBNode.BLACK, null, null));\r\n    }\r\n    /**\r\n     * Returns a copy of the map, with the specified key removed.\r\n     *\r\n     * @param key - The key to remove.\r\n     * @returns New map, with item removed.\r\n     */\r\n    remove(key) {\r\n        return new SortedMap(this.comparator_, this.root_\r\n            .remove(key, this.comparator_)\r\n            .copy(null, null, LLRBNode.BLACK, null, null));\r\n    }\r\n    /**\r\n     * Returns the value of the node with the given key, or null.\r\n     *\r\n     * @param key - The key to look up.\r\n     * @returns The value of the node with the given key, or null if the\r\n     * key doesn't exist.\r\n     */\r\n    get(key) {\r\n        let cmp;\r\n        let node = this.root_;\r\n        while (!node.isEmpty()) {\r\n            cmp = this.comparator_(key, node.key);\r\n            if (cmp === 0) {\r\n                return node.value;\r\n            }\r\n            else if (cmp < 0) {\r\n                node = node.left;\r\n            }\r\n            else if (cmp > 0) {\r\n                node = node.right;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Returns the key of the item *before* the specified key, or null if key is the first item.\r\n     * @param key - The key to find the predecessor of\r\n     * @returns The predecessor key.\r\n     */\r\n    getPredecessorKey(key) {\r\n        let cmp, node = this.root_, rightParent = null;\r\n        while (!node.isEmpty()) {\r\n            cmp = this.comparator_(key, node.key);\r\n            if (cmp === 0) {\r\n                if (!node.left.isEmpty()) {\r\n                    node = node.left;\r\n                    while (!node.right.isEmpty()) {\r\n                        node = node.right;\r\n                    }\r\n                    return node.key;\r\n                }\r\n                else if (rightParent) {\r\n                    return rightParent.key;\r\n                }\r\n                else {\r\n                    return null; // first item.\r\n                }\r\n            }\r\n            else if (cmp < 0) {\r\n                node = node.left;\r\n            }\r\n            else if (cmp > 0) {\r\n                rightParent = node;\r\n                node = node.right;\r\n            }\r\n        }\r\n        throw new Error('Attempted to find predecessor key for a nonexistent key.  What gives?');\r\n    }\r\n    /**\r\n     * @returns True if the map is empty.\r\n     */\r\n    isEmpty() {\r\n        return this.root_.isEmpty();\r\n    }\r\n    /**\r\n     * @returns The total number of nodes in the map.\r\n     */\r\n    count() {\r\n        return this.root_.count();\r\n    }\r\n    /**\r\n     * @returns The minimum key in the map.\r\n     */\r\n    minKey() {\r\n        return this.root_.minKey();\r\n    }\r\n    /**\r\n     * @returns The maximum key in the map.\r\n     */\r\n    maxKey() {\r\n        return this.root_.maxKey();\r\n    }\r\n    /**\r\n     * Traverses the map in key order and calls the specified action function\r\n     * for each key/value pair.\r\n     *\r\n     * @param action - Callback function to be called\r\n     * for each key/value pair.  If action returns true, traversal is aborted.\r\n     * @returns The first truthy value returned by action, or the last falsey\r\n     *   value returned by action\r\n     */\r\n    inorderTraversal(action) {\r\n        return this.root_.inorderTraversal(action);\r\n    }\r\n    /**\r\n     * Traverses the map in reverse key order and calls the specified action function\r\n     * for each key/value pair.\r\n     *\r\n     * @param action - Callback function to be called\r\n     * for each key/value pair.  If action returns true, traversal is aborted.\r\n     * @returns True if the traversal was aborted.\r\n     */\r\n    reverseTraversal(action) {\r\n        return this.root_.reverseTraversal(action);\r\n    }\r\n    /**\r\n     * Returns an iterator over the SortedMap.\r\n     * @returns The iterator.\r\n     */\r\n    getIterator(resultGenerator) {\r\n        return new SortedMapIterator(this.root_, null, this.comparator_, false, resultGenerator);\r\n    }\r\n    getIteratorFrom(key, resultGenerator) {\r\n        return new SortedMapIterator(this.root_, key, this.comparator_, false, resultGenerator);\r\n    }\r\n    getReverseIteratorFrom(key, resultGenerator) {\r\n        return new SortedMapIterator(this.root_, key, this.comparator_, true, resultGenerator);\r\n    }\r\n    getReverseIterator(resultGenerator) {\r\n        return new SortedMapIterator(this.root_, null, this.comparator_, true, resultGenerator);\r\n    }\r\n}\r\n/**\r\n * Always use the same empty node, to reduce memory.\r\n */\r\nSortedMap.EMPTY_NODE = new LLRBEmptyNode();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction NAME_ONLY_COMPARATOR(left, right) {\r\n    return nameCompare(left.name, right.name);\r\n}\r\nfunction NAME_COMPARATOR(left, right) {\r\n    return nameCompare(left, right);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet MAX_NODE$2;\r\nfunction setMaxNode$1(val) {\r\n    MAX_NODE$2 = val;\r\n}\r\nconst priorityHashText = function (priority) {\r\n    if (typeof priority === 'number') {\r\n        return 'number:' + doubleToIEEE754String(priority);\r\n    }\r\n    else {\r\n        return 'string:' + priority;\r\n    }\r\n};\r\n/**\r\n * Validates that a priority snapshot Node is valid.\r\n */\r\nconst validatePriorityNode = function (priorityNode) {\r\n    if (priorityNode.isLeafNode()) {\r\n        const val = priorityNode.val();\r\n        assert(typeof val === 'string' ||\r\n            typeof val === 'number' ||\r\n            (typeof val === 'object' && contains(val, '.sv')), 'Priority must be a string or number.');\r\n    }\r\n    else {\r\n        assert(priorityNode === MAX_NODE$2 || priorityNode.isEmpty(), 'priority of unexpected type.');\r\n    }\r\n    // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\r\n    assert(priorityNode === MAX_NODE$2 || priorityNode.getPriority().isEmpty(), \"Priority nodes can't have a priority of their own.\");\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet __childrenNodeConstructor;\r\n/**\r\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\r\n * implements Node and stores the value of the node (a string,\r\n * number, or boolean) accessible via getValue().\r\n */\r\nclass LeafNode {\r\n    /**\r\n     * @param value_ - The value to store in this leaf node. The object type is\r\n     * possible in the event of a deferred value\r\n     * @param priorityNode_ - The priority of this node.\r\n     */\r\n    constructor(value_, priorityNode_ = LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\r\n        this.value_ = value_;\r\n        this.priorityNode_ = priorityNode_;\r\n        this.lazyHash_ = null;\r\n        assert(this.value_ !== undefined && this.value_ !== null, \"LeafNode shouldn't be created with null/undefined value.\");\r\n        validatePriorityNode(this.priorityNode_);\r\n    }\r\n    static set __childrenNodeConstructor(val) {\r\n        __childrenNodeConstructor = val;\r\n    }\r\n    static get __childrenNodeConstructor() {\r\n        return __childrenNodeConstructor;\r\n    }\r\n    /** @inheritDoc */\r\n    isLeafNode() {\r\n        return true;\r\n    }\r\n    /** @inheritDoc */\r\n    getPriority() {\r\n        return this.priorityNode_;\r\n    }\r\n    /** @inheritDoc */\r\n    updatePriority(newPriorityNode) {\r\n        return new LeafNode(this.value_, newPriorityNode);\r\n    }\r\n    /** @inheritDoc */\r\n    getImmediateChild(childName) {\r\n        // Hack to treat priority as a regular child\r\n        if (childName === '.priority') {\r\n            return this.priorityNode_;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    getChild(path) {\r\n        if (pathIsEmpty(path)) {\r\n            return this;\r\n        }\r\n        else if (pathGetFront(path) === '.priority') {\r\n            return this.priorityNode_;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\r\n        }\r\n    }\r\n    hasChild() {\r\n        return false;\r\n    }\r\n    /** @inheritDoc */\r\n    getPredecessorChildName(childName, childNode) {\r\n        return null;\r\n    }\r\n    /** @inheritDoc */\r\n    updateImmediateChild(childName, newChildNode) {\r\n        if (childName === '.priority') {\r\n            return this.updatePriority(newChildNode);\r\n        }\r\n        else if (newChildNode.isEmpty() && childName !== '.priority') {\r\n            return this;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(childName, newChildNode).updatePriority(this.priorityNode_);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    updateChild(path, newChildNode) {\r\n        const front = pathGetFront(path);\r\n        if (front === null) {\r\n            return newChildNode;\r\n        }\r\n        else if (newChildNode.isEmpty() && front !== '.priority') {\r\n            return this;\r\n        }\r\n        else {\r\n            assert(front !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');\r\n            return this.updateImmediateChild(front, LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(pathPopFront(path), newChildNode));\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    isEmpty() {\r\n        return false;\r\n    }\r\n    /** @inheritDoc */\r\n    numChildren() {\r\n        return 0;\r\n    }\r\n    /** @inheritDoc */\r\n    forEachChild(index, action) {\r\n        return false;\r\n    }\r\n    val(exportFormat) {\r\n        if (exportFormat && !this.getPriority().isEmpty()) {\r\n            return {\r\n                '.value': this.getValue(),\r\n                '.priority': this.getPriority().val()\r\n            };\r\n        }\r\n        else {\r\n            return this.getValue();\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    hash() {\r\n        if (this.lazyHash_ === null) {\r\n            let toHash = '';\r\n            if (!this.priorityNode_.isEmpty()) {\r\n                toHash +=\r\n                    'priority:' +\r\n                        priorityHashText(this.priorityNode_.val()) +\r\n                        ':';\r\n            }\r\n            const type = typeof this.value_;\r\n            toHash += type + ':';\r\n            if (type === 'number') {\r\n                toHash += doubleToIEEE754String(this.value_);\r\n            }\r\n            else {\r\n                toHash += this.value_;\r\n            }\r\n            this.lazyHash_ = sha1(toHash);\r\n        }\r\n        return this.lazyHash_;\r\n    }\r\n    /**\r\n     * Returns the value of the leaf node.\r\n     * @returns The value of the node.\r\n     */\r\n    getValue() {\r\n        return this.value_;\r\n    }\r\n    compareTo(other) {\r\n        if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\r\n            return 1;\r\n        }\r\n        else if (other instanceof LeafNode.__childrenNodeConstructor) {\r\n            return -1;\r\n        }\r\n        else {\r\n            assert(other.isLeafNode(), 'Unknown node type');\r\n            return this.compareToLeafNode_(other);\r\n        }\r\n    }\r\n    /**\r\n     * Comparison specifically for two leaf nodes\r\n     */\r\n    compareToLeafNode_(otherLeaf) {\r\n        const otherLeafType = typeof otherLeaf.value_;\r\n        const thisLeafType = typeof this.value_;\r\n        const otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\r\n        const thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\r\n        assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\r\n        assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\r\n        if (otherIndex === thisIndex) {\r\n            // Same type, compare values\r\n            if (thisLeafType === 'object') {\r\n                // Deferred value nodes are all equal, but we should also never get to this point...\r\n                return 0;\r\n            }\r\n            else {\r\n                // Note that this works because true > false, all others are number or string comparisons\r\n                if (this.value_ < otherLeaf.value_) {\r\n                    return -1;\r\n                }\r\n                else if (this.value_ === otherLeaf.value_) {\r\n                    return 0;\r\n                }\r\n                else {\r\n                    return 1;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            return thisIndex - otherIndex;\r\n        }\r\n    }\r\n    withIndex() {\r\n        return this;\r\n    }\r\n    isIndexed() {\r\n        return true;\r\n    }\r\n    equals(other) {\r\n        if (other === this) {\r\n            return true;\r\n        }\r\n        else if (other.isLeafNode()) {\r\n            const otherLeaf = other;\r\n            return (this.value_ === otherLeaf.value_ &&\r\n                this.priorityNode_.equals(otherLeaf.priorityNode_));\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n/**\r\n * The sort order for comparing leaf nodes of different types. If two leaf nodes have\r\n * the same type, the comparison falls back to their value\r\n */\r\nLeafNode.VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet nodeFromJSON$1;\r\nlet MAX_NODE$1;\r\nfunction setNodeFromJSON(val) {\r\n    nodeFromJSON$1 = val;\r\n}\r\nfunction setMaxNode(val) {\r\n    MAX_NODE$1 = val;\r\n}\r\nclass PriorityIndex extends Index {\r\n    compare(a, b) {\r\n        const aPriority = a.node.getPriority();\r\n        const bPriority = b.node.getPriority();\r\n        const indexCmp = aPriority.compareTo(bPriority);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    }\r\n    isDefinedOn(node) {\r\n        return !node.getPriority().isEmpty();\r\n    }\r\n    indexedValueChanged(oldNode, newNode) {\r\n        return !oldNode.getPriority().equals(newNode.getPriority());\r\n    }\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n    maxPost() {\r\n        return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE$1));\r\n    }\r\n    makePost(indexValue, name) {\r\n        const priorityNode = nodeFromJSON$1(indexValue);\r\n        return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\r\n    }\r\n    /**\r\n     * @returns String representation for inclusion in a query spec\r\n     */\r\n    toString() {\r\n        return '.priority';\r\n    }\r\n}\r\nconst PRIORITY_INDEX = new PriorityIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst LOG_2 = Math.log(2);\r\nclass Base12Num {\r\n    constructor(length) {\r\n        const logBase2 = (num) => \r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        parseInt((Math.log(num) / LOG_2), 10);\r\n        const bitMask = (bits) => parseInt(Array(bits + 1).join('1'), 2);\r\n        this.count = logBase2(length + 1);\r\n        this.current_ = this.count - 1;\r\n        const mask = bitMask(this.count);\r\n        this.bits_ = (length + 1) & mask;\r\n    }\r\n    nextBitIsOne() {\r\n        //noinspection JSBitwiseOperatorUsage\r\n        const result = !(this.bits_ & (0x1 << this.current_));\r\n        this.current_--;\r\n        return result;\r\n    }\r\n}\r\n/**\r\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\r\n * function\r\n *\r\n * Uses the algorithm described in the paper linked here:\r\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\r\n *\r\n * @param childList - Unsorted list of children\r\n * @param cmp - The comparison method to be used\r\n * @param keyFn - An optional function to extract K from a node wrapper, if K's\r\n * type is not NamedNode\r\n * @param mapSortFn - An optional override for comparator used by the generated sorted map\r\n */\r\nconst buildChildSet = function (childList, cmp, keyFn, mapSortFn) {\r\n    childList.sort(cmp);\r\n    const buildBalancedTree = function (low, high) {\r\n        const length = high - low;\r\n        let namedNode;\r\n        let key;\r\n        if (length === 0) {\r\n            return null;\r\n        }\r\n        else if (length === 1) {\r\n            namedNode = childList[low];\r\n            key = keyFn ? keyFn(namedNode) : namedNode;\r\n            return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, null, null);\r\n        }\r\n        else {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            const middle = parseInt((length / 2), 10) + low;\r\n            const left = buildBalancedTree(low, middle);\r\n            const right = buildBalancedTree(middle + 1, high);\r\n            namedNode = childList[middle];\r\n            key = keyFn ? keyFn(namedNode) : namedNode;\r\n            return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, left, right);\r\n        }\r\n    };\r\n    const buildFrom12Array = function (base12) {\r\n        let node = null;\r\n        let root = null;\r\n        let index = childList.length;\r\n        const buildPennant = function (chunkSize, color) {\r\n            const low = index - chunkSize;\r\n            const high = index;\r\n            index -= chunkSize;\r\n            const childTree = buildBalancedTree(low + 1, high);\r\n            const namedNode = childList[low];\r\n            const key = keyFn ? keyFn(namedNode) : namedNode;\r\n            attachPennant(new LLRBNode(key, namedNode.node, color, null, childTree));\r\n        };\r\n        const attachPennant = function (pennant) {\r\n            if (node) {\r\n                node.left = pennant;\r\n                node = pennant;\r\n            }\r\n            else {\r\n                root = pennant;\r\n                node = pennant;\r\n            }\r\n        };\r\n        for (let i = 0; i < base12.count; ++i) {\r\n            const isOne = base12.nextBitIsOne();\r\n            // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\r\n            const chunkSize = Math.pow(2, base12.count - (i + 1));\r\n            if (isOne) {\r\n                buildPennant(chunkSize, LLRBNode.BLACK);\r\n            }\r\n            else {\r\n                // current == 2\r\n                buildPennant(chunkSize, LLRBNode.BLACK);\r\n                buildPennant(chunkSize, LLRBNode.RED);\r\n            }\r\n        }\r\n        return root;\r\n    };\r\n    const base12 = new Base12Num(childList.length);\r\n    const root = buildFrom12Array(base12);\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    return new SortedMap(mapSortFn || cmp, root);\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet _defaultIndexMap;\r\nconst fallbackObject = {};\r\nclass IndexMap {\r\n    constructor(indexes_, indexSet_) {\r\n        this.indexes_ = indexes_;\r\n        this.indexSet_ = indexSet_;\r\n    }\r\n    /**\r\n     * The default IndexMap for nodes without a priority\r\n     */\r\n    static get Default() {\r\n        assert(fallbackObject && PRIORITY_INDEX, 'ChildrenNode.ts has not been loaded');\r\n        _defaultIndexMap =\r\n            _defaultIndexMap ||\r\n                new IndexMap({ '.priority': fallbackObject }, { '.priority': PRIORITY_INDEX });\r\n        return _defaultIndexMap;\r\n    }\r\n    get(indexKey) {\r\n        const sortedMap = safeGet(this.indexes_, indexKey);\r\n        if (!sortedMap) {\r\n            throw new Error('No index defined for ' + indexKey);\r\n        }\r\n        if (sortedMap instanceof SortedMap) {\r\n            return sortedMap;\r\n        }\r\n        else {\r\n            // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\r\n            // regular child map\r\n            return null;\r\n        }\r\n    }\r\n    hasIndex(indexDefinition) {\r\n        return contains(this.indexSet_, indexDefinition.toString());\r\n    }\r\n    addIndex(indexDefinition, existingChildren) {\r\n        assert(indexDefinition !== KEY_INDEX, \"KeyIndex always exists and isn't meant to be added to the IndexMap.\");\r\n        const childList = [];\r\n        let sawIndexedValue = false;\r\n        const iter = existingChildren.getIterator(NamedNode.Wrap);\r\n        let next = iter.getNext();\r\n        while (next) {\r\n            sawIndexedValue =\r\n                sawIndexedValue || indexDefinition.isDefinedOn(next.node);\r\n            childList.push(next);\r\n            next = iter.getNext();\r\n        }\r\n        let newIndex;\r\n        if (sawIndexedValue) {\r\n            newIndex = buildChildSet(childList, indexDefinition.getCompare());\r\n        }\r\n        else {\r\n            newIndex = fallbackObject;\r\n        }\r\n        const indexName = indexDefinition.toString();\r\n        const newIndexSet = Object.assign({}, this.indexSet_);\r\n        newIndexSet[indexName] = indexDefinition;\r\n        const newIndexes = Object.assign({}, this.indexes_);\r\n        newIndexes[indexName] = newIndex;\r\n        return new IndexMap(newIndexes, newIndexSet);\r\n    }\r\n    /**\r\n     * Ensure that this node is properly tracked in any indexes that we're maintaining\r\n     */\r\n    addToIndexes(namedNode, existingChildren) {\r\n        const newIndexes = map(this.indexes_, (indexedChildren, indexName) => {\r\n            const index = safeGet(this.indexSet_, indexName);\r\n            assert(index, 'Missing index implementation for ' + indexName);\r\n            if (indexedChildren === fallbackObject) {\r\n                // Check to see if we need to index everything\r\n                if (index.isDefinedOn(namedNode.node)) {\r\n                    // We need to build this index\r\n                    const childList = [];\r\n                    const iter = existingChildren.getIterator(NamedNode.Wrap);\r\n                    let next = iter.getNext();\r\n                    while (next) {\r\n                        if (next.name !== namedNode.name) {\r\n                            childList.push(next);\r\n                        }\r\n                        next = iter.getNext();\r\n                    }\r\n                    childList.push(namedNode);\r\n                    return buildChildSet(childList, index.getCompare());\r\n                }\r\n                else {\r\n                    // No change, this remains a fallback\r\n                    return fallbackObject;\r\n                }\r\n            }\r\n            else {\r\n                const existingSnap = existingChildren.get(namedNode.name);\r\n                let newChildren = indexedChildren;\r\n                if (existingSnap) {\r\n                    newChildren = newChildren.remove(new NamedNode(namedNode.name, existingSnap));\r\n                }\r\n                return newChildren.insert(namedNode, namedNode.node);\r\n            }\r\n        });\r\n        return new IndexMap(newIndexes, this.indexSet_);\r\n    }\r\n    /**\r\n     * Create a new IndexMap instance with the given value removed\r\n     */\r\n    removeFromIndexes(namedNode, existingChildren) {\r\n        const newIndexes = map(this.indexes_, (indexedChildren) => {\r\n            if (indexedChildren === fallbackObject) {\r\n                // This is the fallback. Just return it, nothing to do in this case\r\n                return indexedChildren;\r\n            }\r\n            else {\r\n                const existingSnap = existingChildren.get(namedNode.name);\r\n                if (existingSnap) {\r\n                    return indexedChildren.remove(new NamedNode(namedNode.name, existingSnap));\r\n                }\r\n                else {\r\n                    // No record of this child\r\n                    return indexedChildren;\r\n                }\r\n            }\r\n        });\r\n        return new IndexMap(newIndexes, this.indexSet_);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\r\nlet EMPTY_NODE;\r\n/**\r\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\r\n * (i.e. nodes with children).  It implements Node and stores the\r\n * list of children in the children property, sorted by child name.\r\n */\r\nclass ChildrenNode {\r\n    /**\r\n     * @param children_ - List of children of this node..\r\n     * @param priorityNode_ - The priority of this node (as a snapshot node).\r\n     */\r\n    constructor(children_, priorityNode_, indexMap_) {\r\n        this.children_ = children_;\r\n        this.priorityNode_ = priorityNode_;\r\n        this.indexMap_ = indexMap_;\r\n        this.lazyHash_ = null;\r\n        /**\r\n         * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\r\n         * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\r\n         * class instead of an empty ChildrenNode.\r\n         */\r\n        if (this.priorityNode_) {\r\n            validatePriorityNode(this.priorityNode_);\r\n        }\r\n        if (this.children_.isEmpty()) {\r\n            assert(!this.priorityNode_ || this.priorityNode_.isEmpty(), 'An empty node cannot have a priority');\r\n        }\r\n    }\r\n    static get EMPTY_NODE() {\r\n        return (EMPTY_NODE ||\r\n            (EMPTY_NODE = new ChildrenNode(new SortedMap(NAME_COMPARATOR), null, IndexMap.Default)));\r\n    }\r\n    /** @inheritDoc */\r\n    isLeafNode() {\r\n        return false;\r\n    }\r\n    /** @inheritDoc */\r\n    getPriority() {\r\n        return this.priorityNode_ || EMPTY_NODE;\r\n    }\r\n    /** @inheritDoc */\r\n    updatePriority(newPriorityNode) {\r\n        if (this.children_.isEmpty()) {\r\n            // Don't allow priorities on empty nodes\r\n            return this;\r\n        }\r\n        else {\r\n            return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    getImmediateChild(childName) {\r\n        // Hack to treat priority as a regular child\r\n        if (childName === '.priority') {\r\n            return this.getPriority();\r\n        }\r\n        else {\r\n            const child = this.children_.get(childName);\r\n            return child === null ? EMPTY_NODE : child;\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    getChild(path) {\r\n        const front = pathGetFront(path);\r\n        if (front === null) {\r\n            return this;\r\n        }\r\n        return this.getImmediateChild(front).getChild(pathPopFront(path));\r\n    }\r\n    /** @inheritDoc */\r\n    hasChild(childName) {\r\n        return this.children_.get(childName) !== null;\r\n    }\r\n    /** @inheritDoc */\r\n    updateImmediateChild(childName, newChildNode) {\r\n        assert(newChildNode, 'We should always be passing snapshot nodes');\r\n        if (childName === '.priority') {\r\n            return this.updatePriority(newChildNode);\r\n        }\r\n        else {\r\n            const namedNode = new NamedNode(childName, newChildNode);\r\n            let newChildren, newIndexMap;\r\n            if (newChildNode.isEmpty()) {\r\n                newChildren = this.children_.remove(childName);\r\n                newIndexMap = this.indexMap_.removeFromIndexes(namedNode, this.children_);\r\n            }\r\n            else {\r\n                newChildren = this.children_.insert(childName, newChildNode);\r\n                newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\r\n            }\r\n            const newPriority = newChildren.isEmpty()\r\n                ? EMPTY_NODE\r\n                : this.priorityNode_;\r\n            return new ChildrenNode(newChildren, newPriority, newIndexMap);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    updateChild(path, newChildNode) {\r\n        const front = pathGetFront(path);\r\n        if (front === null) {\r\n            return newChildNode;\r\n        }\r\n        else {\r\n            assert(pathGetFront(path) !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');\r\n            const newImmediateChild = this.getImmediateChild(front).updateChild(pathPopFront(path), newChildNode);\r\n            return this.updateImmediateChild(front, newImmediateChild);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    isEmpty() {\r\n        return this.children_.isEmpty();\r\n    }\r\n    /** @inheritDoc */\r\n    numChildren() {\r\n        return this.children_.count();\r\n    }\r\n    /** @inheritDoc */\r\n    val(exportFormat) {\r\n        if (this.isEmpty()) {\r\n            return null;\r\n        }\r\n        const obj = {};\r\n        let numKeys = 0, maxKey = 0, allIntegerKeys = true;\r\n        this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n            obj[key] = childNode.val(exportFormat);\r\n            numKeys++;\r\n            if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\r\n                maxKey = Math.max(maxKey, Number(key));\r\n            }\r\n            else {\r\n                allIntegerKeys = false;\r\n            }\r\n        });\r\n        if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\r\n            // convert to array.\r\n            const array = [];\r\n            // eslint-disable-next-line guard-for-in\r\n            for (const key in obj) {\r\n                array[key] = obj[key];\r\n            }\r\n            return array;\r\n        }\r\n        else {\r\n            if (exportFormat && !this.getPriority().isEmpty()) {\r\n                obj['.priority'] = this.getPriority().val();\r\n            }\r\n            return obj;\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    hash() {\r\n        if (this.lazyHash_ === null) {\r\n            let toHash = '';\r\n            if (!this.getPriority().isEmpty()) {\r\n                toHash +=\r\n                    'priority:' +\r\n                        priorityHashText(this.getPriority().val()) +\r\n                        ':';\r\n            }\r\n            this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n                const childHash = childNode.hash();\r\n                if (childHash !== '') {\r\n                    toHash += ':' + key + ':' + childHash;\r\n                }\r\n            });\r\n            this.lazyHash_ = toHash === '' ? '' : sha1(toHash);\r\n        }\r\n        return this.lazyHash_;\r\n    }\r\n    /** @inheritDoc */\r\n    getPredecessorChildName(childName, childNode, index) {\r\n        const idx = this.resolveIndex_(index);\r\n        if (idx) {\r\n            const predecessor = idx.getPredecessorKey(new NamedNode(childName, childNode));\r\n            return predecessor ? predecessor.name : null;\r\n        }\r\n        else {\r\n            return this.children_.getPredecessorKey(childName);\r\n        }\r\n    }\r\n    getFirstChildName(indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            const minKey = idx.minKey();\r\n            return minKey && minKey.name;\r\n        }\r\n        else {\r\n            return this.children_.minKey();\r\n        }\r\n    }\r\n    getFirstChild(indexDefinition) {\r\n        const minKey = this.getFirstChildName(indexDefinition);\r\n        if (minKey) {\r\n            return new NamedNode(minKey, this.children_.get(minKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    /**\r\n     * Given an index, return the key name of the largest value we have, according to that index\r\n     */\r\n    getLastChildName(indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            const maxKey = idx.maxKey();\r\n            return maxKey && maxKey.name;\r\n        }\r\n        else {\r\n            return this.children_.maxKey();\r\n        }\r\n    }\r\n    getLastChild(indexDefinition) {\r\n        const maxKey = this.getLastChildName(indexDefinition);\r\n        if (maxKey) {\r\n            return new NamedNode(maxKey, this.children_.get(maxKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    forEachChild(index, action) {\r\n        const idx = this.resolveIndex_(index);\r\n        if (idx) {\r\n            return idx.inorderTraversal(wrappedNode => {\r\n                return action(wrappedNode.name, wrappedNode.node);\r\n            });\r\n        }\r\n        else {\r\n            return this.children_.inorderTraversal(action);\r\n        }\r\n    }\r\n    getIterator(indexDefinition) {\r\n        return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\r\n    }\r\n    getIteratorFrom(startPost, indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            return idx.getIteratorFrom(startPost, key => key);\r\n        }\r\n        else {\r\n            const iterator = this.children_.getIteratorFrom(startPost.name, NamedNode.Wrap);\r\n            let next = iterator.peek();\r\n            while (next != null && indexDefinition.compare(next, startPost) < 0) {\r\n                iterator.getNext();\r\n                next = iterator.peek();\r\n            }\r\n            return iterator;\r\n        }\r\n    }\r\n    getReverseIterator(indexDefinition) {\r\n        return this.getReverseIteratorFrom(indexDefinition.maxPost(), indexDefinition);\r\n    }\r\n    getReverseIteratorFrom(endPost, indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            return idx.getReverseIteratorFrom(endPost, key => {\r\n                return key;\r\n            });\r\n        }\r\n        else {\r\n            const iterator = this.children_.getReverseIteratorFrom(endPost.name, NamedNode.Wrap);\r\n            let next = iterator.peek();\r\n            while (next != null && indexDefinition.compare(next, endPost) > 0) {\r\n                iterator.getNext();\r\n                next = iterator.peek();\r\n            }\r\n            return iterator;\r\n        }\r\n    }\r\n    compareTo(other) {\r\n        if (this.isEmpty()) {\r\n            if (other.isEmpty()) {\r\n                return 0;\r\n            }\r\n            else {\r\n                return -1;\r\n            }\r\n        }\r\n        else if (other.isLeafNode() || other.isEmpty()) {\r\n            return 1;\r\n        }\r\n        else if (other === MAX_NODE) {\r\n            return -1;\r\n        }\r\n        else {\r\n            // Must be another node with children.\r\n            return 0;\r\n        }\r\n    }\r\n    withIndex(indexDefinition) {\r\n        if (indexDefinition === KEY_INDEX ||\r\n            this.indexMap_.hasIndex(indexDefinition)) {\r\n            return this;\r\n        }\r\n        else {\r\n            const newIndexMap = this.indexMap_.addIndex(indexDefinition, this.children_);\r\n            return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\r\n        }\r\n    }\r\n    isIndexed(index) {\r\n        return index === KEY_INDEX || this.indexMap_.hasIndex(index);\r\n    }\r\n    equals(other) {\r\n        if (other === this) {\r\n            return true;\r\n        }\r\n        else if (other.isLeafNode()) {\r\n            return false;\r\n        }\r\n        else {\r\n            const otherChildrenNode = other;\r\n            if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\r\n                return false;\r\n            }\r\n            else if (this.children_.count() === otherChildrenNode.children_.count()) {\r\n                const thisIter = this.getIterator(PRIORITY_INDEX);\r\n                const otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\r\n                let thisCurrent = thisIter.getNext();\r\n                let otherCurrent = otherIter.getNext();\r\n                while (thisCurrent && otherCurrent) {\r\n                    if (thisCurrent.name !== otherCurrent.name ||\r\n                        !thisCurrent.node.equals(otherCurrent.node)) {\r\n                        return false;\r\n                    }\r\n                    thisCurrent = thisIter.getNext();\r\n                    otherCurrent = otherIter.getNext();\r\n                }\r\n                return thisCurrent === null && otherCurrent === null;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\r\n     * instead.\r\n     *\r\n     */\r\n    resolveIndex_(indexDefinition) {\r\n        if (indexDefinition === KEY_INDEX) {\r\n            return null;\r\n        }\r\n        else {\r\n            return this.indexMap_.get(indexDefinition.toString());\r\n        }\r\n    }\r\n}\r\nChildrenNode.INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\r\nclass MaxNode extends ChildrenNode {\r\n    constructor() {\r\n        super(new SortedMap(NAME_COMPARATOR), ChildrenNode.EMPTY_NODE, IndexMap.Default);\r\n    }\r\n    compareTo(other) {\r\n        if (other === this) {\r\n            return 0;\r\n        }\r\n        else {\r\n            return 1;\r\n        }\r\n    }\r\n    equals(other) {\r\n        // Not that we every compare it, but MAX_NODE is only ever equal to itself\r\n        return other === this;\r\n    }\r\n    getPriority() {\r\n        return this;\r\n    }\r\n    getImmediateChild(childName) {\r\n        return ChildrenNode.EMPTY_NODE;\r\n    }\r\n    isEmpty() {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * Marker that will sort higher than any other snapshot.\r\n */\r\nconst MAX_NODE = new MaxNode();\r\nObject.defineProperties(NamedNode, {\r\n    MIN: {\r\n        value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\r\n    },\r\n    MAX: {\r\n        value: new NamedNode(MAX_NAME, MAX_NODE)\r\n    }\r\n});\r\n/**\r\n * Reference Extensions\r\n */\r\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\r\nLeafNode.__childrenNodeConstructor = ChildrenNode;\r\nsetMaxNode$1(MAX_NODE);\r\nsetMaxNode(MAX_NODE);\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst USE_HINZE = true;\r\n/**\r\n * Constructs a snapshot node representing the passed JSON and returns it.\r\n * @param json - JSON to create a node for.\r\n * @param priority - Optional priority to use.  This will be ignored if the\r\n * passed JSON contains a .priority property.\r\n */\r\nfunction nodeFromJSON(json, priority = null) {\r\n    if (json === null) {\r\n        return ChildrenNode.EMPTY_NODE;\r\n    }\r\n    if (typeof json === 'object' && '.priority' in json) {\r\n        priority = json['.priority'];\r\n    }\r\n    assert(priority === null ||\r\n        typeof priority === 'string' ||\r\n        typeof priority === 'number' ||\r\n        (typeof priority === 'object' && '.sv' in priority), 'Invalid priority type found: ' + typeof priority);\r\n    if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\r\n        json = json['.value'];\r\n    }\r\n    // Valid leaf nodes include non-objects or server-value wrapper objects\r\n    if (typeof json !== 'object' || '.sv' in json) {\r\n        const jsonLeaf = json;\r\n        return new LeafNode(jsonLeaf, nodeFromJSON(priority));\r\n    }\r\n    if (!(json instanceof Array) && USE_HINZE) {\r\n        const children = [];\r\n        let childrenHavePriority = false;\r\n        const hinzeJsonObj = json;\r\n        each(hinzeJsonObj, (key, child) => {\r\n            if (key.substring(0, 1) !== '.') {\r\n                // Ignore metadata nodes\r\n                const childNode = nodeFromJSON(child);\r\n                if (!childNode.isEmpty()) {\r\n                    childrenHavePriority =\r\n                        childrenHavePriority || !childNode.getPriority().isEmpty();\r\n                    children.push(new NamedNode(key, childNode));\r\n                }\r\n            }\r\n        });\r\n        if (children.length === 0) {\r\n            return ChildrenNode.EMPTY_NODE;\r\n        }\r\n        const childSet = buildChildSet(children, NAME_ONLY_COMPARATOR, namedNode => namedNode.name, NAME_COMPARATOR);\r\n        if (childrenHavePriority) {\r\n            const sortedChildSet = buildChildSet(children, PRIORITY_INDEX.getCompare());\r\n            return new ChildrenNode(childSet, nodeFromJSON(priority), new IndexMap({ '.priority': sortedChildSet }, { '.priority': PRIORITY_INDEX }));\r\n        }\r\n        else {\r\n            return new ChildrenNode(childSet, nodeFromJSON(priority), IndexMap.Default);\r\n        }\r\n    }\r\n    else {\r\n        let node = ChildrenNode.EMPTY_NODE;\r\n        each(json, (key, childData) => {\r\n            if (contains(json, key)) {\r\n                if (key.substring(0, 1) !== '.') {\r\n                    // ignore metadata nodes.\r\n                    const childNode = nodeFromJSON(childData);\r\n                    if (childNode.isLeafNode() || !childNode.isEmpty()) {\r\n                        node = node.updateImmediateChild(key, childNode);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        return node.updatePriority(nodeFromJSON(priority));\r\n    }\r\n}\r\nsetNodeFromJSON(nodeFromJSON);\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass PathIndex extends Index {\r\n    constructor(indexPath_) {\r\n        super();\r\n        this.indexPath_ = indexPath_;\r\n        assert(!pathIsEmpty(indexPath_) && pathGetFront(indexPath_) !== '.priority', \"Can't create PathIndex with empty path or .priority key\");\r\n    }\r\n    extractChild(snap) {\r\n        return snap.getChild(this.indexPath_);\r\n    }\r\n    isDefinedOn(node) {\r\n        return !node.getChild(this.indexPath_).isEmpty();\r\n    }\r\n    compare(a, b) {\r\n        const aChild = this.extractChild(a.node);\r\n        const bChild = this.extractChild(b.node);\r\n        const indexCmp = aChild.compareTo(bChild);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    }\r\n    makePost(indexValue, name) {\r\n        const valueNode = nodeFromJSON(indexValue);\r\n        const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, valueNode);\r\n        return new NamedNode(name, node);\r\n    }\r\n    maxPost() {\r\n        const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);\r\n        return new NamedNode(MAX_NAME, node);\r\n    }\r\n    toString() {\r\n        return pathSlice(this.indexPath_, 0).join('/');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ValueIndex extends Index {\r\n    compare(a, b) {\r\n        const indexCmp = a.node.compareTo(b.node);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    }\r\n    isDefinedOn(node) {\r\n        return true;\r\n    }\r\n    indexedValueChanged(oldNode, newNode) {\r\n        return !oldNode.equals(newNode);\r\n    }\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n    maxPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MAX;\r\n    }\r\n    makePost(indexValue, name) {\r\n        const valueNode = nodeFromJSON(indexValue);\r\n        return new NamedNode(name, valueNode);\r\n    }\r\n    /**\r\n     * @returns String representation for inclusion in a query spec\r\n     */\r\n    toString() {\r\n        return '.value';\r\n    }\r\n}\r\nconst VALUE_INDEX = new ValueIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Modeled after base64 web-safe chars, but ordered by ASCII.\r\nconst PUSH_CHARS = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\r\nconst MIN_PUSH_CHAR = '-';\r\nconst MAX_PUSH_CHAR = 'z';\r\nconst MAX_KEY_LEN = 786;\r\n/**\r\n * Fancy ID generator that creates 20-character string identifiers with the\r\n * following properties:\r\n *\r\n * 1. They're based on timestamp so that they sort *after* any existing ids.\r\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\r\n *    collide with other clients' IDs.\r\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\r\n *    that will sort properly).\r\n * 4. They're monotonically increasing. Even if you generate more than one in\r\n *    the same timestamp, the latter ones will sort after the former ones. We do\r\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\r\n *    in the case of a timestamp collision).\r\n */\r\nconst nextPushId = (function () {\r\n    // Timestamp of last push, used to prevent local collisions if you push twice\r\n    // in one ms.\r\n    let lastPushTime = 0;\r\n    // We generate 72-bits of randomness which get turned into 12 characters and\r\n    // appended to the timestamp to prevent collisions with other clients. We\r\n    // store the last characters we generated because in the event of a collision,\r\n    // we'll use those same characters except \"incremented\" by one.\r\n    const lastRandChars = [];\r\n    return function (now) {\r\n        const duplicateTime = now === lastPushTime;\r\n        lastPushTime = now;\r\n        let i;\r\n        const timeStampChars = new Array(8);\r\n        for (i = 7; i >= 0; i--) {\r\n            timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\r\n            // NOTE: Can't use << here because javascript will convert to int and lose\r\n            // the upper bits.\r\n            now = Math.floor(now / 64);\r\n        }\r\n        assert(now === 0, 'Cannot push at time == 0');\r\n        let id = timeStampChars.join('');\r\n        if (!duplicateTime) {\r\n            for (i = 0; i < 12; i++) {\r\n                lastRandChars[i] = Math.floor(Math.random() * 64);\r\n            }\r\n        }\r\n        else {\r\n            // If the timestamp hasn't changed since last push, use the same random\r\n            // number, except incremented by 1.\r\n            for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\r\n                lastRandChars[i] = 0;\r\n            }\r\n            lastRandChars[i]++;\r\n        }\r\n        for (i = 0; i < 12; i++) {\r\n            id += PUSH_CHARS.charAt(lastRandChars[i]);\r\n        }\r\n        assert(id.length === 20, 'nextPushId: Length should be 20.');\r\n        return id;\r\n    };\r\n})();\r\nconst successor = function (key) {\r\n    if (key === '' + INTEGER_32_MAX) {\r\n        // See https://firebase.google.com/docs/database/web/lists-of-data#data-order\r\n        return MIN_PUSH_CHAR;\r\n    }\r\n    const keyAsInt = tryParseInt(key);\r\n    if (keyAsInt != null) {\r\n        return '' + (keyAsInt + 1);\r\n    }\r\n    const next = new Array(key.length);\r\n    for (let i = 0; i < next.length; i++) {\r\n        next[i] = key.charAt(i);\r\n    }\r\n    if (next.length < MAX_KEY_LEN) {\r\n        next.push(MIN_PUSH_CHAR);\r\n        return next.join('');\r\n    }\r\n    let i = next.length - 1;\r\n    while (i >= 0 && next[i] === MAX_PUSH_CHAR) {\r\n        i--;\r\n    }\r\n    // `successor` was called on the largest possible key, so return the\r\n    // MAX_NAME, which sorts larger than all keys.\r\n    if (i === -1) {\r\n        return MAX_NAME;\r\n    }\r\n    const source = next[i];\r\n    const sourcePlusOne = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(source) + 1);\r\n    next[i] = sourcePlusOne;\r\n    return next.slice(0, i + 1).join('');\r\n};\r\n// `key` is assumed to be non-empty.\r\nconst predecessor = function (key) {\r\n    if (key === '' + INTEGER_32_MIN) {\r\n        return MIN_NAME;\r\n    }\r\n    const keyAsInt = tryParseInt(key);\r\n    if (keyAsInt != null) {\r\n        return '' + (keyAsInt - 1);\r\n    }\r\n    const next = new Array(key.length);\r\n    for (let i = 0; i < next.length; i++) {\r\n        next[i] = key.charAt(i);\r\n    }\r\n    // If `key` ends in `MIN_PUSH_CHAR`, the largest key lexicographically\r\n    // smaller than `key`, is `key[0:key.length - 1]`. The next key smaller\r\n    // than that, `predecessor(predecessor(key))`, is\r\n    //\r\n    // `key[0:key.length - 2] + (key[key.length - 1] - 1) + \\\r\n    //   { MAX_PUSH_CHAR repeated MAX_KEY_LEN - (key.length - 1) times }\r\n    //\r\n    // analogous to increment/decrement for base-10 integers.\r\n    //\r\n    // This works because lexigographic comparison works character-by-character,\r\n    // using length as a tie-breaker if one key is a prefix of the other.\r\n    if (next[next.length - 1] === MIN_PUSH_CHAR) {\r\n        if (next.length === 1) {\r\n            // See https://firebase.google.com/docs/database/web/lists-of-data#orderbykey\r\n            return '' + INTEGER_32_MAX;\r\n        }\r\n        delete next[next.length - 1];\r\n        return next.join('');\r\n    }\r\n    // Replace the last character with it's immediate predecessor, and\r\n    // fill the suffix of the key with MAX_PUSH_CHAR. This is the\r\n    // lexicographically largest possible key smaller than `key`.\r\n    next[next.length - 1] = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(next[next.length - 1]) - 1);\r\n    return next.join('') + MAX_PUSH_CHAR.repeat(MAX_KEY_LEN - next.length);\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction changeValue(snapshotNode) {\r\n    return { type: \"value\" /* VALUE */, snapshotNode };\r\n}\r\nfunction changeChildAdded(childName, snapshotNode) {\r\n    return { type: \"child_added\" /* CHILD_ADDED */, snapshotNode, childName };\r\n}\r\nfunction changeChildRemoved(childName, snapshotNode) {\r\n    return { type: \"child_removed\" /* CHILD_REMOVED */, snapshotNode, childName };\r\n}\r\nfunction changeChildChanged(childName, snapshotNode, oldSnap) {\r\n    return {\r\n        type: \"child_changed\" /* CHILD_CHANGED */,\r\n        snapshotNode,\r\n        childName,\r\n        oldSnap\r\n    };\r\n}\r\nfunction changeChildMoved(childName, snapshotNode) {\r\n    return { type: \"child_moved\" /* CHILD_MOVED */, snapshotNode, childName };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\r\n */\r\nclass IndexedFilter {\r\n    constructor(index_) {\r\n        this.index_ = index_;\r\n    }\r\n    updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        assert(snap.isIndexed(this.index_), 'A node must be indexed if only a child is updated');\r\n        const oldChild = snap.getImmediateChild(key);\r\n        // Check if anything actually changed.\r\n        if (oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))) {\r\n            // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\r\n            // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\r\n            // to avoid treating these cases as \"nothing changed.\"\r\n            if (oldChild.isEmpty() === newChild.isEmpty()) {\r\n                // Nothing changed.\r\n                // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\r\n                //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\r\n                return snap;\r\n            }\r\n        }\r\n        if (optChangeAccumulator != null) {\r\n            if (newChild.isEmpty()) {\r\n                if (snap.hasChild(key)) {\r\n                    optChangeAccumulator.trackChildChange(changeChildRemoved(key, oldChild));\r\n                }\r\n                else {\r\n                    assert(snap.isLeafNode(), 'A child remove without an old child only makes sense on a leaf node');\r\n                }\r\n            }\r\n            else if (oldChild.isEmpty()) {\r\n                optChangeAccumulator.trackChildChange(changeChildAdded(key, newChild));\r\n            }\r\n            else {\r\n                optChangeAccumulator.trackChildChange(changeChildChanged(key, newChild, oldChild));\r\n            }\r\n        }\r\n        if (snap.isLeafNode() && newChild.isEmpty()) {\r\n            return snap;\r\n        }\r\n        else {\r\n            // Make sure the node is indexed\r\n            return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\r\n        }\r\n    }\r\n    updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\r\n        if (optChangeAccumulator != null) {\r\n            if (!oldSnap.isLeafNode()) {\r\n                oldSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n                    if (!newSnap.hasChild(key)) {\r\n                        optChangeAccumulator.trackChildChange(changeChildRemoved(key, childNode));\r\n                    }\r\n                });\r\n            }\r\n            if (!newSnap.isLeafNode()) {\r\n                newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n                    if (oldSnap.hasChild(key)) {\r\n                        const oldChild = oldSnap.getImmediateChild(key);\r\n                        if (!oldChild.equals(childNode)) {\r\n                            optChangeAccumulator.trackChildChange(changeChildChanged(key, childNode, oldChild));\r\n                        }\r\n                    }\r\n                    else {\r\n                        optChangeAccumulator.trackChildChange(changeChildAdded(key, childNode));\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        return newSnap.withIndex(this.index_);\r\n    }\r\n    updatePriority(oldSnap, newPriority) {\r\n        if (oldSnap.isEmpty()) {\r\n            return ChildrenNode.EMPTY_NODE;\r\n        }\r\n        else {\r\n            return oldSnap.updatePriority(newPriority);\r\n        }\r\n    }\r\n    filtersNodes() {\r\n        return false;\r\n    }\r\n    getIndexedFilter() {\r\n        return this;\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\r\n */\r\nclass RangedFilter {\r\n    constructor(params) {\r\n        this.indexedFilter_ = new IndexedFilter(params.getIndex());\r\n        this.index_ = params.getIndex();\r\n        this.startPost_ = RangedFilter.getStartPost_(params);\r\n        this.endPost_ = RangedFilter.getEndPost_(params);\r\n    }\r\n    getStartPost() {\r\n        return this.startPost_;\r\n    }\r\n    getEndPost() {\r\n        return this.endPost_;\r\n    }\r\n    matches(node) {\r\n        return (this.index_.compare(this.getStartPost(), node) <= 0 &&\r\n            this.index_.compare(node, this.getEndPost()) <= 0);\r\n    }\r\n    updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        if (!this.matches(new NamedNode(key, newChild))) {\r\n            newChild = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        return this.indexedFilter_.updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\r\n    }\r\n    updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\r\n        if (newSnap.isLeafNode()) {\r\n            // Make sure we have a children node with the correct index, not a leaf node;\r\n            newSnap = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        let filtered = newSnap.withIndex(this.index_);\r\n        // Don't support priorities on queries\r\n        filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\r\n        const self = this;\r\n        newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n            if (!self.matches(new NamedNode(key, childNode))) {\r\n                filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\r\n            }\r\n        });\r\n        return this.indexedFilter_.updateFullNode(oldSnap, filtered, optChangeAccumulator);\r\n    }\r\n    updatePriority(oldSnap, newPriority) {\r\n        // Don't support priorities on queries\r\n        return oldSnap;\r\n    }\r\n    filtersNodes() {\r\n        return true;\r\n    }\r\n    getIndexedFilter() {\r\n        return this.indexedFilter_;\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n    static getStartPost_(params) {\r\n        if (params.hasStart()) {\r\n            const startName = params.getIndexStartName();\r\n            return params.getIndex().makePost(params.getIndexStartValue(), startName);\r\n        }\r\n        else {\r\n            return params.getIndex().minPost();\r\n        }\r\n    }\r\n    static getEndPost_(params) {\r\n        if (params.hasEnd()) {\r\n            const endName = params.getIndexEndName();\r\n            return params.getIndex().makePost(params.getIndexEndValue(), endName);\r\n        }\r\n        else {\r\n            return params.getIndex().maxPost();\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\r\n */\r\nclass LimitedFilter {\r\n    constructor(params) {\r\n        this.rangedFilter_ = new RangedFilter(params);\r\n        this.index_ = params.getIndex();\r\n        this.limit_ = params.getLimit();\r\n        this.reverse_ = !params.isViewFromLeft();\r\n    }\r\n    updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\r\n            newChild = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        if (snap.getImmediateChild(key).equals(newChild)) {\r\n            // No change\r\n            return snap;\r\n        }\r\n        else if (snap.numChildren() < this.limit_) {\r\n            return this.rangedFilter_\r\n                .getIndexedFilter()\r\n                .updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\r\n        }\r\n        else {\r\n            return this.fullLimitUpdateChild_(snap, key, newChild, source, optChangeAccumulator);\r\n        }\r\n    }\r\n    updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\r\n        let filtered;\r\n        if (newSnap.isLeafNode() || newSnap.isEmpty()) {\r\n            // Make sure we have a children node with the correct index, not a leaf node;\r\n            filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\r\n        }\r\n        else {\r\n            if (this.limit_ * 2 < newSnap.numChildren() &&\r\n                newSnap.isIndexed(this.index_)) {\r\n                // Easier to build up a snapshot, since what we're given has more than twice the elements we want\r\n                filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\r\n                // anchor to the startPost, endPost, or last element as appropriate\r\n                let iterator;\r\n                if (this.reverse_) {\r\n                    iterator = newSnap.getReverseIteratorFrom(this.rangedFilter_.getEndPost(), this.index_);\r\n                }\r\n                else {\r\n                    iterator = newSnap.getIteratorFrom(this.rangedFilter_.getStartPost(), this.index_);\r\n                }\r\n                let count = 0;\r\n                while (iterator.hasNext() && count < this.limit_) {\r\n                    const next = iterator.getNext();\r\n                    let inRange;\r\n                    if (this.reverse_) {\r\n                        inRange =\r\n                            this.index_.compare(this.rangedFilter_.getStartPost(), next) <= 0;\r\n                    }\r\n                    else {\r\n                        inRange =\r\n                            this.index_.compare(next, this.rangedFilter_.getEndPost()) <= 0;\r\n                    }\r\n                    if (inRange) {\r\n                        filtered = filtered.updateImmediateChild(next.name, next.node);\r\n                        count++;\r\n                    }\r\n                    else {\r\n                        // if we have reached the end post, we cannot keep adding elemments\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\r\n                filtered = newSnap.withIndex(this.index_);\r\n                // Don't support priorities on queries\r\n                filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\r\n                let startPost;\r\n                let endPost;\r\n                let cmp;\r\n                let iterator;\r\n                if (this.reverse_) {\r\n                    iterator = filtered.getReverseIterator(this.index_);\r\n                    startPost = this.rangedFilter_.getEndPost();\r\n                    endPost = this.rangedFilter_.getStartPost();\r\n                    const indexCompare = this.index_.getCompare();\r\n                    cmp = (a, b) => indexCompare(b, a);\r\n                }\r\n                else {\r\n                    iterator = filtered.getIterator(this.index_);\r\n                    startPost = this.rangedFilter_.getStartPost();\r\n                    endPost = this.rangedFilter_.getEndPost();\r\n                    cmp = this.index_.getCompare();\r\n                }\r\n                let count = 0;\r\n                let foundStartPost = false;\r\n                while (iterator.hasNext()) {\r\n                    const next = iterator.getNext();\r\n                    if (!foundStartPost && cmp(startPost, next) <= 0) {\r\n                        // start adding\r\n                        foundStartPost = true;\r\n                    }\r\n                    const inRange = foundStartPost && count < this.limit_ && cmp(next, endPost) <= 0;\r\n                    if (inRange) {\r\n                        count++;\r\n                    }\r\n                    else {\r\n                        filtered = filtered.updateImmediateChild(next.name, ChildrenNode.EMPTY_NODE);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return this.rangedFilter_\r\n            .getIndexedFilter()\r\n            .updateFullNode(oldSnap, filtered, optChangeAccumulator);\r\n    }\r\n    updatePriority(oldSnap, newPriority) {\r\n        // Don't support priorities on queries\r\n        return oldSnap;\r\n    }\r\n    filtersNodes() {\r\n        return true;\r\n    }\r\n    getIndexedFilter() {\r\n        return this.rangedFilter_.getIndexedFilter();\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n    fullLimitUpdateChild_(snap, childKey, childSnap, source, changeAccumulator) {\r\n        // TODO: rename all cache stuff etc to general snap terminology\r\n        let cmp;\r\n        if (this.reverse_) {\r\n            const indexCmp = this.index_.getCompare();\r\n            cmp = (a, b) => indexCmp(b, a);\r\n        }\r\n        else {\r\n            cmp = this.index_.getCompare();\r\n        }\r\n        const oldEventCache = snap;\r\n        assert(oldEventCache.numChildren() === this.limit_, '');\r\n        const newChildNamedNode = new NamedNode(childKey, childSnap);\r\n        const windowBoundary = this.reverse_\r\n            ? oldEventCache.getFirstChild(this.index_)\r\n            : oldEventCache.getLastChild(this.index_);\r\n        const inRange = this.rangedFilter_.matches(newChildNamedNode);\r\n        if (oldEventCache.hasChild(childKey)) {\r\n            const oldChildSnap = oldEventCache.getImmediateChild(childKey);\r\n            let nextChild = source.getChildAfterChild(this.index_, windowBoundary, this.reverse_);\r\n            while (nextChild != null &&\r\n                (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))) {\r\n                // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\r\n                // been applied to the limited filter yet. Ignore this next child which will be updated later in\r\n                // the limited filter...\r\n                nextChild = source.getChildAfterChild(this.index_, nextChild, this.reverse_);\r\n            }\r\n            const compareNext = nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\r\n            const remainsInWindow = inRange && !childSnap.isEmpty() && compareNext >= 0;\r\n            if (remainsInWindow) {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(changeChildChanged(childKey, childSnap, oldChildSnap));\r\n                }\r\n                return oldEventCache.updateImmediateChild(childKey, childSnap);\r\n            }\r\n            else {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(changeChildRemoved(childKey, oldChildSnap));\r\n                }\r\n                const newEventCache = oldEventCache.updateImmediateChild(childKey, ChildrenNode.EMPTY_NODE);\r\n                const nextChildInRange = nextChild != null && this.rangedFilter_.matches(nextChild);\r\n                if (nextChildInRange) {\r\n                    if (changeAccumulator != null) {\r\n                        changeAccumulator.trackChildChange(changeChildAdded(nextChild.name, nextChild.node));\r\n                    }\r\n                    return newEventCache.updateImmediateChild(nextChild.name, nextChild.node);\r\n                }\r\n                else {\r\n                    return newEventCache;\r\n                }\r\n            }\r\n        }\r\n        else if (childSnap.isEmpty()) {\r\n            // we're deleting a node, but it was not in the window, so ignore it\r\n            return snap;\r\n        }\r\n        else if (inRange) {\r\n            if (cmp(windowBoundary, newChildNamedNode) >= 0) {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(changeChildRemoved(windowBoundary.name, windowBoundary.node));\r\n                    changeAccumulator.trackChildChange(changeChildAdded(childKey, childSnap));\r\n                }\r\n                return oldEventCache\r\n                    .updateImmediateChild(childKey, childSnap)\r\n                    .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\r\n            }\r\n            else {\r\n                return snap;\r\n            }\r\n        }\r\n        else {\r\n            return snap;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\r\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\r\n * user-facing API level, so it is not done here.\r\n *\r\n * @internal\r\n */\r\nclass QueryParams {\r\n    constructor() {\r\n        this.limitSet_ = false;\r\n        this.startSet_ = false;\r\n        this.startNameSet_ = false;\r\n        this.startAfterSet_ = false;\r\n        this.endSet_ = false;\r\n        this.endNameSet_ = false;\r\n        this.endBeforeSet_ = false;\r\n        this.limit_ = 0;\r\n        this.viewFrom_ = '';\r\n        this.indexStartValue_ = null;\r\n        this.indexStartName_ = '';\r\n        this.indexEndValue_ = null;\r\n        this.indexEndName_ = '';\r\n        this.index_ = PRIORITY_INDEX;\r\n    }\r\n    hasStart() {\r\n        return this.startSet_;\r\n    }\r\n    hasStartAfter() {\r\n        return this.startAfterSet_;\r\n    }\r\n    hasEndBefore() {\r\n        return this.endBeforeSet_;\r\n    }\r\n    /**\r\n     * @returns True if it would return from left.\r\n     */\r\n    isViewFromLeft() {\r\n        if (this.viewFrom_ === '') {\r\n            // limit(), rather than limitToFirst or limitToLast was called.\r\n            // This means that only one of startSet_ and endSet_ is true. Use them\r\n            // to calculate which side of the view to anchor to. If neither is set,\r\n            // anchor to the end.\r\n            return this.startSet_;\r\n        }\r\n        else {\r\n            return this.viewFrom_ === \"l\" /* VIEW_FROM_LEFT */;\r\n        }\r\n    }\r\n    /**\r\n     * Only valid to call if hasStart() returns true\r\n     */\r\n    getIndexStartValue() {\r\n        assert(this.startSet_, 'Only valid if start has been set');\r\n        return this.indexStartValue_;\r\n    }\r\n    /**\r\n     * Only valid to call if hasStart() returns true.\r\n     * Returns the starting key name for the range defined by these query parameters\r\n     */\r\n    getIndexStartName() {\r\n        assert(this.startSet_, 'Only valid if start has been set');\r\n        if (this.startNameSet_) {\r\n            return this.indexStartName_;\r\n        }\r\n        else {\r\n            return MIN_NAME;\r\n        }\r\n    }\r\n    hasEnd() {\r\n        return this.endSet_;\r\n    }\r\n    /**\r\n     * Only valid to call if hasEnd() returns true.\r\n     */\r\n    getIndexEndValue() {\r\n        assert(this.endSet_, 'Only valid if end has been set');\r\n        return this.indexEndValue_;\r\n    }\r\n    /**\r\n     * Only valid to call if hasEnd() returns true.\r\n     * Returns the end key name for the range defined by these query parameters\r\n     */\r\n    getIndexEndName() {\r\n        assert(this.endSet_, 'Only valid if end has been set');\r\n        if (this.endNameSet_) {\r\n            return this.indexEndName_;\r\n        }\r\n        else {\r\n            return MAX_NAME;\r\n        }\r\n    }\r\n    hasLimit() {\r\n        return this.limitSet_;\r\n    }\r\n    /**\r\n     * @returns True if a limit has been set and it has been explicitly anchored\r\n     */\r\n    hasAnchoredLimit() {\r\n        return this.limitSet_ && this.viewFrom_ !== '';\r\n    }\r\n    /**\r\n     * Only valid to call if hasLimit() returns true\r\n     */\r\n    getLimit() {\r\n        assert(this.limitSet_, 'Only valid if limit has been set');\r\n        return this.limit_;\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n    loadsAllData() {\r\n        return !(this.startSet_ || this.endSet_ || this.limitSet_);\r\n    }\r\n    isDefault() {\r\n        return this.loadsAllData() && this.index_ === PRIORITY_INDEX;\r\n    }\r\n    copy() {\r\n        const copy = new QueryParams();\r\n        copy.limitSet_ = this.limitSet_;\r\n        copy.limit_ = this.limit_;\r\n        copy.startSet_ = this.startSet_;\r\n        copy.indexStartValue_ = this.indexStartValue_;\r\n        copy.startNameSet_ = this.startNameSet_;\r\n        copy.indexStartName_ = this.indexStartName_;\r\n        copy.endSet_ = this.endSet_;\r\n        copy.indexEndValue_ = this.indexEndValue_;\r\n        copy.endNameSet_ = this.endNameSet_;\r\n        copy.indexEndName_ = this.indexEndName_;\r\n        copy.index_ = this.index_;\r\n        copy.viewFrom_ = this.viewFrom_;\r\n        return copy;\r\n    }\r\n}\r\nfunction queryParamsGetNodeFilter(queryParams) {\r\n    if (queryParams.loadsAllData()) {\r\n        return new IndexedFilter(queryParams.getIndex());\r\n    }\r\n    else if (queryParams.hasLimit()) {\r\n        return new LimitedFilter(queryParams);\r\n    }\r\n    else {\r\n        return new RangedFilter(queryParams);\r\n    }\r\n}\r\nfunction queryParamsLimitToFirst(queryParams, newLimit) {\r\n    const newParams = queryParams.copy();\r\n    newParams.limitSet_ = true;\r\n    newParams.limit_ = newLimit;\r\n    newParams.viewFrom_ = \"l\" /* VIEW_FROM_LEFT */;\r\n    return newParams;\r\n}\r\nfunction queryParamsLimitToLast(queryParams, newLimit) {\r\n    const newParams = queryParams.copy();\r\n    newParams.limitSet_ = true;\r\n    newParams.limit_ = newLimit;\r\n    newParams.viewFrom_ = \"r\" /* VIEW_FROM_RIGHT */;\r\n    return newParams;\r\n}\r\nfunction queryParamsStartAt(queryParams, indexValue, key) {\r\n    const newParams = queryParams.copy();\r\n    newParams.startSet_ = true;\r\n    if (indexValue === undefined) {\r\n        indexValue = null;\r\n    }\r\n    newParams.indexStartValue_ = indexValue;\r\n    if (key != null) {\r\n        newParams.startNameSet_ = true;\r\n        newParams.indexStartName_ = key;\r\n    }\r\n    else {\r\n        newParams.startNameSet_ = false;\r\n        newParams.indexStartName_ = '';\r\n    }\r\n    return newParams;\r\n}\r\nfunction queryParamsStartAfter(queryParams, indexValue, key) {\r\n    let params;\r\n    if (queryParams.index_ === KEY_INDEX) {\r\n        if (typeof indexValue === 'string') {\r\n            indexValue = successor(indexValue);\r\n        }\r\n        params = queryParamsStartAt(queryParams, indexValue, key);\r\n    }\r\n    else {\r\n        let childKey;\r\n        if (key == null) {\r\n            childKey = MAX_NAME;\r\n        }\r\n        else {\r\n            childKey = successor(key);\r\n        }\r\n        params = queryParamsStartAt(queryParams, indexValue, childKey);\r\n    }\r\n    params.startAfterSet_ = true;\r\n    return params;\r\n}\r\nfunction queryParamsEndAt(queryParams, indexValue, key) {\r\n    const newParams = queryParams.copy();\r\n    newParams.endSet_ = true;\r\n    if (indexValue === undefined) {\r\n        indexValue = null;\r\n    }\r\n    newParams.indexEndValue_ = indexValue;\r\n    if (key !== undefined) {\r\n        newParams.endNameSet_ = true;\r\n        newParams.indexEndName_ = key;\r\n    }\r\n    else {\r\n        newParams.endNameSet_ = false;\r\n        newParams.indexEndName_ = '';\r\n    }\r\n    return newParams;\r\n}\r\nfunction queryParamsEndBefore(queryParams, indexValue, key) {\r\n    let childKey;\r\n    let params;\r\n    if (queryParams.index_ === KEY_INDEX) {\r\n        if (typeof indexValue === 'string') {\r\n            indexValue = predecessor(indexValue);\r\n        }\r\n        params = queryParamsEndAt(queryParams, indexValue, key);\r\n    }\r\n    else {\r\n        if (key == null) {\r\n            childKey = MIN_NAME;\r\n        }\r\n        else {\r\n            childKey = predecessor(key);\r\n        }\r\n        params = queryParamsEndAt(queryParams, indexValue, childKey);\r\n    }\r\n    params.endBeforeSet_ = true;\r\n    return params;\r\n}\r\nfunction queryParamsOrderBy(queryParams, index) {\r\n    const newParams = queryParams.copy();\r\n    newParams.index_ = index;\r\n    return newParams;\r\n}\r\n/**\r\n * Returns a set of REST query string parameters representing this query.\r\n *\r\n * @returns query string parameters\r\n */\r\nfunction queryParamsToRestQueryStringParameters(queryParams) {\r\n    const qs = {};\r\n    if (queryParams.isDefault()) {\r\n        return qs;\r\n    }\r\n    let orderBy;\r\n    if (queryParams.index_ === PRIORITY_INDEX) {\r\n        orderBy = \"$priority\" /* PRIORITY_INDEX */;\r\n    }\r\n    else if (queryParams.index_ === VALUE_INDEX) {\r\n        orderBy = \"$value\" /* VALUE_INDEX */;\r\n    }\r\n    else if (queryParams.index_ === KEY_INDEX) {\r\n        orderBy = \"$key\" /* KEY_INDEX */;\r\n    }\r\n    else {\r\n        assert(queryParams.index_ instanceof PathIndex, 'Unrecognized index type!');\r\n        orderBy = queryParams.index_.toString();\r\n    }\r\n    qs[\"orderBy\" /* ORDER_BY */] = stringify(orderBy);\r\n    if (queryParams.startSet_) {\r\n        qs[\"startAt\" /* START_AT */] = stringify(queryParams.indexStartValue_);\r\n        if (queryParams.startNameSet_) {\r\n            qs[\"startAt\" /* START_AT */] +=\r\n                ',' + stringify(queryParams.indexStartName_);\r\n        }\r\n    }\r\n    if (queryParams.endSet_) {\r\n        qs[\"endAt\" /* END_AT */] = stringify(queryParams.indexEndValue_);\r\n        if (queryParams.endNameSet_) {\r\n            qs[\"endAt\" /* END_AT */] +=\r\n                ',' + stringify(queryParams.indexEndName_);\r\n        }\r\n    }\r\n    if (queryParams.limitSet_) {\r\n        if (queryParams.isViewFromLeft()) {\r\n            qs[\"limitToFirst\" /* LIMIT_TO_FIRST */] = queryParams.limit_;\r\n        }\r\n        else {\r\n            qs[\"limitToLast\" /* LIMIT_TO_LAST */] = queryParams.limit_;\r\n        }\r\n    }\r\n    return qs;\r\n}\r\nfunction queryParamsGetQueryObject(queryParams) {\r\n    const obj = {};\r\n    if (queryParams.startSet_) {\r\n        obj[\"sp\" /* INDEX_START_VALUE */] =\r\n            queryParams.indexStartValue_;\r\n        if (queryParams.startNameSet_) {\r\n            obj[\"sn\" /* INDEX_START_NAME */] =\r\n                queryParams.indexStartName_;\r\n        }\r\n    }\r\n    if (queryParams.endSet_) {\r\n        obj[\"ep\" /* INDEX_END_VALUE */] = queryParams.indexEndValue_;\r\n        if (queryParams.endNameSet_) {\r\n            obj[\"en\" /* INDEX_END_NAME */] = queryParams.indexEndName_;\r\n        }\r\n    }\r\n    if (queryParams.limitSet_) {\r\n        obj[\"l\" /* LIMIT */] = queryParams.limit_;\r\n        let viewFrom = queryParams.viewFrom_;\r\n        if (viewFrom === '') {\r\n            if (queryParams.isViewFromLeft()) {\r\n                viewFrom = \"l\" /* VIEW_FROM_LEFT */;\r\n            }\r\n            else {\r\n                viewFrom = \"r\" /* VIEW_FROM_RIGHT */;\r\n            }\r\n        }\r\n        obj[\"vf\" /* VIEW_FROM */] = viewFrom;\r\n    }\r\n    // For now, priority index is the default, so we only specify if it's some other index\r\n    if (queryParams.index_ !== PRIORITY_INDEX) {\r\n        obj[\"i\" /* INDEX */] = queryParams.index_.toString();\r\n    }\r\n    return obj;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An implementation of ServerActions that communicates with the server via REST requests.\r\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\r\n * persistent connection (using WebSockets or long-polling)\r\n */\r\nclass ReadonlyRestClient extends ServerActions {\r\n    /**\r\n     * @param repoInfo_ - Data about the namespace we are connecting to\r\n     * @param onDataUpdate_ - A callback for new data from the server\r\n     */\r\n    constructor(repoInfo_, onDataUpdate_, authTokenProvider_, appCheckTokenProvider_) {\r\n        super();\r\n        this.repoInfo_ = repoInfo_;\r\n        this.onDataUpdate_ = onDataUpdate_;\r\n        this.authTokenProvider_ = authTokenProvider_;\r\n        this.appCheckTokenProvider_ = appCheckTokenProvider_;\r\n        /** @private {function(...[*])} */\r\n        this.log_ = logWrapper('p:rest:');\r\n        /**\r\n         * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\r\n         * that's been removed. :-/\r\n         */\r\n        this.listens_ = {};\r\n    }\r\n    reportStats(stats) {\r\n        throw new Error('Method not implemented.');\r\n    }\r\n    static getListenId_(query, tag) {\r\n        if (tag !== undefined) {\r\n            return 'tag$' + tag;\r\n        }\r\n        else {\r\n            assert(query._queryParams.isDefault(), \"should have a tag if it's not a default query.\");\r\n            return query._path.toString();\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    listen(query, currentHashFn, tag, onComplete) {\r\n        const pathString = query._path.toString();\r\n        this.log_('Listen called for ' + pathString + ' ' + query._queryIdentifier);\r\n        // Mark this listener so we can tell if it's removed.\r\n        const listenId = ReadonlyRestClient.getListenId_(query, tag);\r\n        const thisListen = {};\r\n        this.listens_[listenId] = thisListen;\r\n        const queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);\r\n        this.restRequest_(pathString + '.json', queryStringParameters, (error, result) => {\r\n            let data = result;\r\n            if (error === 404) {\r\n                data = null;\r\n                error = null;\r\n            }\r\n            if (error === null) {\r\n                this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);\r\n            }\r\n            if (safeGet(this.listens_, listenId) === thisListen) {\r\n                let status;\r\n                if (!error) {\r\n                    status = 'ok';\r\n                }\r\n                else if (error === 401) {\r\n                    status = 'permission_denied';\r\n                }\r\n                else {\r\n                    status = 'rest_error:' + error;\r\n                }\r\n                onComplete(status, null);\r\n            }\r\n        });\r\n    }\r\n    /** @inheritDoc */\r\n    unlisten(query, tag) {\r\n        const listenId = ReadonlyRestClient.getListenId_(query, tag);\r\n        delete this.listens_[listenId];\r\n    }\r\n    get(query) {\r\n        const queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);\r\n        const pathString = query._path.toString();\r\n        const deferred = new Deferred();\r\n        this.restRequest_(pathString + '.json', queryStringParameters, (error, result) => {\r\n            let data = result;\r\n            if (error === 404) {\r\n                data = null;\r\n                error = null;\r\n            }\r\n            if (error === null) {\r\n                this.onDataUpdate_(pathString, data, \r\n                /*isMerge=*/ false, \r\n                /*tag=*/ null);\r\n                deferred.resolve(data);\r\n            }\r\n            else {\r\n                deferred.reject(new Error(data));\r\n            }\r\n        });\r\n        return deferred.promise;\r\n    }\r\n    /** @inheritDoc */\r\n    refreshAuthToken(token) {\r\n        // no-op since we just always call getToken.\r\n    }\r\n    /**\r\n     * Performs a REST request to the given path, with the provided query string parameters,\r\n     * and any auth credentials we have.\r\n     */\r\n    restRequest_(pathString, queryStringParameters = {}, callback) {\r\n        queryStringParameters['format'] = 'export';\r\n        return Promise.all([\r\n            this.authTokenProvider_.getToken(/*forceRefresh=*/ false),\r\n            this.appCheckTokenProvider_.getToken(/*forceRefresh=*/ false)\r\n        ]).then(([authToken, appCheckToken]) => {\r\n            if (authToken && authToken.accessToken) {\r\n                queryStringParameters['auth'] = authToken.accessToken;\r\n            }\r\n            if (appCheckToken && appCheckToken.token) {\r\n                queryStringParameters['ac'] = appCheckToken.token;\r\n            }\r\n            const url = (this.repoInfo_.secure ? 'https://' : 'http://') +\r\n                this.repoInfo_.host +\r\n                pathString +\r\n                '?' +\r\n                'ns=' +\r\n                this.repoInfo_.namespace +\r\n                querystring(queryStringParameters);\r\n            this.log_('Sending REST request for ' + url);\r\n            const xhr = new XMLHttpRequest();\r\n            xhr.onreadystatechange = () => {\r\n                if (callback && xhr.readyState === 4) {\r\n                    this.log_('REST Response for ' + url + ' received. status:', xhr.status, 'response:', xhr.responseText);\r\n                    let res = null;\r\n                    if (xhr.status >= 200 && xhr.status < 300) {\r\n                        try {\r\n                            res = jsonEval(xhr.responseText);\r\n                        }\r\n                        catch (e) {\r\n                            warn('Failed to parse JSON response for ' +\r\n                                url +\r\n                                ': ' +\r\n                                xhr.responseText);\r\n                        }\r\n                        callback(null, res);\r\n                    }\r\n                    else {\r\n                        // 401 and 404 are expected.\r\n                        if (xhr.status !== 401 && xhr.status !== 404) {\r\n                            warn('Got unsuccessful REST response for ' +\r\n                                url +\r\n                                ' Status: ' +\r\n                                xhr.status);\r\n                        }\r\n                        callback(xhr.status);\r\n                    }\r\n                    callback = null;\r\n                }\r\n            };\r\n            xhr.open('GET', url, /*asynchronous=*/ true);\r\n            xhr.send();\r\n        });\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\r\n */\r\nclass SnapshotHolder {\r\n    constructor() {\r\n        this.rootNode_ = ChildrenNode.EMPTY_NODE;\r\n    }\r\n    getNode(path) {\r\n        return this.rootNode_.getChild(path);\r\n    }\r\n    updateSnapshot(path, newSnapshotNode) {\r\n        this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction newSparseSnapshotTree() {\r\n    return {\r\n        value: null,\r\n        children: new Map()\r\n    };\r\n}\r\n/**\r\n * Stores the given node at the specified path. If there is already a node\r\n * at a shallower path, it merges the new data into that snapshot node.\r\n *\r\n * @param path - Path to look up snapshot for.\r\n * @param data - The new data, or null.\r\n */\r\nfunction sparseSnapshotTreeRemember(sparseSnapshotTree, path, data) {\r\n    if (pathIsEmpty(path)) {\r\n        sparseSnapshotTree.value = data;\r\n        sparseSnapshotTree.children.clear();\r\n    }\r\n    else if (sparseSnapshotTree.value !== null) {\r\n        sparseSnapshotTree.value = sparseSnapshotTree.value.updateChild(path, data);\r\n    }\r\n    else {\r\n        const childKey = pathGetFront(path);\r\n        if (!sparseSnapshotTree.children.has(childKey)) {\r\n            sparseSnapshotTree.children.set(childKey, newSparseSnapshotTree());\r\n        }\r\n        const child = sparseSnapshotTree.children.get(childKey);\r\n        path = pathPopFront(path);\r\n        sparseSnapshotTreeRemember(child, path, data);\r\n    }\r\n}\r\n/**\r\n * Purge the data at path from the cache.\r\n *\r\n * @param path - Path to look up snapshot for.\r\n * @returns True if this node should now be removed.\r\n */\r\nfunction sparseSnapshotTreeForget(sparseSnapshotTree, path) {\r\n    if (pathIsEmpty(path)) {\r\n        sparseSnapshotTree.value = null;\r\n        sparseSnapshotTree.children.clear();\r\n        return true;\r\n    }\r\n    else {\r\n        if (sparseSnapshotTree.value !== null) {\r\n            if (sparseSnapshotTree.value.isLeafNode()) {\r\n                // We're trying to forget a node that doesn't exist\r\n                return false;\r\n            }\r\n            else {\r\n                const value = sparseSnapshotTree.value;\r\n                sparseSnapshotTree.value = null;\r\n                value.forEachChild(PRIORITY_INDEX, (key, tree) => {\r\n                    sparseSnapshotTreeRemember(sparseSnapshotTree, new Path(key), tree);\r\n                });\r\n                return sparseSnapshotTreeForget(sparseSnapshotTree, path);\r\n            }\r\n        }\r\n        else if (sparseSnapshotTree.children.size > 0) {\r\n            const childKey = pathGetFront(path);\r\n            path = pathPopFront(path);\r\n            if (sparseSnapshotTree.children.has(childKey)) {\r\n                const safeToRemove = sparseSnapshotTreeForget(sparseSnapshotTree.children.get(childKey), path);\r\n                if (safeToRemove) {\r\n                    sparseSnapshotTree.children.delete(childKey);\r\n                }\r\n            }\r\n            return sparseSnapshotTree.children.size === 0;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }\r\n}\r\n/**\r\n * Recursively iterates through all of the stored tree and calls the\r\n * callback on each one.\r\n *\r\n * @param prefixPath - Path to look up node for.\r\n * @param func - The function to invoke for each tree.\r\n */\r\nfunction sparseSnapshotTreeForEachTree(sparseSnapshotTree, prefixPath, func) {\r\n    if (sparseSnapshotTree.value !== null) {\r\n        func(prefixPath, sparseSnapshotTree.value);\r\n    }\r\n    else {\r\n        sparseSnapshotTreeForEachChild(sparseSnapshotTree, (key, tree) => {\r\n            const path = new Path(prefixPath.toString() + '/' + key);\r\n            sparseSnapshotTreeForEachTree(tree, path, func);\r\n        });\r\n    }\r\n}\r\n/**\r\n * Iterates through each immediate child and triggers the callback.\r\n * Only seems to be used in tests.\r\n *\r\n * @param func - The function to invoke for each child.\r\n */\r\nfunction sparseSnapshotTreeForEachChild(sparseSnapshotTree, func) {\r\n    sparseSnapshotTree.children.forEach((tree, key) => {\r\n        func(key, tree);\r\n    });\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns the delta from the previous call to get stats.\r\n *\r\n * @param collection_ - The collection to \"listen\" to.\r\n */\r\nclass StatsListener {\r\n    constructor(collection_) {\r\n        this.collection_ = collection_;\r\n        this.last_ = null;\r\n    }\r\n    get() {\r\n        const newStats = this.collection_.get();\r\n        const delta = Object.assign({}, newStats);\r\n        if (this.last_) {\r\n            each(this.last_, (stat, value) => {\r\n                delta[stat] = delta[stat] - value;\r\n            });\r\n        }\r\n        this.last_ = newStats;\r\n        return delta;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\r\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\r\n// seconds to try to ensure the Firebase connection is established / settled.\r\nconst FIRST_STATS_MIN_TIME = 10 * 1000;\r\nconst FIRST_STATS_MAX_TIME = 30 * 1000;\r\n// We'll continue to report stats on average every 5 minutes.\r\nconst REPORT_STATS_INTERVAL = 5 * 60 * 1000;\r\nclass StatsReporter {\r\n    constructor(collection, server_) {\r\n        this.server_ = server_;\r\n        this.statsToReport_ = {};\r\n        this.statsListener_ = new StatsListener(collection);\r\n        const timeout = FIRST_STATS_MIN_TIME +\r\n            (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\r\n        setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\r\n    }\r\n    reportStats_() {\r\n        const stats = this.statsListener_.get();\r\n        const reportedStats = {};\r\n        let haveStatsToReport = false;\r\n        each(stats, (stat, value) => {\r\n            if (value > 0 && contains(this.statsToReport_, stat)) {\r\n                reportedStats[stat] = value;\r\n                haveStatsToReport = true;\r\n            }\r\n        });\r\n        if (haveStatsToReport) {\r\n            this.server_.reportStats(reportedStats);\r\n        }\r\n        // queue our next run.\r\n        setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL));\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n *\r\n * @enum\r\n */\r\nvar OperationType;\r\n(function (OperationType) {\r\n    OperationType[OperationType[\"OVERWRITE\"] = 0] = \"OVERWRITE\";\r\n    OperationType[OperationType[\"MERGE\"] = 1] = \"MERGE\";\r\n    OperationType[OperationType[\"ACK_USER_WRITE\"] = 2] = \"ACK_USER_WRITE\";\r\n    OperationType[OperationType[\"LISTEN_COMPLETE\"] = 3] = \"LISTEN_COMPLETE\";\r\n})(OperationType || (OperationType = {}));\r\nfunction newOperationSourceUser() {\r\n    return {\r\n        fromUser: true,\r\n        fromServer: false,\r\n        queryId: null,\r\n        tagged: false\r\n    };\r\n}\r\nfunction newOperationSourceServer() {\r\n    return {\r\n        fromUser: false,\r\n        fromServer: true,\r\n        queryId: null,\r\n        tagged: false\r\n    };\r\n}\r\nfunction newOperationSourceServerTaggedQuery(queryId) {\r\n    return {\r\n        fromUser: false,\r\n        fromServer: true,\r\n        queryId,\r\n        tagged: true\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass AckUserWrite {\r\n    /**\r\n     * @param affectedTree - A tree containing true for each affected path. Affected paths can't overlap.\r\n     */\r\n    constructor(\r\n    /** @inheritDoc */ path, \r\n    /** @inheritDoc */ affectedTree, \r\n    /** @inheritDoc */ revert) {\r\n        this.path = path;\r\n        this.affectedTree = affectedTree;\r\n        this.revert = revert;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.ACK_USER_WRITE;\r\n        /** @inheritDoc */\r\n        this.source = newOperationSourceUser();\r\n    }\r\n    operationForChild(childName) {\r\n        if (!pathIsEmpty(this.path)) {\r\n            assert(pathGetFront(this.path) === childName, 'operationForChild called for unrelated child.');\r\n            return new AckUserWrite(pathPopFront(this.path), this.affectedTree, this.revert);\r\n        }\r\n        else if (this.affectedTree.value != null) {\r\n            assert(this.affectedTree.children.isEmpty(), 'affectedTree should not have overlapping affected paths.');\r\n            // All child locations are affected as well; just return same operation.\r\n            return this;\r\n        }\r\n        else {\r\n            const childTree = this.affectedTree.subtree(new Path(childName));\r\n            return new AckUserWrite(newEmptyPath(), childTree, this.revert);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ListenComplete {\r\n    constructor(source, path) {\r\n        this.source = source;\r\n        this.path = path;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.LISTEN_COMPLETE;\r\n    }\r\n    operationForChild(childName) {\r\n        if (pathIsEmpty(this.path)) {\r\n            return new ListenComplete(this.source, newEmptyPath());\r\n        }\r\n        else {\r\n            return new ListenComplete(this.source, pathPopFront(this.path));\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Overwrite {\r\n    constructor(source, path, snap) {\r\n        this.source = source;\r\n        this.path = path;\r\n        this.snap = snap;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.OVERWRITE;\r\n    }\r\n    operationForChild(childName) {\r\n        if (pathIsEmpty(this.path)) {\r\n            return new Overwrite(this.source, newEmptyPath(), this.snap.getImmediateChild(childName));\r\n        }\r\n        else {\r\n            return new Overwrite(this.source, pathPopFront(this.path), this.snap);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Merge {\r\n    constructor(\r\n    /** @inheritDoc */ source, \r\n    /** @inheritDoc */ path, \r\n    /** @inheritDoc */ children) {\r\n        this.source = source;\r\n        this.path = path;\r\n        this.children = children;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.MERGE;\r\n    }\r\n    operationForChild(childName) {\r\n        if (pathIsEmpty(this.path)) {\r\n            const childTree = this.children.subtree(new Path(childName));\r\n            if (childTree.isEmpty()) {\r\n                // This child is unaffected\r\n                return null;\r\n            }\r\n            else if (childTree.value) {\r\n                // We have a snapshot for the child in question.  This becomes an overwrite of the child.\r\n                return new Overwrite(this.source, newEmptyPath(), childTree.value);\r\n            }\r\n            else {\r\n                // This is a merge at a deeper level\r\n                return new Merge(this.source, newEmptyPath(), childTree);\r\n            }\r\n        }\r\n        else {\r\n            assert(pathGetFront(this.path) === childName, \"Can't get a merge for a child not on the path of the operation\");\r\n            return new Merge(this.source, pathPopFront(this.path), this.children);\r\n        }\r\n    }\r\n    toString() {\r\n        return ('Operation(' +\r\n            this.path +\r\n            ': ' +\r\n            this.source.toString() +\r\n            ' merge: ' +\r\n            this.children.toString() +\r\n            ')');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\r\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\r\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\r\n * whether a node potentially had children removed due to a filter.\r\n */\r\nclass CacheNode {\r\n    constructor(node_, fullyInitialized_, filtered_) {\r\n        this.node_ = node_;\r\n        this.fullyInitialized_ = fullyInitialized_;\r\n        this.filtered_ = filtered_;\r\n    }\r\n    /**\r\n     * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\r\n     */\r\n    isFullyInitialized() {\r\n        return this.fullyInitialized_;\r\n    }\r\n    /**\r\n     * Returns whether this node is potentially missing children due to a filter applied to the node\r\n     */\r\n    isFiltered() {\r\n        return this.filtered_;\r\n    }\r\n    isCompleteForPath(path) {\r\n        if (pathIsEmpty(path)) {\r\n            return this.isFullyInitialized() && !this.filtered_;\r\n        }\r\n        const childKey = pathGetFront(path);\r\n        return this.isCompleteForChild(childKey);\r\n    }\r\n    isCompleteForChild(key) {\r\n        return ((this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key));\r\n    }\r\n    getNode() {\r\n        return this.node_;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\r\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\r\n * for details.\r\n *\r\n */\r\nclass EventGenerator {\r\n    constructor(query_) {\r\n        this.query_ = query_;\r\n        this.index_ = this.query_._queryParams.getIndex();\r\n    }\r\n}\r\n/**\r\n * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\r\n * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\r\n *\r\n * Notes:\r\n *  - child_moved events will be synthesized at this time for any child_changed events that affect\r\n *    our index.\r\n *  - prevName will be calculated based on the index ordering.\r\n */\r\nfunction eventGeneratorGenerateEventsForChanges(eventGenerator, changes, eventCache, eventRegistrations) {\r\n    const events = [];\r\n    const moves = [];\r\n    changes.forEach(change => {\r\n        if (change.type === \"child_changed\" /* CHILD_CHANGED */ &&\r\n            eventGenerator.index_.indexedValueChanged(change.oldSnap, change.snapshotNode)) {\r\n            moves.push(changeChildMoved(change.childName, change.snapshotNode));\r\n        }\r\n    });\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_removed\" /* CHILD_REMOVED */, changes, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_added\" /* CHILD_ADDED */, changes, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_moved\" /* CHILD_MOVED */, moves, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_changed\" /* CHILD_CHANGED */, changes, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"value\" /* VALUE */, changes, eventRegistrations, eventCache);\r\n    return events;\r\n}\r\n/**\r\n * Given changes of a single change type, generate the corresponding events.\r\n */\r\nfunction eventGeneratorGenerateEventsForType(eventGenerator, events, eventType, changes, registrations, eventCache) {\r\n    const filteredChanges = changes.filter(change => change.type === eventType);\r\n    filteredChanges.sort((a, b) => eventGeneratorCompareChanges(eventGenerator, a, b));\r\n    filteredChanges.forEach(change => {\r\n        const materializedChange = eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache);\r\n        registrations.forEach(registration => {\r\n            if (registration.respondsTo(change.type)) {\r\n                events.push(registration.createEvent(materializedChange, eventGenerator.query_));\r\n            }\r\n        });\r\n    });\r\n}\r\nfunction eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache) {\r\n    if (change.type === 'value' || change.type === 'child_removed') {\r\n        return change;\r\n    }\r\n    else {\r\n        change.prevName = eventCache.getPredecessorChildName(change.childName, change.snapshotNode, eventGenerator.index_);\r\n        return change;\r\n    }\r\n}\r\nfunction eventGeneratorCompareChanges(eventGenerator, a, b) {\r\n    if (a.childName == null || b.childName == null) {\r\n        throw assertionError('Should only compare child_ events.');\r\n    }\r\n    const aWrapped = new NamedNode(a.childName, a.snapshotNode);\r\n    const bWrapped = new NamedNode(b.childName, b.snapshotNode);\r\n    return eventGenerator.index_.compare(aWrapped, bWrapped);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction newViewCache(eventCache, serverCache) {\r\n    return { eventCache, serverCache };\r\n}\r\nfunction viewCacheUpdateEventSnap(viewCache, eventSnap, complete, filtered) {\r\n    return newViewCache(new CacheNode(eventSnap, complete, filtered), viewCache.serverCache);\r\n}\r\nfunction viewCacheUpdateServerSnap(viewCache, serverSnap, complete, filtered) {\r\n    return newViewCache(viewCache.eventCache, new CacheNode(serverSnap, complete, filtered));\r\n}\r\nfunction viewCacheGetCompleteEventSnap(viewCache) {\r\n    return viewCache.eventCache.isFullyInitialized()\r\n        ? viewCache.eventCache.getNode()\r\n        : null;\r\n}\r\nfunction viewCacheGetCompleteServerSnap(viewCache) {\r\n    return viewCache.serverCache.isFullyInitialized()\r\n        ? viewCache.serverCache.getNode()\r\n        : null;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet emptyChildrenSingleton;\r\n/**\r\n * Singleton empty children collection.\r\n *\r\n */\r\nconst EmptyChildren = () => {\r\n    if (!emptyChildrenSingleton) {\r\n        emptyChildrenSingleton = new SortedMap(stringCompare);\r\n    }\r\n    return emptyChildrenSingleton;\r\n};\r\n/**\r\n * A tree with immutable elements.\r\n */\r\nclass ImmutableTree {\r\n    constructor(value, children = EmptyChildren()) {\r\n        this.value = value;\r\n        this.children = children;\r\n    }\r\n    static fromObject(obj) {\r\n        let tree = new ImmutableTree(null);\r\n        each(obj, (childPath, childSnap) => {\r\n            tree = tree.set(new Path(childPath), childSnap);\r\n        });\r\n        return tree;\r\n    }\r\n    /**\r\n     * True if the value is empty and there are no children\r\n     */\r\n    isEmpty() {\r\n        return this.value === null && this.children.isEmpty();\r\n    }\r\n    /**\r\n     * Given a path and predicate, return the first node and the path to that node\r\n     * where the predicate returns true.\r\n     *\r\n     * TODO Do a perf test -- If we're creating a bunch of `{path: value:}`\r\n     * objects on the way back out, it may be better to pass down a pathSoFar obj.\r\n     *\r\n     * @param relativePath - The remainder of the path\r\n     * @param predicate - The predicate to satisfy to return a node\r\n     */\r\n    findRootMostMatchingPathAndValue(relativePath, predicate) {\r\n        if (this.value != null && predicate(this.value)) {\r\n            return { path: newEmptyPath(), value: this.value };\r\n        }\r\n        else {\r\n            if (pathIsEmpty(relativePath)) {\r\n                return null;\r\n            }\r\n            else {\r\n                const front = pathGetFront(relativePath);\r\n                const child = this.children.get(front);\r\n                if (child !== null) {\r\n                    const childExistingPathAndValue = child.findRootMostMatchingPathAndValue(pathPopFront(relativePath), predicate);\r\n                    if (childExistingPathAndValue != null) {\r\n                        const fullPath = pathChild(new Path(front), childExistingPathAndValue.path);\r\n                        return { path: fullPath, value: childExistingPathAndValue.value };\r\n                    }\r\n                    else {\r\n                        return null;\r\n                    }\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Find, if it exists, the shortest subpath of the given path that points a defined\r\n     * value in the tree\r\n     */\r\n    findRootMostValueAndPath(relativePath) {\r\n        return this.findRootMostMatchingPathAndValue(relativePath, () => true);\r\n    }\r\n    /**\r\n     * @returns The subtree at the given path\r\n     */\r\n    subtree(relativePath) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return this;\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const childTree = this.children.get(front);\r\n            if (childTree !== null) {\r\n                return childTree.subtree(pathPopFront(relativePath));\r\n            }\r\n            else {\r\n                return new ImmutableTree(null);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Sets a value at the specified path.\r\n     *\r\n     * @param relativePath - Path to set value at.\r\n     * @param toSet - Value to set.\r\n     * @returns Resulting tree.\r\n     */\r\n    set(relativePath, toSet) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return new ImmutableTree(toSet, this.children);\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front) || new ImmutableTree(null);\r\n            const newChild = child.set(pathPopFront(relativePath), toSet);\r\n            const newChildren = this.children.insert(front, newChild);\r\n            return new ImmutableTree(this.value, newChildren);\r\n        }\r\n    }\r\n    /**\r\n     * Removes the value at the specified path.\r\n     *\r\n     * @param relativePath - Path to value to remove.\r\n     * @returns Resulting tree.\r\n     */\r\n    remove(relativePath) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            if (this.children.isEmpty()) {\r\n                return new ImmutableTree(null);\r\n            }\r\n            else {\r\n                return new ImmutableTree(null, this.children);\r\n            }\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front);\r\n            if (child) {\r\n                const newChild = child.remove(pathPopFront(relativePath));\r\n                let newChildren;\r\n                if (newChild.isEmpty()) {\r\n                    newChildren = this.children.remove(front);\r\n                }\r\n                else {\r\n                    newChildren = this.children.insert(front, newChild);\r\n                }\r\n                if (this.value === null && newChildren.isEmpty()) {\r\n                    return new ImmutableTree(null);\r\n                }\r\n                else {\r\n                    return new ImmutableTree(this.value, newChildren);\r\n                }\r\n            }\r\n            else {\r\n                return this;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Gets a value from the tree.\r\n     *\r\n     * @param relativePath - Path to get value for.\r\n     * @returns Value at path, or null.\r\n     */\r\n    get(relativePath) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return this.value;\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front);\r\n            if (child) {\r\n                return child.get(pathPopFront(relativePath));\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Replace the subtree at the specified path with the given new tree.\r\n     *\r\n     * @param relativePath - Path to replace subtree for.\r\n     * @param newTree - New tree.\r\n     * @returns Resulting tree.\r\n     */\r\n    setTree(relativePath, newTree) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return newTree;\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front) || new ImmutableTree(null);\r\n            const newChild = child.setTree(pathPopFront(relativePath), newTree);\r\n            let newChildren;\r\n            if (newChild.isEmpty()) {\r\n                newChildren = this.children.remove(front);\r\n            }\r\n            else {\r\n                newChildren = this.children.insert(front, newChild);\r\n            }\r\n            return new ImmutableTree(this.value, newChildren);\r\n        }\r\n    }\r\n    /**\r\n     * Performs a depth first fold on this tree. Transforms a tree into a single\r\n     * value, given a function that operates on the path to a node, an optional\r\n     * current value, and a map of child names to folded subtrees\r\n     */\r\n    fold(fn) {\r\n        return this.fold_(newEmptyPath(), fn);\r\n    }\r\n    /**\r\n     * Recursive helper for public-facing fold() method\r\n     */\r\n    fold_(pathSoFar, fn) {\r\n        const accum = {};\r\n        this.children.inorderTraversal((childKey, childTree) => {\r\n            accum[childKey] = childTree.fold_(pathChild(pathSoFar, childKey), fn);\r\n        });\r\n        return fn(pathSoFar, this.value, accum);\r\n    }\r\n    /**\r\n     * Find the first matching value on the given path. Return the result of applying f to it.\r\n     */\r\n    findOnPath(path, f) {\r\n        return this.findOnPath_(path, newEmptyPath(), f);\r\n    }\r\n    findOnPath_(pathToFollow, pathSoFar, f) {\r\n        const result = this.value ? f(pathSoFar, this.value) : false;\r\n        if (result) {\r\n            return result;\r\n        }\r\n        else {\r\n            if (pathIsEmpty(pathToFollow)) {\r\n                return null;\r\n            }\r\n            else {\r\n                const front = pathGetFront(pathToFollow);\r\n                const nextChild = this.children.get(front);\r\n                if (nextChild) {\r\n                    return nextChild.findOnPath_(pathPopFront(pathToFollow), pathChild(pathSoFar, front), f);\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    foreachOnPath(path, f) {\r\n        return this.foreachOnPath_(path, newEmptyPath(), f);\r\n    }\r\n    foreachOnPath_(pathToFollow, currentRelativePath, f) {\r\n        if (pathIsEmpty(pathToFollow)) {\r\n            return this;\r\n        }\r\n        else {\r\n            if (this.value) {\r\n                f(currentRelativePath, this.value);\r\n            }\r\n            const front = pathGetFront(pathToFollow);\r\n            const nextChild = this.children.get(front);\r\n            if (nextChild) {\r\n                return nextChild.foreachOnPath_(pathPopFront(pathToFollow), pathChild(currentRelativePath, front), f);\r\n            }\r\n            else {\r\n                return new ImmutableTree(null);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Calls the given function for each node in the tree that has a value.\r\n     *\r\n     * @param f - A function to be called with the path from the root of the tree to\r\n     * a node, and the value at that node. Called in depth-first order.\r\n     */\r\n    foreach(f) {\r\n        this.foreach_(newEmptyPath(), f);\r\n    }\r\n    foreach_(currentRelativePath, f) {\r\n        this.children.inorderTraversal((childName, childTree) => {\r\n            childTree.foreach_(pathChild(currentRelativePath, childName), f);\r\n        });\r\n        if (this.value) {\r\n            f(currentRelativePath, this.value);\r\n        }\r\n    }\r\n    foreachChild(f) {\r\n        this.children.inorderTraversal((childName, childTree) => {\r\n            if (childTree.value) {\r\n                f(childName, childTree.value);\r\n            }\r\n        });\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\r\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\r\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\r\n * to reflect the write added.\r\n */\r\nclass CompoundWrite {\r\n    constructor(writeTree_) {\r\n        this.writeTree_ = writeTree_;\r\n    }\r\n    static empty() {\r\n        return new CompoundWrite(new ImmutableTree(null));\r\n    }\r\n}\r\nfunction compoundWriteAddWrite(compoundWrite, path, node) {\r\n    if (pathIsEmpty(path)) {\r\n        return new CompoundWrite(new ImmutableTree(node));\r\n    }\r\n    else {\r\n        const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\r\n        if (rootmost != null) {\r\n            const rootMostPath = rootmost.path;\r\n            let value = rootmost.value;\r\n            const relativePath = newRelativePath(rootMostPath, path);\r\n            value = value.updateChild(relativePath, node);\r\n            return new CompoundWrite(compoundWrite.writeTree_.set(rootMostPath, value));\r\n        }\r\n        else {\r\n            const subtree = new ImmutableTree(node);\r\n            const newWriteTree = compoundWrite.writeTree_.setTree(path, subtree);\r\n            return new CompoundWrite(newWriteTree);\r\n        }\r\n    }\r\n}\r\nfunction compoundWriteAddWrites(compoundWrite, path, updates) {\r\n    let newWrite = compoundWrite;\r\n    each(updates, (childKey, node) => {\r\n        newWrite = compoundWriteAddWrite(newWrite, pathChild(path, childKey), node);\r\n    });\r\n    return newWrite;\r\n}\r\n/**\r\n * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\r\n * location, which must be removed by calling this method with that path.\r\n *\r\n * @param compoundWrite - The CompoundWrite to remove.\r\n * @param path - The path at which a write and all deeper writes should be removed\r\n * @returns The new CompoundWrite with the removed path\r\n */\r\nfunction compoundWriteRemoveWrite(compoundWrite, path) {\r\n    if (pathIsEmpty(path)) {\r\n        return CompoundWrite.empty();\r\n    }\r\n    else {\r\n        const newWriteTree = compoundWrite.writeTree_.setTree(path, new ImmutableTree(null));\r\n        return new CompoundWrite(newWriteTree);\r\n    }\r\n}\r\n/**\r\n * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\r\n * considered \"complete\".\r\n *\r\n * @param compoundWrite - The CompoundWrite to check.\r\n * @param path - The path to check for\r\n * @returns Whether there is a complete write at that path\r\n */\r\nfunction compoundWriteHasCompleteWrite(compoundWrite, path) {\r\n    return compoundWriteGetCompleteNode(compoundWrite, path) != null;\r\n}\r\n/**\r\n * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\r\n * writes from deeper paths, but will return child nodes from a more shallow path.\r\n *\r\n * @param compoundWrite - The CompoundWrite to get the node from.\r\n * @param path - The path to get a complete write\r\n * @returns The node if complete at that path, or null otherwise.\r\n */\r\nfunction compoundWriteGetCompleteNode(compoundWrite, path) {\r\n    const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\r\n    if (rootmost != null) {\r\n        return compoundWrite.writeTree_\r\n            .get(rootmost.path)\r\n            .getChild(newRelativePath(rootmost.path, path));\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n}\r\n/**\r\n * Returns all children that are guaranteed to be a complete overwrite.\r\n *\r\n * @param compoundWrite - The CompoundWrite to get children from.\r\n * @returns A list of all complete children.\r\n */\r\nfunction compoundWriteGetCompleteChildren(compoundWrite) {\r\n    const children = [];\r\n    const node = compoundWrite.writeTree_.value;\r\n    if (node != null) {\r\n        // If it's a leaf node, it has no children; so nothing to do.\r\n        if (!node.isLeafNode()) {\r\n            node.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\r\n                children.push(new NamedNode(childName, childNode));\r\n            });\r\n        }\r\n    }\r\n    else {\r\n        compoundWrite.writeTree_.children.inorderTraversal((childName, childTree) => {\r\n            if (childTree.value != null) {\r\n                children.push(new NamedNode(childName, childTree.value));\r\n            }\r\n        });\r\n    }\r\n    return children;\r\n}\r\nfunction compoundWriteChildCompoundWrite(compoundWrite, path) {\r\n    if (pathIsEmpty(path)) {\r\n        return compoundWrite;\r\n    }\r\n    else {\r\n        const shadowingNode = compoundWriteGetCompleteNode(compoundWrite, path);\r\n        if (shadowingNode != null) {\r\n            return new CompoundWrite(new ImmutableTree(shadowingNode));\r\n        }\r\n        else {\r\n            return new CompoundWrite(compoundWrite.writeTree_.subtree(path));\r\n        }\r\n    }\r\n}\r\n/**\r\n * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\r\n * @returns Whether this CompoundWrite is empty\r\n */\r\nfunction compoundWriteIsEmpty(compoundWrite) {\r\n    return compoundWrite.writeTree_.isEmpty();\r\n}\r\n/**\r\n * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\r\n * node\r\n * @param node - The node to apply this CompoundWrite to\r\n * @returns The node with all writes applied\r\n */\r\nfunction compoundWriteApply(compoundWrite, node) {\r\n    return applySubtreeWrite(newEmptyPath(), compoundWrite.writeTree_, node);\r\n}\r\nfunction applySubtreeWrite(relativePath, writeTree, node) {\r\n    if (writeTree.value != null) {\r\n        // Since there a write is always a leaf, we're done here\r\n        return node.updateChild(relativePath, writeTree.value);\r\n    }\r\n    else {\r\n        let priorityWrite = null;\r\n        writeTree.children.inorderTraversal((childKey, childTree) => {\r\n            if (childKey === '.priority') {\r\n                // Apply priorities at the end so we don't update priorities for either empty nodes or forget\r\n                // to apply priorities to empty nodes that are later filled\r\n                assert(childTree.value !== null, 'Priority writes must always be leaf nodes');\r\n                priorityWrite = childTree.value;\r\n            }\r\n            else {\r\n                node = applySubtreeWrite(pathChild(relativePath, childKey), childTree, node);\r\n            }\r\n        });\r\n        // If there was a priority write, we only apply it if the node is not empty\r\n        if (!node.getChild(relativePath).isEmpty() && priorityWrite !== null) {\r\n            node = node.updateChild(pathChild(relativePath, '.priority'), priorityWrite);\r\n        }\r\n        return node;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\r\n *\r\n */\r\nfunction writeTreeChildWrites(writeTree, path) {\r\n    return newWriteTreeRef(path, writeTree);\r\n}\r\n/**\r\n * Record a new overwrite from user code.\r\n *\r\n * @param visible - This is set to false by some transactions. It should be excluded from event caches\r\n */\r\nfunction writeTreeAddOverwrite(writeTree, path, snap, writeId, visible) {\r\n    assert(writeId > writeTree.lastWriteId, 'Stacking an older write on top of newer ones');\r\n    if (visible === undefined) {\r\n        visible = true;\r\n    }\r\n    writeTree.allWrites.push({\r\n        path,\r\n        snap,\r\n        writeId,\r\n        visible\r\n    });\r\n    if (visible) {\r\n        writeTree.visibleWrites = compoundWriteAddWrite(writeTree.visibleWrites, path, snap);\r\n    }\r\n    writeTree.lastWriteId = writeId;\r\n}\r\n/**\r\n * Record a new merge from user code.\r\n */\r\nfunction writeTreeAddMerge(writeTree, path, changedChildren, writeId) {\r\n    assert(writeId > writeTree.lastWriteId, 'Stacking an older merge on top of newer ones');\r\n    writeTree.allWrites.push({\r\n        path,\r\n        children: changedChildren,\r\n        writeId,\r\n        visible: true\r\n    });\r\n    writeTree.visibleWrites = compoundWriteAddWrites(writeTree.visibleWrites, path, changedChildren);\r\n    writeTree.lastWriteId = writeId;\r\n}\r\nfunction writeTreeGetWrite(writeTree, writeId) {\r\n    for (let i = 0; i < writeTree.allWrites.length; i++) {\r\n        const record = writeTree.allWrites[i];\r\n        if (record.writeId === writeId) {\r\n            return record;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\r\n * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\r\n *\r\n * @returns true if the write may have been visible (meaning we'll need to reevaluate / raise\r\n * events as a result).\r\n */\r\nfunction writeTreeRemoveWrite(writeTree, writeId) {\r\n    // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\r\n    // out of order.\r\n    //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\r\n    //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\r\n    const idx = writeTree.allWrites.findIndex(s => {\r\n        return s.writeId === writeId;\r\n    });\r\n    assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\r\n    const writeToRemove = writeTree.allWrites[idx];\r\n    writeTree.allWrites.splice(idx, 1);\r\n    let removedWriteWasVisible = writeToRemove.visible;\r\n    let removedWriteOverlapsWithOtherWrites = false;\r\n    let i = writeTree.allWrites.length - 1;\r\n    while (removedWriteWasVisible && i >= 0) {\r\n        const currentWrite = writeTree.allWrites[i];\r\n        if (currentWrite.visible) {\r\n            if (i >= idx &&\r\n                writeTreeRecordContainsPath_(currentWrite, writeToRemove.path)) {\r\n                // The removed write was completely shadowed by a subsequent write.\r\n                removedWriteWasVisible = false;\r\n            }\r\n            else if (pathContains(writeToRemove.path, currentWrite.path)) {\r\n                // Either we're covering some writes or they're covering part of us (depending on which came first).\r\n                removedWriteOverlapsWithOtherWrites = true;\r\n            }\r\n        }\r\n        i--;\r\n    }\r\n    if (!removedWriteWasVisible) {\r\n        return false;\r\n    }\r\n    else if (removedWriteOverlapsWithOtherWrites) {\r\n        // There's some shadowing going on. Just rebuild the visible writes from scratch.\r\n        writeTreeResetTree_(writeTree);\r\n        return true;\r\n    }\r\n    else {\r\n        // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\r\n        if (writeToRemove.snap) {\r\n            writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, writeToRemove.path);\r\n        }\r\n        else {\r\n            const children = writeToRemove.children;\r\n            each(children, (childName) => {\r\n                writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, pathChild(writeToRemove.path, childName));\r\n            });\r\n        }\r\n        return true;\r\n    }\r\n}\r\nfunction writeTreeRecordContainsPath_(writeRecord, path) {\r\n    if (writeRecord.snap) {\r\n        return pathContains(writeRecord.path, path);\r\n    }\r\n    else {\r\n        for (const childName in writeRecord.children) {\r\n            if (writeRecord.children.hasOwnProperty(childName) &&\r\n                pathContains(pathChild(writeRecord.path, childName), path)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\r\n */\r\nfunction writeTreeResetTree_(writeTree) {\r\n    writeTree.visibleWrites = writeTreeLayerTree_(writeTree.allWrites, writeTreeDefaultFilter_, newEmptyPath());\r\n    if (writeTree.allWrites.length > 0) {\r\n        writeTree.lastWriteId =\r\n            writeTree.allWrites[writeTree.allWrites.length - 1].writeId;\r\n    }\r\n    else {\r\n        writeTree.lastWriteId = -1;\r\n    }\r\n}\r\n/**\r\n * The default filter used when constructing the tree. Keep everything that's visible.\r\n */\r\nfunction writeTreeDefaultFilter_(write) {\r\n    return write.visible;\r\n}\r\n/**\r\n * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\r\n * event data at that path.\r\n */\r\nfunction writeTreeLayerTree_(writes, filter, treeRoot) {\r\n    let compoundWrite = CompoundWrite.empty();\r\n    for (let i = 0; i < writes.length; ++i) {\r\n        const write = writes[i];\r\n        // Theory, a later set will either:\r\n        // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\r\n        // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\r\n        if (filter(write)) {\r\n            const writePath = write.path;\r\n            let relativePath;\r\n            if (write.snap) {\r\n                if (pathContains(treeRoot, writePath)) {\r\n                    relativePath = newRelativePath(treeRoot, writePath);\r\n                    compoundWrite = compoundWriteAddWrite(compoundWrite, relativePath, write.snap);\r\n                }\r\n                else if (pathContains(writePath, treeRoot)) {\r\n                    relativePath = newRelativePath(writePath, treeRoot);\r\n                    compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), write.snap.getChild(relativePath));\r\n                }\r\n                else ;\r\n            }\r\n            else if (write.children) {\r\n                if (pathContains(treeRoot, writePath)) {\r\n                    relativePath = newRelativePath(treeRoot, writePath);\r\n                    compoundWrite = compoundWriteAddWrites(compoundWrite, relativePath, write.children);\r\n                }\r\n                else if (pathContains(writePath, treeRoot)) {\r\n                    relativePath = newRelativePath(writePath, treeRoot);\r\n                    if (pathIsEmpty(relativePath)) {\r\n                        compoundWrite = compoundWriteAddWrites(compoundWrite, newEmptyPath(), write.children);\r\n                    }\r\n                    else {\r\n                        const child = safeGet(write.children, pathGetFront(relativePath));\r\n                        if (child) {\r\n                            // There exists a child in this node that matches the root path\r\n                            const deepNode = child.getChild(pathPopFront(relativePath));\r\n                            compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), deepNode);\r\n                        }\r\n                    }\r\n                }\r\n                else ;\r\n            }\r\n            else {\r\n                throw assertionError('WriteRecord should have .snap or .children');\r\n            }\r\n        }\r\n    }\r\n    return compoundWrite;\r\n}\r\n/**\r\n * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\r\n * writes), attempt to calculate a complete snapshot for the given path\r\n *\r\n * @param writeIdsToExclude - An optional set to be excluded\r\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\r\n */\r\nfunction writeTreeCalcCompleteEventCache(writeTree, treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\r\n    if (!writeIdsToExclude && !includeHiddenWrites) {\r\n        const shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);\r\n        if (shadowingNode != null) {\r\n            return shadowingNode;\r\n        }\r\n        else {\r\n            const subMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n            if (compoundWriteIsEmpty(subMerge)) {\r\n                return completeServerCache;\r\n            }\r\n            else if (completeServerCache == null &&\r\n                !compoundWriteHasCompleteWrite(subMerge, newEmptyPath())) {\r\n                // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\r\n                return null;\r\n            }\r\n            else {\r\n                const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\r\n                return compoundWriteApply(subMerge, layeredCache);\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n        if (!includeHiddenWrites && compoundWriteIsEmpty(merge)) {\r\n            return completeServerCache;\r\n        }\r\n        else {\r\n            // If the server cache is null, and we don't have a complete cache, we need to return null\r\n            if (!includeHiddenWrites &&\r\n                completeServerCache == null &&\r\n                !compoundWriteHasCompleteWrite(merge, newEmptyPath())) {\r\n                return null;\r\n            }\r\n            else {\r\n                const filter = function (write) {\r\n                    return ((write.visible || includeHiddenWrites) &&\r\n                        (!writeIdsToExclude ||\r\n                            !~writeIdsToExclude.indexOf(write.writeId)) &&\r\n                        (pathContains(write.path, treePath) ||\r\n                            pathContains(treePath, write.path)));\r\n                };\r\n                const mergeAtPath = writeTreeLayerTree_(writeTree.allWrites, filter, treePath);\r\n                const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\r\n                return compoundWriteApply(mergeAtPath, layeredCache);\r\n            }\r\n        }\r\n    }\r\n}\r\n/**\r\n * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\r\n * Used when creating new views, to pre-fill their complete event children snapshot.\r\n */\r\nfunction writeTreeCalcCompleteEventChildren(writeTree, treePath, completeServerChildren) {\r\n    let completeChildren = ChildrenNode.EMPTY_NODE;\r\n    const topLevelSet = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);\r\n    if (topLevelSet) {\r\n        if (!topLevelSet.isLeafNode()) {\r\n            // we're shadowing everything. Return the children.\r\n            topLevelSet.forEachChild(PRIORITY_INDEX, (childName, childSnap) => {\r\n                completeChildren = completeChildren.updateImmediateChild(childName, childSnap);\r\n            });\r\n        }\r\n        return completeChildren;\r\n    }\r\n    else if (completeServerChildren) {\r\n        // Layer any children we have on top of this\r\n        // We know we don't have a top-level set, so just enumerate existing children\r\n        const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n        completeServerChildren.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\r\n            const node = compoundWriteApply(compoundWriteChildCompoundWrite(merge, new Path(childName)), childNode);\r\n            completeChildren = completeChildren.updateImmediateChild(childName, node);\r\n        });\r\n        // Add any complete children we have from the set\r\n        compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\r\n            completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\r\n        });\r\n        return completeChildren;\r\n    }\r\n    else {\r\n        // We don't have anything to layer on top of. Layer on any children we have\r\n        // Note that we can return an empty snap if we have a defined delete\r\n        const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n        compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\r\n            completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\r\n        });\r\n        return completeChildren;\r\n    }\r\n}\r\n/**\r\n * Given that the underlying server data has updated, determine what, if anything, needs to be\r\n * applied to the event cache.\r\n *\r\n * Possibilities:\r\n *\r\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n *\r\n * 2. Some write is completely shadowing. No events to be raised\r\n *\r\n * 3. Is partially shadowed. Events\r\n *\r\n * Either existingEventSnap or existingServerSnap must exist\r\n */\r\nfunction writeTreeCalcEventCacheAfterServerOverwrite(writeTree, treePath, childPath, existingEventSnap, existingServerSnap) {\r\n    assert(existingEventSnap || existingServerSnap, 'Either existingEventSnap or existingServerSnap must exist');\r\n    const path = pathChild(treePath, childPath);\r\n    if (compoundWriteHasCompleteWrite(writeTree.visibleWrites, path)) {\r\n        // At this point we can probably guarantee that we're in case 2, meaning no events\r\n        // May need to check visibility while doing the findRootMostValueAndPath call\r\n        return null;\r\n    }\r\n    else {\r\n        // No complete shadowing. We're either partially shadowing or not shadowing at all.\r\n        const childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);\r\n        if (compoundWriteIsEmpty(childMerge)) {\r\n            // We're not shadowing at all. Case 1\r\n            return existingServerSnap.getChild(childPath);\r\n        }\r\n        else {\r\n            // This could be more efficient if the serverNode + updates doesn't change the eventSnap\r\n            // However this is tricky to find out, since user updates don't necessary change the server\r\n            // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\r\n            // adds nodes, but doesn't change any existing writes. It is therefore not enough to\r\n            // only check if the updates change the serverNode.\r\n            // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\r\n            return compoundWriteApply(childMerge, existingServerSnap.getChild(childPath));\r\n        }\r\n    }\r\n}\r\n/**\r\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n * complete child for this ChildKey.\r\n */\r\nfunction writeTreeCalcCompleteChild(writeTree, treePath, childKey, existingServerSnap) {\r\n    const path = pathChild(treePath, childKey);\r\n    const shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\r\n    if (shadowingNode != null) {\r\n        return shadowingNode;\r\n    }\r\n    else {\r\n        if (existingServerSnap.isCompleteForChild(childKey)) {\r\n            const childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);\r\n            return compoundWriteApply(childMerge, existingServerSnap.getNode().getImmediateChild(childKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n/**\r\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n * a higher path, this will return the child of that write relative to the write and this path.\r\n * Returns null if there is no write at this path.\r\n */\r\nfunction writeTreeShadowingWrite(writeTree, path) {\r\n    return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\r\n}\r\n/**\r\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n * the window, but may now be in the window.\r\n */\r\nfunction writeTreeCalcIndexedSlice(writeTree, treePath, completeServerData, startPost, count, reverse, index) {\r\n    let toIterate;\r\n    const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n    const shadowingNode = compoundWriteGetCompleteNode(merge, newEmptyPath());\r\n    if (shadowingNode != null) {\r\n        toIterate = shadowingNode;\r\n    }\r\n    else if (completeServerData != null) {\r\n        toIterate = compoundWriteApply(merge, completeServerData);\r\n    }\r\n    else {\r\n        // no children to iterate on\r\n        return [];\r\n    }\r\n    toIterate = toIterate.withIndex(index);\r\n    if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\r\n        const nodes = [];\r\n        const cmp = index.getCompare();\r\n        const iter = reverse\r\n            ? toIterate.getReverseIteratorFrom(startPost, index)\r\n            : toIterate.getIteratorFrom(startPost, index);\r\n        let next = iter.getNext();\r\n        while (next && nodes.length < count) {\r\n            if (cmp(next, startPost) !== 0) {\r\n                nodes.push(next);\r\n            }\r\n            next = iter.getNext();\r\n        }\r\n        return nodes;\r\n    }\r\n    else {\r\n        return [];\r\n    }\r\n}\r\nfunction newWriteTree() {\r\n    return {\r\n        visibleWrites: CompoundWrite.empty(),\r\n        allWrites: [],\r\n        lastWriteId: -1\r\n    };\r\n}\r\n/**\r\n * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\r\n * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\r\n * can lead to a more expensive calculation.\r\n *\r\n * @param writeIdsToExclude - Optional writes to exclude.\r\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\r\n */\r\nfunction writeTreeRefCalcCompleteEventCache(writeTreeRef, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\r\n    return writeTreeCalcCompleteEventCache(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites);\r\n}\r\n/**\r\n * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\r\n * mix of the given server data and write data.\r\n *\r\n */\r\nfunction writeTreeRefCalcCompleteEventChildren(writeTreeRef, completeServerChildren) {\r\n    return writeTreeCalcCompleteEventChildren(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerChildren);\r\n}\r\n/**\r\n * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\r\n * if anything, needs to be applied to the event cache.\r\n *\r\n * Possibilities:\r\n *\r\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n *\r\n * 2. Some write is completely shadowing. No events to be raised\r\n *\r\n * 3. Is partially shadowed. Events should be raised\r\n *\r\n * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\r\n *\r\n *\r\n */\r\nfunction writeTreeRefCalcEventCacheAfterServerOverwrite(writeTreeRef, path, existingEventSnap, existingServerSnap) {\r\n    return writeTreeCalcEventCacheAfterServerOverwrite(writeTreeRef.writeTree, writeTreeRef.treePath, path, existingEventSnap, existingServerSnap);\r\n}\r\n/**\r\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n * a higher path, this will return the child of that write relative to the write and this path.\r\n * Returns null if there is no write at this path.\r\n *\r\n */\r\nfunction writeTreeRefShadowingWrite(writeTreeRef, path) {\r\n    return writeTreeShadowingWrite(writeTreeRef.writeTree, pathChild(writeTreeRef.treePath, path));\r\n}\r\n/**\r\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n * the window, but may now be in the window\r\n */\r\nfunction writeTreeRefCalcIndexedSlice(writeTreeRef, completeServerData, startPost, count, reverse, index) {\r\n    return writeTreeCalcIndexedSlice(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerData, startPost, count, reverse, index);\r\n}\r\n/**\r\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n * complete child for this ChildKey.\r\n */\r\nfunction writeTreeRefCalcCompleteChild(writeTreeRef, childKey, existingServerCache) {\r\n    return writeTreeCalcCompleteChild(writeTreeRef.writeTree, writeTreeRef.treePath, childKey, existingServerCache);\r\n}\r\n/**\r\n * Return a WriteTreeRef for a child.\r\n */\r\nfunction writeTreeRefChild(writeTreeRef, childName) {\r\n    return newWriteTreeRef(pathChild(writeTreeRef.treePath, childName), writeTreeRef.writeTree);\r\n}\r\nfunction newWriteTreeRef(path, writeTree) {\r\n    return {\r\n        treePath: path,\r\n        writeTree\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ChildChangeAccumulator {\r\n    constructor() {\r\n        this.changeMap = new Map();\r\n    }\r\n    trackChildChange(change) {\r\n        const type = change.type;\r\n        const childKey = change.childName;\r\n        assert(type === \"child_added\" /* CHILD_ADDED */ ||\r\n            type === \"child_changed\" /* CHILD_CHANGED */ ||\r\n            type === \"child_removed\" /* CHILD_REMOVED */, 'Only child changes supported for tracking');\r\n        assert(childKey !== '.priority', 'Only non-priority child changes can be tracked.');\r\n        const oldChange = this.changeMap.get(childKey);\r\n        if (oldChange) {\r\n            const oldType = oldChange.type;\r\n            if (type === \"child_added\" /* CHILD_ADDED */ &&\r\n                oldType === \"child_removed\" /* CHILD_REMOVED */) {\r\n                this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.snapshotNode));\r\n            }\r\n            else if (type === \"child_removed\" /* CHILD_REMOVED */ &&\r\n                oldType === \"child_added\" /* CHILD_ADDED */) {\r\n                this.changeMap.delete(childKey);\r\n            }\r\n            else if (type === \"child_removed\" /* CHILD_REMOVED */ &&\r\n                oldType === \"child_changed\" /* CHILD_CHANGED */) {\r\n                this.changeMap.set(childKey, changeChildRemoved(childKey, oldChange.oldSnap));\r\n            }\r\n            else if (type === \"child_changed\" /* CHILD_CHANGED */ &&\r\n                oldType === \"child_added\" /* CHILD_ADDED */) {\r\n                this.changeMap.set(childKey, changeChildAdded(childKey, change.snapshotNode));\r\n            }\r\n            else if (type === \"child_changed\" /* CHILD_CHANGED */ &&\r\n                oldType === \"child_changed\" /* CHILD_CHANGED */) {\r\n                this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.oldSnap));\r\n            }\r\n            else {\r\n                throw assertionError('Illegal combination of changes: ' +\r\n                    change +\r\n                    ' occurred after ' +\r\n                    oldChange);\r\n            }\r\n        }\r\n        else {\r\n            this.changeMap.set(childKey, change);\r\n        }\r\n    }\r\n    getChanges() {\r\n        return Array.from(this.changeMap.values());\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An implementation of CompleteChildSource that never returns any additional children\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nclass NoCompleteChildSource_ {\r\n    getCompleteChild(childKey) {\r\n        return null;\r\n    }\r\n    getChildAfterChild(index, child, reverse) {\r\n        return null;\r\n    }\r\n}\r\n/**\r\n * Singleton instance.\r\n */\r\nconst NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\r\n/**\r\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\r\n * old event caches available to calculate complete children.\r\n */\r\nclass WriteTreeCompleteChildSource {\r\n    constructor(writes_, viewCache_, optCompleteServerCache_ = null) {\r\n        this.writes_ = writes_;\r\n        this.viewCache_ = viewCache_;\r\n        this.optCompleteServerCache_ = optCompleteServerCache_;\r\n    }\r\n    getCompleteChild(childKey) {\r\n        const node = this.viewCache_.eventCache;\r\n        if (node.isCompleteForChild(childKey)) {\r\n            return node.getNode().getImmediateChild(childKey);\r\n        }\r\n        else {\r\n            const serverNode = this.optCompleteServerCache_ != null\r\n                ? new CacheNode(this.optCompleteServerCache_, true, false)\r\n                : this.viewCache_.serverCache;\r\n            return writeTreeRefCalcCompleteChild(this.writes_, childKey, serverNode);\r\n        }\r\n    }\r\n    getChildAfterChild(index, child, reverse) {\r\n        const completeServerData = this.optCompleteServerCache_ != null\r\n            ? this.optCompleteServerCache_\r\n            : viewCacheGetCompleteServerSnap(this.viewCache_);\r\n        const nodes = writeTreeRefCalcIndexedSlice(this.writes_, completeServerData, child, 1, reverse, index);\r\n        if (nodes.length === 0) {\r\n            return null;\r\n        }\r\n        else {\r\n            return nodes[0];\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction newViewProcessor(filter) {\r\n    return { filter };\r\n}\r\nfunction viewProcessorAssertIndexed(viewProcessor, viewCache) {\r\n    assert(viewCache.eventCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Event snap not indexed');\r\n    assert(viewCache.serverCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Server snap not indexed');\r\n}\r\nfunction viewProcessorApplyOperation(viewProcessor, oldViewCache, operation, writesCache, completeCache) {\r\n    const accumulator = new ChildChangeAccumulator();\r\n    let newViewCache, filterServerNode;\r\n    if (operation.type === OperationType.OVERWRITE) {\r\n        const overwrite = operation;\r\n        if (overwrite.source.fromUser) {\r\n            newViewCache = viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, accumulator);\r\n        }\r\n        else {\r\n            assert(overwrite.source.fromServer, 'Unknown source.');\r\n            // We filter the node if it's a tagged update or the node has been previously filtered  and the\r\n            // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\r\n            // again\r\n            filterServerNode =\r\n                overwrite.source.tagged ||\r\n                    (oldViewCache.serverCache.isFiltered() && !pathIsEmpty(overwrite.path));\r\n            newViewCache = viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n    }\r\n    else if (operation.type === OperationType.MERGE) {\r\n        const merge = operation;\r\n        if (merge.source.fromUser) {\r\n            newViewCache = viewProcessorApplyUserMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, accumulator);\r\n        }\r\n        else {\r\n            assert(merge.source.fromServer, 'Unknown source.');\r\n            // We filter the node if it's a tagged update or the node has been previously filtered\r\n            filterServerNode =\r\n                merge.source.tagged || oldViewCache.serverCache.isFiltered();\r\n            newViewCache = viewProcessorApplyServerMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n    }\r\n    else if (operation.type === OperationType.ACK_USER_WRITE) {\r\n        const ackUserWrite = operation;\r\n        if (!ackUserWrite.revert) {\r\n            newViewCache = viewProcessorAckUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, ackUserWrite.affectedTree, writesCache, completeCache, accumulator);\r\n        }\r\n        else {\r\n            newViewCache = viewProcessorRevertUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, writesCache, completeCache, accumulator);\r\n        }\r\n    }\r\n    else if (operation.type === OperationType.LISTEN_COMPLETE) {\r\n        newViewCache = viewProcessorListenComplete(viewProcessor, oldViewCache, operation.path, writesCache, accumulator);\r\n    }\r\n    else {\r\n        throw assertionError('Unknown operation type: ' + operation.type);\r\n    }\r\n    const changes = accumulator.getChanges();\r\n    viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, changes);\r\n    return { viewCache: newViewCache, changes };\r\n}\r\nfunction viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, accumulator) {\r\n    const eventSnap = newViewCache.eventCache;\r\n    if (eventSnap.isFullyInitialized()) {\r\n        const isLeafOrEmpty = eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\r\n        const oldCompleteSnap = viewCacheGetCompleteEventSnap(oldViewCache);\r\n        if (accumulator.length > 0 ||\r\n            !oldViewCache.eventCache.isFullyInitialized() ||\r\n            (isLeafOrEmpty && !eventSnap.getNode().equals(oldCompleteSnap)) ||\r\n            !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())) {\r\n            accumulator.push(changeValue(viewCacheGetCompleteEventSnap(newViewCache)));\r\n        }\r\n    }\r\n}\r\nfunction viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, viewCache, changePath, writesCache, source, accumulator) {\r\n    const oldEventSnap = viewCache.eventCache;\r\n    if (writeTreeRefShadowingWrite(writesCache, changePath) != null) {\r\n        // we have a shadowing write, ignore changes\r\n        return viewCache;\r\n    }\r\n    else {\r\n        let newEventCache, serverNode;\r\n        if (pathIsEmpty(changePath)) {\r\n            // TODO: figure out how this plays with \"sliding ack windows\"\r\n            assert(viewCache.serverCache.isFullyInitialized(), 'If change path is empty, we must have complete server data');\r\n            if (viewCache.serverCache.isFiltered()) {\r\n                // We need to special case this, because we need to only apply writes to complete children, or\r\n                // we might end up raising events for incomplete children. If the server data is filtered deep\r\n                // writes cannot be guaranteed to be complete\r\n                const serverCache = viewCacheGetCompleteServerSnap(viewCache);\r\n                const completeChildren = serverCache instanceof ChildrenNode\r\n                    ? serverCache\r\n                    : ChildrenNode.EMPTY_NODE;\r\n                const completeEventChildren = writeTreeRefCalcCompleteEventChildren(writesCache, completeChildren);\r\n                newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeEventChildren, accumulator);\r\n            }\r\n            else {\r\n                const completeNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\r\n                newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeNode, accumulator);\r\n            }\r\n        }\r\n        else {\r\n            const childKey = pathGetFront(changePath);\r\n            if (childKey === '.priority') {\r\n                assert(pathGetLength(changePath) === 1, \"Can't have a priority with additional path components\");\r\n                const oldEventNode = oldEventSnap.getNode();\r\n                serverNode = viewCache.serverCache.getNode();\r\n                // we might have overwrites for this priority\r\n                const updatedPriority = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventNode, serverNode);\r\n                if (updatedPriority != null) {\r\n                    newEventCache = viewProcessor.filter.updatePriority(oldEventNode, updatedPriority);\r\n                }\r\n                else {\r\n                    // priority didn't change, keep old node\r\n                    newEventCache = oldEventSnap.getNode();\r\n                }\r\n            }\r\n            else {\r\n                const childChangePath = pathPopFront(changePath);\r\n                // update child\r\n                let newEventChild;\r\n                if (oldEventSnap.isCompleteForChild(childKey)) {\r\n                    serverNode = viewCache.serverCache.getNode();\r\n                    const eventChildUpdate = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventSnap.getNode(), serverNode);\r\n                    if (eventChildUpdate != null) {\r\n                        newEventChild = oldEventSnap\r\n                            .getNode()\r\n                            .getImmediateChild(childKey)\r\n                            .updateChild(childChangePath, eventChildUpdate);\r\n                    }\r\n                    else {\r\n                        // Nothing changed, just keep the old child\r\n                        newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);\r\n                    }\r\n                }\r\n                else {\r\n                    newEventChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);\r\n                }\r\n                if (newEventChild != null) {\r\n                    newEventCache = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newEventChild, childChangePath, source, accumulator);\r\n                }\r\n                else {\r\n                    // no complete child available or no change\r\n                    newEventCache = oldEventSnap.getNode();\r\n                }\r\n            }\r\n        }\r\n        return viewCacheUpdateEventSnap(viewCache, newEventCache, oldEventSnap.isFullyInitialized() || pathIsEmpty(changePath), viewProcessor.filter.filtersNodes());\r\n    }\r\n}\r\nfunction viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, filterServerNode, accumulator) {\r\n    const oldServerSnap = oldViewCache.serverCache;\r\n    let newServerCache;\r\n    const serverFilter = filterServerNode\r\n        ? viewProcessor.filter\r\n        : viewProcessor.filter.getIndexedFilter();\r\n    if (pathIsEmpty(changePath)) {\r\n        newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), changedSnap, null);\r\n    }\r\n    else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\r\n        // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\r\n        const newServerNode = oldServerSnap\r\n            .getNode()\r\n            .updateChild(changePath, changedSnap);\r\n        newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), newServerNode, null);\r\n    }\r\n    else {\r\n        const childKey = pathGetFront(changePath);\r\n        if (!oldServerSnap.isCompleteForPath(changePath) &&\r\n            pathGetLength(changePath) > 1) {\r\n            // We don't update incomplete nodes with updates intended for other listeners\r\n            return oldViewCache;\r\n        }\r\n        const childChangePath = pathPopFront(changePath);\r\n        const childNode = oldServerSnap.getNode().getImmediateChild(childKey);\r\n        const newChildNode = childNode.updateChild(childChangePath, changedSnap);\r\n        if (childKey === '.priority') {\r\n            newServerCache = serverFilter.updatePriority(oldServerSnap.getNode(), newChildNode);\r\n        }\r\n        else {\r\n            newServerCache = serverFilter.updateChild(oldServerSnap.getNode(), childKey, newChildNode, childChangePath, NO_COMPLETE_CHILD_SOURCE, null);\r\n        }\r\n    }\r\n    const newViewCache = viewCacheUpdateServerSnap(oldViewCache, newServerCache, oldServerSnap.isFullyInitialized() || pathIsEmpty(changePath), serverFilter.filtersNodes());\r\n    const source = new WriteTreeCompleteChildSource(writesCache, newViewCache, completeCache);\r\n    return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache, changePath, writesCache, source, accumulator);\r\n}\r\nfunction viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, accumulator) {\r\n    const oldEventSnap = oldViewCache.eventCache;\r\n    let newViewCache, newEventCache;\r\n    const source = new WriteTreeCompleteChildSource(writesCache, oldViewCache, completeCache);\r\n    if (pathIsEmpty(changePath)) {\r\n        newEventCache = viewProcessor.filter.updateFullNode(oldViewCache.eventCache.getNode(), changedSnap, accumulator);\r\n        newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventCache, true, viewProcessor.filter.filtersNodes());\r\n    }\r\n    else {\r\n        const childKey = pathGetFront(changePath);\r\n        if (childKey === '.priority') {\r\n            newEventCache = viewProcessor.filter.updatePriority(oldViewCache.eventCache.getNode(), changedSnap);\r\n            newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventCache, oldEventSnap.isFullyInitialized(), oldEventSnap.isFiltered());\r\n        }\r\n        else {\r\n            const childChangePath = pathPopFront(changePath);\r\n            const oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\r\n            let newChild;\r\n            if (pathIsEmpty(childChangePath)) {\r\n                // Child overwrite, we can replace the child\r\n                newChild = changedSnap;\r\n            }\r\n            else {\r\n                const childNode = source.getCompleteChild(childKey);\r\n                if (childNode != null) {\r\n                    if (pathGetBack(childChangePath) === '.priority' &&\r\n                        childNode.getChild(pathParent(childChangePath)).isEmpty()) {\r\n                        // This is a priority update on an empty node. If this node exists on the server, the\r\n                        // server will send down the priority in the update, so ignore for now\r\n                        newChild = childNode;\r\n                    }\r\n                    else {\r\n                        newChild = childNode.updateChild(childChangePath, changedSnap);\r\n                    }\r\n                }\r\n                else {\r\n                    // There is no complete child node available\r\n                    newChild = ChildrenNode.EMPTY_NODE;\r\n                }\r\n            }\r\n            if (!oldChild.equals(newChild)) {\r\n                const newEventSnap = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newChild, childChangePath, source, accumulator);\r\n                newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventSnap, oldEventSnap.isFullyInitialized(), viewProcessor.filter.filtersNodes());\r\n            }\r\n            else {\r\n                newViewCache = oldViewCache;\r\n            }\r\n        }\r\n    }\r\n    return newViewCache;\r\n}\r\nfunction viewProcessorCacheHasChild(viewCache, childKey) {\r\n    return viewCache.eventCache.isCompleteForChild(childKey);\r\n}\r\nfunction viewProcessorApplyUserMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, accumulator) {\r\n    // HACK: In the case of a limit query, there may be some changes that bump things out of the\r\n    // window leaving room for new items.  It's important we process these changes first, so we\r\n    // iterate the changes twice, first processing any that affect items currently in view.\r\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\r\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\r\n    // not the other.\r\n    let curViewCache = viewCache;\r\n    changedChildren.foreach((relativePath, childNode) => {\r\n        const writePath = pathChild(path, relativePath);\r\n        if (viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\r\n            curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\r\n        }\r\n    });\r\n    changedChildren.foreach((relativePath, childNode) => {\r\n        const writePath = pathChild(path, relativePath);\r\n        if (!viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\r\n            curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\r\n        }\r\n    });\r\n    return curViewCache;\r\n}\r\nfunction viewProcessorApplyMerge(viewProcessor, node, merge) {\r\n    merge.foreach((relativePath, childNode) => {\r\n        node = node.updateChild(relativePath, childNode);\r\n    });\r\n    return node;\r\n}\r\nfunction viewProcessorApplyServerMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, filterServerNode, accumulator) {\r\n    // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\r\n    // wait for the complete data update coming soon.\r\n    if (viewCache.serverCache.getNode().isEmpty() &&\r\n        !viewCache.serverCache.isFullyInitialized()) {\r\n        return viewCache;\r\n    }\r\n    // HACK: In the case of a limit query, there may be some changes that bump things out of the\r\n    // window leaving room for new items.  It's important we process these changes first, so we\r\n    // iterate the changes twice, first processing any that affect items currently in view.\r\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\r\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\r\n    // not the other.\r\n    let curViewCache = viewCache;\r\n    let viewMergeTree;\r\n    if (pathIsEmpty(path)) {\r\n        viewMergeTree = changedChildren;\r\n    }\r\n    else {\r\n        viewMergeTree = new ImmutableTree(null).setTree(path, changedChildren);\r\n    }\r\n    const serverNode = viewCache.serverCache.getNode();\r\n    viewMergeTree.children.inorderTraversal((childKey, childTree) => {\r\n        if (serverNode.hasChild(childKey)) {\r\n            const serverChild = viewCache.serverCache\r\n                .getNode()\r\n                .getImmediateChild(childKey);\r\n            const newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childTree);\r\n            curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\r\n        }\r\n    });\r\n    viewMergeTree.children.inorderTraversal((childKey, childMergeTree) => {\r\n        const isUnknownDeepMerge = !viewCache.serverCache.isCompleteForChild(childKey) &&\r\n            childMergeTree.value === undefined;\r\n        if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\r\n            const serverChild = viewCache.serverCache\r\n                .getNode()\r\n                .getImmediateChild(childKey);\r\n            const newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childMergeTree);\r\n            curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\r\n        }\r\n    });\r\n    return curViewCache;\r\n}\r\nfunction viewProcessorAckUserWrite(viewProcessor, viewCache, ackPath, affectedTree, writesCache, completeCache, accumulator) {\r\n    if (writeTreeRefShadowingWrite(writesCache, ackPath) != null) {\r\n        return viewCache;\r\n    }\r\n    // Only filter server node if it is currently filtered\r\n    const filterServerNode = viewCache.serverCache.isFiltered();\r\n    // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\r\n    // now that it won't be shadowed.\r\n    const serverCache = viewCache.serverCache;\r\n    if (affectedTree.value != null) {\r\n        // This is an overwrite.\r\n        if ((pathIsEmpty(ackPath) && serverCache.isFullyInitialized()) ||\r\n            serverCache.isCompleteForPath(ackPath)) {\r\n            return viewProcessorApplyServerOverwrite(viewProcessor, viewCache, ackPath, serverCache.getNode().getChild(ackPath), writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n        else if (pathIsEmpty(ackPath)) {\r\n            // This is a goofy edge case where we are acking data at this location but don't have full data.  We\r\n            // should just re-apply whatever we have in our cache as a merge.\r\n            let changedChildren = new ImmutableTree(null);\r\n            serverCache.getNode().forEachChild(KEY_INDEX, (name, node) => {\r\n                changedChildren = changedChildren.set(new Path(name), node);\r\n            });\r\n            return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren, writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n        else {\r\n            return viewCache;\r\n        }\r\n    }\r\n    else {\r\n        // This is a merge.\r\n        let changedChildren = new ImmutableTree(null);\r\n        affectedTree.foreach((mergePath, value) => {\r\n            const serverCachePath = pathChild(ackPath, mergePath);\r\n            if (serverCache.isCompleteForPath(serverCachePath)) {\r\n                changedChildren = changedChildren.set(mergePath, serverCache.getNode().getChild(serverCachePath));\r\n            }\r\n        });\r\n        return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren, writesCache, completeCache, filterServerNode, accumulator);\r\n    }\r\n}\r\nfunction viewProcessorListenComplete(viewProcessor, viewCache, path, writesCache, accumulator) {\r\n    const oldServerNode = viewCache.serverCache;\r\n    const newViewCache = viewCacheUpdateServerSnap(viewCache, oldServerNode.getNode(), oldServerNode.isFullyInitialized() || pathIsEmpty(path), oldServerNode.isFiltered());\r\n    return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache, path, writesCache, NO_COMPLETE_CHILD_SOURCE, accumulator);\r\n}\r\nfunction viewProcessorRevertUserWrite(viewProcessor, viewCache, path, writesCache, completeServerCache, accumulator) {\r\n    let complete;\r\n    if (writeTreeRefShadowingWrite(writesCache, path) != null) {\r\n        return viewCache;\r\n    }\r\n    else {\r\n        const source = new WriteTreeCompleteChildSource(writesCache, viewCache, completeServerCache);\r\n        const oldEventCache = viewCache.eventCache.getNode();\r\n        let newEventCache;\r\n        if (pathIsEmpty(path) || pathGetFront(path) === '.priority') {\r\n            let newNode;\r\n            if (viewCache.serverCache.isFullyInitialized()) {\r\n                newNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\r\n            }\r\n            else {\r\n                const serverChildren = viewCache.serverCache.getNode();\r\n                assert(serverChildren instanceof ChildrenNode, 'serverChildren would be complete if leaf node');\r\n                newNode = writeTreeRefCalcCompleteEventChildren(writesCache, serverChildren);\r\n            }\r\n            newNode = newNode;\r\n            newEventCache = viewProcessor.filter.updateFullNode(oldEventCache, newNode, accumulator);\r\n        }\r\n        else {\r\n            const childKey = pathGetFront(path);\r\n            let newChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);\r\n            if (newChild == null &&\r\n                viewCache.serverCache.isCompleteForChild(childKey)) {\r\n                newChild = oldEventCache.getImmediateChild(childKey);\r\n            }\r\n            if (newChild != null) {\r\n                newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, newChild, pathPopFront(path), source, accumulator);\r\n            }\r\n            else if (viewCache.eventCache.getNode().hasChild(childKey)) {\r\n                // No complete child available, delete the existing one, if any\r\n                newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, ChildrenNode.EMPTY_NODE, pathPopFront(path), source, accumulator);\r\n            }\r\n            else {\r\n                newEventCache = oldEventCache;\r\n            }\r\n            if (newEventCache.isEmpty() &&\r\n                viewCache.serverCache.isFullyInitialized()) {\r\n                // We might have reverted all child writes. Maybe the old event was a leaf node\r\n                complete = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\r\n                if (complete.isLeafNode()) {\r\n                    newEventCache = viewProcessor.filter.updateFullNode(newEventCache, complete, accumulator);\r\n                }\r\n            }\r\n        }\r\n        complete =\r\n            viewCache.serverCache.isFullyInitialized() ||\r\n                writeTreeRefShadowingWrite(writesCache, newEmptyPath()) != null;\r\n        return viewCacheUpdateEventSnap(viewCache, newEventCache, complete, viewProcessor.filter.filtersNodes());\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A view represents a specific location and query that has 1 or more event registrations.\r\n *\r\n * It does several things:\r\n *  - Maintains the list of event registrations for this location/query.\r\n *  - Maintains a cache of the data visible for this location/query.\r\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\r\n *    registrations returns the set of events to be raised.\r\n */\r\nclass View {\r\n    constructor(query_, initialViewCache) {\r\n        this.query_ = query_;\r\n        this.eventRegistrations_ = [];\r\n        const params = this.query_._queryParams;\r\n        const indexFilter = new IndexedFilter(params.getIndex());\r\n        const filter = queryParamsGetNodeFilter(params);\r\n        this.processor_ = newViewProcessor(filter);\r\n        const initialServerCache = initialViewCache.serverCache;\r\n        const initialEventCache = initialViewCache.eventCache;\r\n        // Don't filter server node with other filter than index, wait for tagged listen\r\n        const serverSnap = indexFilter.updateFullNode(ChildrenNode.EMPTY_NODE, initialServerCache.getNode(), null);\r\n        const eventSnap = filter.updateFullNode(ChildrenNode.EMPTY_NODE, initialEventCache.getNode(), null);\r\n        const newServerCache = new CacheNode(serverSnap, initialServerCache.isFullyInitialized(), indexFilter.filtersNodes());\r\n        const newEventCache = new CacheNode(eventSnap, initialEventCache.isFullyInitialized(), filter.filtersNodes());\r\n        this.viewCache_ = newViewCache(newEventCache, newServerCache);\r\n        this.eventGenerator_ = new EventGenerator(this.query_);\r\n    }\r\n    get query() {\r\n        return this.query_;\r\n    }\r\n}\r\nfunction viewGetServerCache(view) {\r\n    return view.viewCache_.serverCache.getNode();\r\n}\r\nfunction viewGetCompleteNode(view) {\r\n    return viewCacheGetCompleteEventSnap(view.viewCache_);\r\n}\r\nfunction viewGetCompleteServerCache(view, path) {\r\n    const cache = viewCacheGetCompleteServerSnap(view.viewCache_);\r\n    if (cache) {\r\n        // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\r\n        // we need to see if it contains the child we're interested in.\r\n        if (view.query._queryParams.loadsAllData() ||\r\n            (!pathIsEmpty(path) &&\r\n                !cache.getImmediateChild(pathGetFront(path)).isEmpty())) {\r\n            return cache.getChild(path);\r\n        }\r\n    }\r\n    return null;\r\n}\r\nfunction viewIsEmpty(view) {\r\n    return view.eventRegistrations_.length === 0;\r\n}\r\nfunction viewAddEventRegistration(view, eventRegistration) {\r\n    view.eventRegistrations_.push(eventRegistration);\r\n}\r\n/**\r\n * @param eventRegistration - If null, remove all callbacks.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns Cancel events, if cancelError was provided.\r\n */\r\nfunction viewRemoveEventRegistration(view, eventRegistration, cancelError) {\r\n    const cancelEvents = [];\r\n    if (cancelError) {\r\n        assert(eventRegistration == null, 'A cancel should cancel all event registrations.');\r\n        const path = view.query._path;\r\n        view.eventRegistrations_.forEach(registration => {\r\n            const maybeEvent = registration.createCancelEvent(cancelError, path);\r\n            if (maybeEvent) {\r\n                cancelEvents.push(maybeEvent);\r\n            }\r\n        });\r\n    }\r\n    if (eventRegistration) {\r\n        let remaining = [];\r\n        for (let i = 0; i < view.eventRegistrations_.length; ++i) {\r\n            const existing = view.eventRegistrations_[i];\r\n            if (!existing.matches(eventRegistration)) {\r\n                remaining.push(existing);\r\n            }\r\n            else if (eventRegistration.hasAnyCallback()) {\r\n                // We're removing just this one\r\n                remaining = remaining.concat(view.eventRegistrations_.slice(i + 1));\r\n                break;\r\n            }\r\n        }\r\n        view.eventRegistrations_ = remaining;\r\n    }\r\n    else {\r\n        view.eventRegistrations_ = [];\r\n    }\r\n    return cancelEvents;\r\n}\r\n/**\r\n * Applies the given Operation, updates our cache, and returns the appropriate events.\r\n */\r\nfunction viewApplyOperation(view, operation, writesCache, completeServerCache) {\r\n    if (operation.type === OperationType.MERGE &&\r\n        operation.source.queryId !== null) {\r\n        assert(viewCacheGetCompleteServerSnap(view.viewCache_), 'We should always have a full cache before handling merges');\r\n        assert(viewCacheGetCompleteEventSnap(view.viewCache_), 'Missing event cache, even though we have a server cache');\r\n    }\r\n    const oldViewCache = view.viewCache_;\r\n    const result = viewProcessorApplyOperation(view.processor_, oldViewCache, operation, writesCache, completeServerCache);\r\n    viewProcessorAssertIndexed(view.processor_, result.viewCache);\r\n    assert(result.viewCache.serverCache.isFullyInitialized() ||\r\n        !oldViewCache.serverCache.isFullyInitialized(), 'Once a server snap is complete, it should never go back');\r\n    view.viewCache_ = result.viewCache;\r\n    return viewGenerateEventsForChanges_(view, result.changes, result.viewCache.eventCache.getNode(), null);\r\n}\r\nfunction viewGetInitialEvents(view, registration) {\r\n    const eventSnap = view.viewCache_.eventCache;\r\n    const initialChanges = [];\r\n    if (!eventSnap.getNode().isLeafNode()) {\r\n        const eventNode = eventSnap.getNode();\r\n        eventNode.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n            initialChanges.push(changeChildAdded(key, childNode));\r\n        });\r\n    }\r\n    if (eventSnap.isFullyInitialized()) {\r\n        initialChanges.push(changeValue(eventSnap.getNode()));\r\n    }\r\n    return viewGenerateEventsForChanges_(view, initialChanges, eventSnap.getNode(), registration);\r\n}\r\nfunction viewGenerateEventsForChanges_(view, changes, eventCache, eventRegistration) {\r\n    const registrations = eventRegistration\r\n        ? [eventRegistration]\r\n        : view.eventRegistrations_;\r\n    return eventGeneratorGenerateEventsForChanges(view.eventGenerator_, changes, eventCache, registrations);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet referenceConstructor$1;\r\n/**\r\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\r\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\r\n * and user writes (set, transaction, update).\r\n *\r\n * It's responsible for:\r\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\r\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\r\n *    applyUserOverwrite, etc.)\r\n */\r\nclass SyncPoint {\r\n    constructor() {\r\n        /**\r\n         * The Views being tracked at this location in the tree, stored as a map where the key is a\r\n         * queryId and the value is the View for that query.\r\n         *\r\n         * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\r\n         */\r\n        this.views = new Map();\r\n    }\r\n}\r\nfunction syncPointSetReferenceConstructor(val) {\r\n    assert(!referenceConstructor$1, '__referenceConstructor has already been defined');\r\n    referenceConstructor$1 = val;\r\n}\r\nfunction syncPointGetReferenceConstructor() {\r\n    assert(referenceConstructor$1, 'Reference.ts has not been loaded');\r\n    return referenceConstructor$1;\r\n}\r\nfunction syncPointIsEmpty(syncPoint) {\r\n    return syncPoint.views.size === 0;\r\n}\r\nfunction syncPointApplyOperation(syncPoint, operation, writesCache, optCompleteServerCache) {\r\n    const queryId = operation.source.queryId;\r\n    if (queryId !== null) {\r\n        const view = syncPoint.views.get(queryId);\r\n        assert(view != null, 'SyncTree gave us an op for an invalid query.');\r\n        return viewApplyOperation(view, operation, writesCache, optCompleteServerCache);\r\n    }\r\n    else {\r\n        let events = [];\r\n        for (const view of syncPoint.views.values()) {\r\n            events = events.concat(viewApplyOperation(view, operation, writesCache, optCompleteServerCache));\r\n        }\r\n        return events;\r\n    }\r\n}\r\n/**\r\n * Get a view for the specified query.\r\n *\r\n * @param query - The query to return a view for\r\n * @param writesCache\r\n * @param serverCache\r\n * @param serverCacheComplete\r\n * @returns Events to raise.\r\n */\r\nfunction syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete) {\r\n    const queryId = query._queryIdentifier;\r\n    const view = syncPoint.views.get(queryId);\r\n    if (!view) {\r\n        // TODO: make writesCache take flag for complete server node\r\n        let eventCache = writeTreeRefCalcCompleteEventCache(writesCache, serverCacheComplete ? serverCache : null);\r\n        let eventCacheComplete = false;\r\n        if (eventCache) {\r\n            eventCacheComplete = true;\r\n        }\r\n        else if (serverCache instanceof ChildrenNode) {\r\n            eventCache = writeTreeRefCalcCompleteEventChildren(writesCache, serverCache);\r\n            eventCacheComplete = false;\r\n        }\r\n        else {\r\n            eventCache = ChildrenNode.EMPTY_NODE;\r\n            eventCacheComplete = false;\r\n        }\r\n        const viewCache = newViewCache(new CacheNode(eventCache, eventCacheComplete, false), new CacheNode(serverCache, serverCacheComplete, false));\r\n        return new View(query, viewCache);\r\n    }\r\n    return view;\r\n}\r\n/**\r\n * Add an event callback for the specified query.\r\n *\r\n * @param query\r\n * @param eventRegistration\r\n * @param writesCache\r\n * @param serverCache - Complete server cache, if we have it.\r\n * @param serverCacheComplete\r\n * @returns Events to raise.\r\n */\r\nfunction syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete) {\r\n    const view = syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete);\r\n    if (!syncPoint.views.has(query._queryIdentifier)) {\r\n        syncPoint.views.set(query._queryIdentifier, view);\r\n    }\r\n    // This is guaranteed to exist now, we just created anything that was missing\r\n    viewAddEventRegistration(view, eventRegistration);\r\n    return viewGetInitialEvents(view, eventRegistration);\r\n}\r\n/**\r\n * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\r\n *\r\n * If query is the default query, we'll check all views for the specified eventRegistration.\r\n * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\r\n *\r\n * @param eventRegistration - If null, remove all callbacks.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns removed queries and any cancel events\r\n */\r\nfunction syncPointRemoveEventRegistration(syncPoint, query, eventRegistration, cancelError) {\r\n    const queryId = query._queryIdentifier;\r\n    const removed = [];\r\n    let cancelEvents = [];\r\n    const hadCompleteView = syncPointHasCompleteView(syncPoint);\r\n    if (queryId === 'default') {\r\n        // When you do ref.off(...), we search all views for the registration to remove.\r\n        for (const [viewQueryId, view] of syncPoint.views.entries()) {\r\n            cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));\r\n            if (viewIsEmpty(view)) {\r\n                syncPoint.views.delete(viewQueryId);\r\n                // We'll deal with complete views later.\r\n                if (!view.query._queryParams.loadsAllData()) {\r\n                    removed.push(view.query);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        // remove the callback from the specific view.\r\n        const view = syncPoint.views.get(queryId);\r\n        if (view) {\r\n            cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));\r\n            if (viewIsEmpty(view)) {\r\n                syncPoint.views.delete(queryId);\r\n                // We'll deal with complete views later.\r\n                if (!view.query._queryParams.loadsAllData()) {\r\n                    removed.push(view.query);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (hadCompleteView && !syncPointHasCompleteView(syncPoint)) {\r\n        // We removed our last complete view.\r\n        removed.push(new (syncPointGetReferenceConstructor())(query._repo, query._path));\r\n    }\r\n    return { removed, events: cancelEvents };\r\n}\r\nfunction syncPointGetQueryViews(syncPoint) {\r\n    const result = [];\r\n    for (const view of syncPoint.views.values()) {\r\n        if (!view.query._queryParams.loadsAllData()) {\r\n            result.push(view);\r\n        }\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * @param path - The path to the desired complete snapshot\r\n * @returns A complete cache, if it exists\r\n */\r\nfunction syncPointGetCompleteServerCache(syncPoint, path) {\r\n    let serverCache = null;\r\n    for (const view of syncPoint.views.values()) {\r\n        serverCache = serverCache || viewGetCompleteServerCache(view, path);\r\n    }\r\n    return serverCache;\r\n}\r\nfunction syncPointViewForQuery(syncPoint, query) {\r\n    const params = query._queryParams;\r\n    if (params.loadsAllData()) {\r\n        return syncPointGetCompleteView(syncPoint);\r\n    }\r\n    else {\r\n        const queryId = query._queryIdentifier;\r\n        return syncPoint.views.get(queryId);\r\n    }\r\n}\r\nfunction syncPointViewExistsForQuery(syncPoint, query) {\r\n    return syncPointViewForQuery(syncPoint, query) != null;\r\n}\r\nfunction syncPointHasCompleteView(syncPoint) {\r\n    return syncPointGetCompleteView(syncPoint) != null;\r\n}\r\nfunction syncPointGetCompleteView(syncPoint) {\r\n    for (const view of syncPoint.views.values()) {\r\n        if (view.query._queryParams.loadsAllData()) {\r\n            return view;\r\n        }\r\n    }\r\n    return null;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet referenceConstructor;\r\nfunction syncTreeSetReferenceConstructor(val) {\r\n    assert(!referenceConstructor, '__referenceConstructor has already been defined');\r\n    referenceConstructor = val;\r\n}\r\nfunction syncTreeGetReferenceConstructor() {\r\n    assert(referenceConstructor, 'Reference.ts has not been loaded');\r\n    return referenceConstructor;\r\n}\r\n/**\r\n * Static tracker for next query tag.\r\n */\r\nlet syncTreeNextQueryTag_ = 1;\r\n/**\r\n * SyncTree is the central class for managing event callback registration, data caching, views\r\n * (query processing), and event generation.  There are typically two SyncTree instances for\r\n * each Repo, one for the normal Firebase data, and one for the .info data.\r\n *\r\n * It has a number of responsibilities, including:\r\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\r\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\r\n *    (applyUserOverwrite(), applyUserMerge()).\r\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\r\n *    applyServerMerge()).\r\n *  - Generating user-facing events for server and user changes (all of the apply* methods\r\n *    return the set of events that need to be raised as a result).\r\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\r\n *    to the correct set of paths and queries to satisfy the current set of user event\r\n *    callbacks (listens are started/stopped using the provided listenProvider).\r\n *\r\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\r\n * events are returned to the caller rather than raised synchronously.\r\n *\r\n */\r\nclass SyncTree {\r\n    /**\r\n     * @param listenProvider_ - Used by SyncTree to start / stop listening\r\n     *   to server data.\r\n     */\r\n    constructor(listenProvider_) {\r\n        this.listenProvider_ = listenProvider_;\r\n        /**\r\n         * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\r\n         */\r\n        this.syncPointTree_ = new ImmutableTree(null);\r\n        /**\r\n         * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\r\n         */\r\n        this.pendingWriteTree_ = newWriteTree();\r\n        this.tagToQueryMap = new Map();\r\n        this.queryToTagMap = new Map();\r\n    }\r\n}\r\n/**\r\n * Apply the data changes for a user-generated set() or transaction() call.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyUserOverwrite(syncTree, path, newData, writeId, visible) {\r\n    // Record pending write.\r\n    writeTreeAddOverwrite(syncTree.pendingWriteTree_, path, newData, writeId, visible);\r\n    if (!visible) {\r\n        return [];\r\n    }\r\n    else {\r\n        return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceUser(), path, newData));\r\n    }\r\n}\r\n/**\r\n * Apply the data from a user-generated update() call\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyUserMerge(syncTree, path, changedChildren, writeId) {\r\n    // Record pending merge.\r\n    writeTreeAddMerge(syncTree.pendingWriteTree_, path, changedChildren, writeId);\r\n    const changeTree = ImmutableTree.fromObject(changedChildren);\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceUser(), path, changeTree));\r\n}\r\n/**\r\n * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\r\n *\r\n * @param revert - True if the given write failed and needs to be reverted\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeAckUserWrite(syncTree, writeId, revert = false) {\r\n    const write = writeTreeGetWrite(syncTree.pendingWriteTree_, writeId);\r\n    const needToReevaluate = writeTreeRemoveWrite(syncTree.pendingWriteTree_, writeId);\r\n    if (!needToReevaluate) {\r\n        return [];\r\n    }\r\n    else {\r\n        let affectedTree = new ImmutableTree(null);\r\n        if (write.snap != null) {\r\n            // overwrite\r\n            affectedTree = affectedTree.set(newEmptyPath(), true);\r\n        }\r\n        else {\r\n            each(write.children, (pathString) => {\r\n                affectedTree = affectedTree.set(new Path(pathString), true);\r\n            });\r\n        }\r\n        return syncTreeApplyOperationToSyncPoints_(syncTree, new AckUserWrite(write.path, affectedTree, revert));\r\n    }\r\n}\r\n/**\r\n * Apply new server data for the specified path..\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyServerOverwrite(syncTree, path, newData) {\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceServer(), path, newData));\r\n}\r\n/**\r\n * Apply new server data to be merged in at the specified path.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyServerMerge(syncTree, path, changedChildren) {\r\n    const changeTree = ImmutableTree.fromObject(changedChildren);\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceServer(), path, changeTree));\r\n}\r\n/**\r\n * Apply a listen complete for a query\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyListenComplete(syncTree, path) {\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new ListenComplete(newOperationSourceServer(), path));\r\n}\r\n/**\r\n * Apply a listen complete for a tagged query\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyTaggedListenComplete(syncTree, path, tag) {\r\n    const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\r\n    if (queryKey) {\r\n        const r = syncTreeParseQueryKey_(queryKey);\r\n        const queryPath = r.path, queryId = r.queryId;\r\n        const relativePath = newRelativePath(queryPath, path);\r\n        const op = new ListenComplete(newOperationSourceServerTaggedQuery(queryId), relativePath);\r\n        return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\r\n    }\r\n    else {\r\n        // We've already removed the query. No big deal, ignore the update\r\n        return [];\r\n    }\r\n}\r\n/**\r\n * Remove event callback(s).\r\n *\r\n * If query is the default query, we'll check all queries for the specified eventRegistration.\r\n * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\r\n *\r\n * @param eventRegistration - If null, all callbacks are removed.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns Cancel events, if cancelError was provided.\r\n */\r\nfunction syncTreeRemoveEventRegistration(syncTree, query, eventRegistration, cancelError) {\r\n    // Find the syncPoint first. Then deal with whether or not it has matching listeners\r\n    const path = query._path;\r\n    const maybeSyncPoint = syncTree.syncPointTree_.get(path);\r\n    let cancelEvents = [];\r\n    // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\r\n    // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\r\n    // not loadsAllData().\r\n    if (maybeSyncPoint &&\r\n        (query._queryIdentifier === 'default' ||\r\n            syncPointViewExistsForQuery(maybeSyncPoint, query))) {\r\n        const removedAndEvents = syncPointRemoveEventRegistration(maybeSyncPoint, query, eventRegistration, cancelError);\r\n        if (syncPointIsEmpty(maybeSyncPoint)) {\r\n            syncTree.syncPointTree_ = syncTree.syncPointTree_.remove(path);\r\n        }\r\n        const removed = removedAndEvents.removed;\r\n        cancelEvents = removedAndEvents.events;\r\n        // We may have just removed one of many listeners and can short-circuit this whole process\r\n        // We may also not have removed a default listener, in which case all of the descendant listeners should already be\r\n        // properly set up.\r\n        //\r\n        // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\r\n        // queryId === 'default'\r\n        const removingDefault = -1 !==\r\n            removed.findIndex(query => {\r\n                return query._queryParams.loadsAllData();\r\n            });\r\n        const covered = syncTree.syncPointTree_.findOnPath(path, (relativePath, parentSyncPoint) => syncPointHasCompleteView(parentSyncPoint));\r\n        if (removingDefault && !covered) {\r\n            const subtree = syncTree.syncPointTree_.subtree(path);\r\n            // There are potentially child listeners. Determine what if any listens we need to send before executing the\r\n            // removal\r\n            if (!subtree.isEmpty()) {\r\n                // We need to fold over our subtree and collect the listeners to send\r\n                const newViews = syncTreeCollectDistinctViewsForSubTree_(subtree);\r\n                // Ok, we've collected all the listens we need. Set them up.\r\n                for (let i = 0; i < newViews.length; ++i) {\r\n                    const view = newViews[i], newQuery = view.query;\r\n                    const listener = syncTreeCreateListenerForView_(syncTree, view);\r\n                    syncTree.listenProvider_.startListening(syncTreeQueryForListening_(newQuery), syncTreeTagForQuery_(syncTree, newQuery), listener.hashFn, listener.onComplete);\r\n                }\r\n            }\r\n        }\r\n        // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\r\n        // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\r\n        // Also, note that if we have a cancelError, it's already been removed at the provider level.\r\n        if (!covered && removed.length > 0 && !cancelError) {\r\n            // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\r\n            // default. Otherwise, we need to iterate through and cancel each individual query\r\n            if (removingDefault) {\r\n                // We don't tag default listeners\r\n                const defaultTag = null;\r\n                syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(query), defaultTag);\r\n            }\r\n            else {\r\n                removed.forEach((queryToRemove) => {\r\n                    const tagToRemove = syncTree.queryToTagMap.get(syncTreeMakeQueryKey_(queryToRemove));\r\n                    syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToRemove), tagToRemove);\r\n                });\r\n            }\r\n        }\r\n        // Now, clear all of the tags we're tracking for the removed listens\r\n        syncTreeRemoveTags_(syncTree, removed);\r\n    }\r\n    return cancelEvents;\r\n}\r\n/**\r\n * Apply new server data for the specified tagged query.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyTaggedQueryOverwrite(syncTree, path, snap, tag) {\r\n    const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\r\n    if (queryKey != null) {\r\n        const r = syncTreeParseQueryKey_(queryKey);\r\n        const queryPath = r.path, queryId = r.queryId;\r\n        const relativePath = newRelativePath(queryPath, path);\r\n        const op = new Overwrite(newOperationSourceServerTaggedQuery(queryId), relativePath, snap);\r\n        return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\r\n    }\r\n    else {\r\n        // Query must have been removed already\r\n        return [];\r\n    }\r\n}\r\n/**\r\n * Apply server data to be merged in for the specified tagged query.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyTaggedQueryMerge(syncTree, path, changedChildren, tag) {\r\n    const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\r\n    if (queryKey) {\r\n        const r = syncTreeParseQueryKey_(queryKey);\r\n        const queryPath = r.path, queryId = r.queryId;\r\n        const relativePath = newRelativePath(queryPath, path);\r\n        const changeTree = ImmutableTree.fromObject(changedChildren);\r\n        const op = new Merge(newOperationSourceServerTaggedQuery(queryId), relativePath, changeTree);\r\n        return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\r\n    }\r\n    else {\r\n        // We've already removed the query. No big deal, ignore the update\r\n        return [];\r\n    }\r\n}\r\n/**\r\n * Add an event callback for the specified query.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeAddEventRegistration(syncTree, query, eventRegistration) {\r\n    const path = query._path;\r\n    let serverCache = null;\r\n    let foundAncestorDefaultView = false;\r\n    // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\r\n    // Consider optimizing this once there's a better understanding of what actual behavior will be.\r\n    syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\r\n        const relativePath = newRelativePath(pathToSyncPoint, path);\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(sp, relativePath);\r\n        foundAncestorDefaultView =\r\n            foundAncestorDefaultView || syncPointHasCompleteView(sp);\r\n    });\r\n    let syncPoint = syncTree.syncPointTree_.get(path);\r\n    if (!syncPoint) {\r\n        syncPoint = new SyncPoint();\r\n        syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\r\n    }\r\n    else {\r\n        foundAncestorDefaultView =\r\n            foundAncestorDefaultView || syncPointHasCompleteView(syncPoint);\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n    }\r\n    let serverCacheComplete;\r\n    if (serverCache != null) {\r\n        serverCacheComplete = true;\r\n    }\r\n    else {\r\n        serverCacheComplete = false;\r\n        serverCache = ChildrenNode.EMPTY_NODE;\r\n        const subtree = syncTree.syncPointTree_.subtree(path);\r\n        subtree.foreachChild((childName, childSyncPoint) => {\r\n            const completeCache = syncPointGetCompleteServerCache(childSyncPoint, newEmptyPath());\r\n            if (completeCache) {\r\n                serverCache = serverCache.updateImmediateChild(childName, completeCache);\r\n            }\r\n        });\r\n    }\r\n    const viewAlreadyExists = syncPointViewExistsForQuery(syncPoint, query);\r\n    if (!viewAlreadyExists && !query._queryParams.loadsAllData()) {\r\n        // We need to track a tag for this query\r\n        const queryKey = syncTreeMakeQueryKey_(query);\r\n        assert(!syncTree.queryToTagMap.has(queryKey), 'View does not exist, but we have a tag');\r\n        const tag = syncTreeGetNextQueryTag_();\r\n        syncTree.queryToTagMap.set(queryKey, tag);\r\n        syncTree.tagToQueryMap.set(tag, queryKey);\r\n    }\r\n    const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, path);\r\n    let events = syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete);\r\n    if (!viewAlreadyExists && !foundAncestorDefaultView) {\r\n        const view = syncPointViewForQuery(syncPoint, query);\r\n        events = events.concat(syncTreeSetupListener_(syncTree, query, view));\r\n    }\r\n    return events;\r\n}\r\n/**\r\n * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a\r\n * listener above it, we will get a false \"null\". This shouldn't be a problem because transactions will always\r\n * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->\r\n *     <incremented total> as the write is applied locally and then acknowledged at the server.\r\n *\r\n * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\r\n *\r\n * @param path - The path to the data we want\r\n * @param writeIdsToExclude - A specific set to be excluded\r\n */\r\nfunction syncTreeCalcCompleteEventCache(syncTree, path, writeIdsToExclude) {\r\n    const includeHiddenSets = true;\r\n    const writeTree = syncTree.pendingWriteTree_;\r\n    const serverCache = syncTree.syncPointTree_.findOnPath(path, (pathSoFar, syncPoint) => {\r\n        const relativePath = newRelativePath(pathSoFar, path);\r\n        const serverCache = syncPointGetCompleteServerCache(syncPoint, relativePath);\r\n        if (serverCache) {\r\n            return serverCache;\r\n        }\r\n    });\r\n    return writeTreeCalcCompleteEventCache(writeTree, path, serverCache, writeIdsToExclude, includeHiddenSets);\r\n}\r\nfunction syncTreeGetServerValue(syncTree, query) {\r\n    const path = query._path;\r\n    let serverCache = null;\r\n    // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\r\n    // Consider optimizing this once there's a better understanding of what actual behavior will be.\r\n    syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\r\n        const relativePath = newRelativePath(pathToSyncPoint, path);\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(sp, relativePath);\r\n    });\r\n    let syncPoint = syncTree.syncPointTree_.get(path);\r\n    if (!syncPoint) {\r\n        syncPoint = new SyncPoint();\r\n        syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\r\n    }\r\n    else {\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n    }\r\n    const serverCacheComplete = serverCache != null;\r\n    const serverCacheNode = serverCacheComplete\r\n        ? new CacheNode(serverCache, true, false)\r\n        : null;\r\n    const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, query._path);\r\n    const view = syncPointGetView(syncPoint, query, writesCache, serverCacheComplete ? serverCacheNode.getNode() : ChildrenNode.EMPTY_NODE, serverCacheComplete);\r\n    return viewGetCompleteNode(view);\r\n}\r\n/**\r\n * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\r\n *\r\n * NOTES:\r\n * - Descendant SyncPoints will be visited first (since we raise events depth-first).\r\n *\r\n * - We call applyOperation() on each SyncPoint passing three things:\r\n *   1. A version of the Operation that has been made relative to the SyncPoint location.\r\n *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\r\n *   3. A snapshot Node with cached server data, if we have it.\r\n *\r\n * - We concatenate all of the events returned by each SyncPoint and return the result.\r\n */\r\nfunction syncTreeApplyOperationToSyncPoints_(syncTree, operation) {\r\n    return syncTreeApplyOperationHelper_(operation, syncTree.syncPointTree_, \r\n    /*serverCache=*/ null, writeTreeChildWrites(syncTree.pendingWriteTree_, newEmptyPath()));\r\n}\r\n/**\r\n * Recursive helper for applyOperationToSyncPoints_\r\n */\r\nfunction syncTreeApplyOperationHelper_(operation, syncPointTree, serverCache, writesCache) {\r\n    if (pathIsEmpty(operation.path)) {\r\n        return syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache);\r\n    }\r\n    else {\r\n        const syncPoint = syncPointTree.get(newEmptyPath());\r\n        // If we don't have cached server data, see if we can get it from this SyncPoint.\r\n        if (serverCache == null && syncPoint != null) {\r\n            serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n        }\r\n        let events = [];\r\n        const childName = pathGetFront(operation.path);\r\n        const childOperation = operation.operationForChild(childName);\r\n        const childTree = syncPointTree.children.get(childName);\r\n        if (childTree && childOperation) {\r\n            const childServerCache = serverCache\r\n                ? serverCache.getImmediateChild(childName)\r\n                : null;\r\n            const childWritesCache = writeTreeRefChild(writesCache, childName);\r\n            events = events.concat(syncTreeApplyOperationHelper_(childOperation, childTree, childServerCache, childWritesCache));\r\n        }\r\n        if (syncPoint) {\r\n            events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));\r\n        }\r\n        return events;\r\n    }\r\n}\r\n/**\r\n * Recursive helper for applyOperationToSyncPoints_\r\n */\r\nfunction syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache) {\r\n    const syncPoint = syncPointTree.get(newEmptyPath());\r\n    // If we don't have cached server data, see if we can get it from this SyncPoint.\r\n    if (serverCache == null && syncPoint != null) {\r\n        serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n    }\r\n    let events = [];\r\n    syncPointTree.children.inorderTraversal((childName, childTree) => {\r\n        const childServerCache = serverCache\r\n            ? serverCache.getImmediateChild(childName)\r\n            : null;\r\n        const childWritesCache = writeTreeRefChild(writesCache, childName);\r\n        const childOperation = operation.operationForChild(childName);\r\n        if (childOperation) {\r\n            events = events.concat(syncTreeApplyOperationDescendantsHelper_(childOperation, childTree, childServerCache, childWritesCache));\r\n        }\r\n    });\r\n    if (syncPoint) {\r\n        events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));\r\n    }\r\n    return events;\r\n}\r\nfunction syncTreeCreateListenerForView_(syncTree, view) {\r\n    const query = view.query;\r\n    const tag = syncTreeTagForQuery_(syncTree, query);\r\n    return {\r\n        hashFn: () => {\r\n            const cache = viewGetServerCache(view) || ChildrenNode.EMPTY_NODE;\r\n            return cache.hash();\r\n        },\r\n        onComplete: (status) => {\r\n            if (status === 'ok') {\r\n                if (tag) {\r\n                    return syncTreeApplyTaggedListenComplete(syncTree, query._path, tag);\r\n                }\r\n                else {\r\n                    return syncTreeApplyListenComplete(syncTree, query._path);\r\n                }\r\n            }\r\n            else {\r\n                // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\r\n                // Note that this may need to be scoped to just this listener if we change permissions on filtered children\r\n                const error = errorForServerCode(status, query);\r\n                return syncTreeRemoveEventRegistration(syncTree, query, \r\n                /*eventRegistration*/ null, error);\r\n            }\r\n        }\r\n    };\r\n}\r\n/**\r\n * Return the tag associated with the given query.\r\n */\r\nfunction syncTreeTagForQuery_(syncTree, query) {\r\n    const queryKey = syncTreeMakeQueryKey_(query);\r\n    return syncTree.queryToTagMap.get(queryKey);\r\n}\r\n/**\r\n * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\r\n */\r\nfunction syncTreeMakeQueryKey_(query) {\r\n    return query._path.toString() + '$' + query._queryIdentifier;\r\n}\r\n/**\r\n * Return the query associated with the given tag, if we have one\r\n */\r\nfunction syncTreeQueryKeyForTag_(syncTree, tag) {\r\n    return syncTree.tagToQueryMap.get(tag);\r\n}\r\n/**\r\n * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\r\n */\r\nfunction syncTreeParseQueryKey_(queryKey) {\r\n    const splitIndex = queryKey.indexOf('$');\r\n    assert(splitIndex !== -1 && splitIndex < queryKey.length - 1, 'Bad queryKey.');\r\n    return {\r\n        queryId: queryKey.substr(splitIndex + 1),\r\n        path: new Path(queryKey.substr(0, splitIndex))\r\n    };\r\n}\r\n/**\r\n * A helper method to apply tagged operations\r\n */\r\nfunction syncTreeApplyTaggedOperation_(syncTree, queryPath, operation) {\r\n    const syncPoint = syncTree.syncPointTree_.get(queryPath);\r\n    assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\r\n    const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, queryPath);\r\n    return syncPointApplyOperation(syncPoint, operation, writesCache, null);\r\n}\r\n/**\r\n * This collapses multiple unfiltered views into a single view, since we only need a single\r\n * listener for them.\r\n */\r\nfunction syncTreeCollectDistinctViewsForSubTree_(subtree) {\r\n    return subtree.fold((relativePath, maybeChildSyncPoint, childMap) => {\r\n        if (maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {\r\n            const completeView = syncPointGetCompleteView(maybeChildSyncPoint);\r\n            return [completeView];\r\n        }\r\n        else {\r\n            // No complete view here, flatten any deeper listens into an array\r\n            let views = [];\r\n            if (maybeChildSyncPoint) {\r\n                views = syncPointGetQueryViews(maybeChildSyncPoint);\r\n            }\r\n            each(childMap, (_key, childViews) => {\r\n                views = views.concat(childViews);\r\n            });\r\n            return views;\r\n        }\r\n    });\r\n}\r\n/**\r\n * Normalizes a query to a query we send the server for listening\r\n *\r\n * @returns The normalized query\r\n */\r\nfunction syncTreeQueryForListening_(query) {\r\n    if (query._queryParams.loadsAllData() && !query._queryParams.isDefault()) {\r\n        // We treat queries that load all data as default queries\r\n        // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\r\n        // from Query\r\n        return new (syncTreeGetReferenceConstructor())(query._repo, query._path);\r\n    }\r\n    else {\r\n        return query;\r\n    }\r\n}\r\nfunction syncTreeRemoveTags_(syncTree, queries) {\r\n    for (let j = 0; j < queries.length; ++j) {\r\n        const removedQuery = queries[j];\r\n        if (!removedQuery._queryParams.loadsAllData()) {\r\n            // We should have a tag for this\r\n            const removedQueryKey = syncTreeMakeQueryKey_(removedQuery);\r\n            const removedQueryTag = syncTree.queryToTagMap.get(removedQueryKey);\r\n            syncTree.queryToTagMap.delete(removedQueryKey);\r\n            syncTree.tagToQueryMap.delete(removedQueryTag);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Static accessor for query tags.\r\n */\r\nfunction syncTreeGetNextQueryTag_() {\r\n    return syncTreeNextQueryTag_++;\r\n}\r\n/**\r\n * For a given new listen, manage the de-duplication of outstanding subscriptions.\r\n *\r\n * @returns This method can return events to support synchronous data sources\r\n */\r\nfunction syncTreeSetupListener_(syncTree, query, view) {\r\n    const path = query._path;\r\n    const tag = syncTreeTagForQuery_(syncTree, query);\r\n    const listener = syncTreeCreateListenerForView_(syncTree, view);\r\n    const events = syncTree.listenProvider_.startListening(syncTreeQueryForListening_(query), tag, listener.hashFn, listener.onComplete);\r\n    const subtree = syncTree.syncPointTree_.subtree(path);\r\n    // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\r\n    // may need to shadow other listens as well.\r\n    if (tag) {\r\n        assert(!syncPointHasCompleteView(subtree.value), \"If we're adding a query, it shouldn't be shadowed\");\r\n    }\r\n    else {\r\n        // Shadow everything at or below this location, this is a default listener.\r\n        const queriesToStop = subtree.fold((relativePath, maybeChildSyncPoint, childMap) => {\r\n            if (!pathIsEmpty(relativePath) &&\r\n                maybeChildSyncPoint &&\r\n                syncPointHasCompleteView(maybeChildSyncPoint)) {\r\n                return [syncPointGetCompleteView(maybeChildSyncPoint).query];\r\n            }\r\n            else {\r\n                // No default listener here, flatten any deeper queries into an array\r\n                let queries = [];\r\n                if (maybeChildSyncPoint) {\r\n                    queries = queries.concat(syncPointGetQueryViews(maybeChildSyncPoint).map(view => view.query));\r\n                }\r\n                each(childMap, (_key, childQueries) => {\r\n                    queries = queries.concat(childQueries);\r\n                });\r\n                return queries;\r\n            }\r\n        });\r\n        for (let i = 0; i < queriesToStop.length; ++i) {\r\n            const queryToStop = queriesToStop[i];\r\n            syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToStop), syncTreeTagForQuery_(syncTree, queryToStop));\r\n        }\r\n    }\r\n    return events;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ExistingValueProvider {\r\n    constructor(node_) {\r\n        this.node_ = node_;\r\n    }\r\n    getImmediateChild(childName) {\r\n        const child = this.node_.getImmediateChild(childName);\r\n        return new ExistingValueProvider(child);\r\n    }\r\n    node() {\r\n        return this.node_;\r\n    }\r\n}\r\nclass DeferredValueProvider {\r\n    constructor(syncTree, path) {\r\n        this.syncTree_ = syncTree;\r\n        this.path_ = path;\r\n    }\r\n    getImmediateChild(childName) {\r\n        const childPath = pathChild(this.path_, childName);\r\n        return new DeferredValueProvider(this.syncTree_, childPath);\r\n    }\r\n    node() {\r\n        return syncTreeCalcCompleteEventCache(this.syncTree_, this.path_);\r\n    }\r\n}\r\n/**\r\n * Generate placeholders for deferred values.\r\n */\r\nconst generateWithValues = function (values) {\r\n    values = values || {};\r\n    values['timestamp'] = values['timestamp'] || new Date().getTime();\r\n    return values;\r\n};\r\n/**\r\n * Value to use when firing local events. When writing server values, fire\r\n * local events with an approximate value, otherwise return value as-is.\r\n */\r\nconst resolveDeferredLeafValue = function (value, existingVal, serverValues) {\r\n    if (!value || typeof value !== 'object') {\r\n        return value;\r\n    }\r\n    assert('.sv' in value, 'Unexpected leaf node or priority contents');\r\n    if (typeof value['.sv'] === 'string') {\r\n        return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);\r\n    }\r\n    else if (typeof value['.sv'] === 'object') {\r\n        return resolveComplexDeferredValue(value['.sv'], existingVal);\r\n    }\r\n    else {\r\n        assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));\r\n    }\r\n};\r\nconst resolveScalarDeferredValue = function (op, existing, serverValues) {\r\n    switch (op) {\r\n        case 'timestamp':\r\n            return serverValues['timestamp'];\r\n        default:\r\n            assert(false, 'Unexpected server value: ' + op);\r\n    }\r\n};\r\nconst resolveComplexDeferredValue = function (op, existing, unused) {\r\n    if (!op.hasOwnProperty('increment')) {\r\n        assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));\r\n    }\r\n    const delta = op['increment'];\r\n    if (typeof delta !== 'number') {\r\n        assert(false, 'Unexpected increment value: ' + delta);\r\n    }\r\n    const existingNode = existing.node();\r\n    assert(existingNode !== null && typeof existingNode !== 'undefined', 'Expected ChildrenNode.EMPTY_NODE for nulls');\r\n    // Incrementing a non-number sets the value to the incremented amount\r\n    if (!existingNode.isLeafNode()) {\r\n        return delta;\r\n    }\r\n    const leaf = existingNode;\r\n    const existingVal = leaf.getValue();\r\n    if (typeof existingVal !== 'number') {\r\n        return delta;\r\n    }\r\n    // No need to do over/underflow arithmetic here because JS only handles floats under the covers\r\n    return existingVal + delta;\r\n};\r\n/**\r\n * Recursively replace all deferred values and priorities in the tree with the\r\n * specified generated replacement values.\r\n * @param path - path to which write is relative\r\n * @param node - new data written at path\r\n * @param syncTree - current data\r\n */\r\nconst resolveDeferredValueTree = function (path, node, syncTree, serverValues) {\r\n    return resolveDeferredValue(node, new DeferredValueProvider(syncTree, path), serverValues);\r\n};\r\n/**\r\n * Recursively replace all deferred values and priorities in the node with the\r\n * specified generated replacement values.  If there are no server values in the node,\r\n * it'll be returned as-is.\r\n */\r\nconst resolveDeferredValueSnapshot = function (node, existing, serverValues) {\r\n    return resolveDeferredValue(node, new ExistingValueProvider(existing), serverValues);\r\n};\r\nfunction resolveDeferredValue(node, existingVal, serverValues) {\r\n    const rawPri = node.getPriority().val();\r\n    const priority = resolveDeferredLeafValue(rawPri, existingVal.getImmediateChild('.priority'), serverValues);\r\n    let newNode;\r\n    if (node.isLeafNode()) {\r\n        const leafNode = node;\r\n        const value = resolveDeferredLeafValue(leafNode.getValue(), existingVal, serverValues);\r\n        if (value !== leafNode.getValue() ||\r\n            priority !== leafNode.getPriority().val()) {\r\n            return new LeafNode(value, nodeFromJSON(priority));\r\n        }\r\n        else {\r\n            return node;\r\n        }\r\n    }\r\n    else {\r\n        const childrenNode = node;\r\n        newNode = childrenNode;\r\n        if (priority !== childrenNode.getPriority().val()) {\r\n            newNode = newNode.updatePriority(new LeafNode(priority));\r\n        }\r\n        childrenNode.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\r\n            const newChildNode = resolveDeferredValue(childNode, existingVal.getImmediateChild(childName), serverValues);\r\n            if (newChildNode !== childNode) {\r\n                newNode = newNode.updateImmediateChild(childName, newChildNode);\r\n            }\r\n        });\r\n        return newNode;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\r\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\r\n * children.\r\n */\r\nclass Tree {\r\n    /**\r\n     * @param name - Optional name of the node.\r\n     * @param parent - Optional parent node.\r\n     * @param node - Optional node to wrap.\r\n     */\r\n    constructor(name = '', parent = null, node = { children: {}, childCount: 0 }) {\r\n        this.name = name;\r\n        this.parent = parent;\r\n        this.node = node;\r\n    }\r\n}\r\n/**\r\n * Returns a sub-Tree for the given path.\r\n *\r\n * @param pathObj - Path to look up.\r\n * @returns Tree for path.\r\n */\r\nfunction treeSubTree(tree, pathObj) {\r\n    // TODO: Require pathObj to be Path?\r\n    let path = pathObj instanceof Path ? pathObj : new Path(pathObj);\r\n    let child = tree, next = pathGetFront(path);\r\n    while (next !== null) {\r\n        const childNode = safeGet(child.node.children, next) || {\r\n            children: {},\r\n            childCount: 0\r\n        };\r\n        child = new Tree(next, child, childNode);\r\n        path = pathPopFront(path);\r\n        next = pathGetFront(path);\r\n    }\r\n    return child;\r\n}\r\n/**\r\n * Returns the data associated with this tree node.\r\n *\r\n * @returns The data or null if no data exists.\r\n */\r\nfunction treeGetValue(tree) {\r\n    return tree.node.value;\r\n}\r\n/**\r\n * Sets data to this tree node.\r\n *\r\n * @param value - Value to set.\r\n */\r\nfunction treeSetValue(tree, value) {\r\n    tree.node.value = value;\r\n    treeUpdateParents(tree);\r\n}\r\n/**\r\n * @returns Whether the tree has any children.\r\n */\r\nfunction treeHasChildren(tree) {\r\n    return tree.node.childCount > 0;\r\n}\r\n/**\r\n * @returns Whethe rthe tree is empty (no value or children).\r\n */\r\nfunction treeIsEmpty(tree) {\r\n    return treeGetValue(tree) === undefined && !treeHasChildren(tree);\r\n}\r\n/**\r\n * Calls action for each child of this tree node.\r\n *\r\n * @param action - Action to be called for each child.\r\n */\r\nfunction treeForEachChild(tree, action) {\r\n    each(tree.node.children, (child, childTree) => {\r\n        action(new Tree(child, tree, childTree));\r\n    });\r\n}\r\n/**\r\n * Does a depth-first traversal of this node's descendants, calling action for each one.\r\n *\r\n * @param action - Action to be called for each child.\r\n * @param includeSelf - Whether to call action on this node as well. Defaults to\r\n *   false.\r\n * @param childrenFirst - Whether to call action on children before calling it on\r\n *   parent.\r\n */\r\nfunction treeForEachDescendant(tree, action, includeSelf, childrenFirst) {\r\n    if (includeSelf && !childrenFirst) {\r\n        action(tree);\r\n    }\r\n    treeForEachChild(tree, child => {\r\n        treeForEachDescendant(child, action, true, childrenFirst);\r\n    });\r\n    if (includeSelf && childrenFirst) {\r\n        action(tree);\r\n    }\r\n}\r\n/**\r\n * Calls action on each ancestor node.\r\n *\r\n * @param action - Action to be called on each parent; return\r\n *   true to abort.\r\n * @param includeSelf - Whether to call action on this node as well.\r\n * @returns true if the action callback returned true.\r\n */\r\nfunction treeForEachAncestor(tree, action, includeSelf) {\r\n    let node = includeSelf ? tree : tree.parent;\r\n    while (node !== null) {\r\n        if (action(node)) {\r\n            return true;\r\n        }\r\n        node = node.parent;\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * @returns The path of this tree node, as a Path.\r\n */\r\nfunction treeGetPath(tree) {\r\n    return new Path(tree.parent === null\r\n        ? tree.name\r\n        : treeGetPath(tree.parent) + '/' + tree.name);\r\n}\r\n/**\r\n * Adds or removes this child from its parent based on whether it's empty or not.\r\n */\r\nfunction treeUpdateParents(tree) {\r\n    if (tree.parent !== null) {\r\n        treeUpdateChild(tree.parent, tree.name, tree);\r\n    }\r\n}\r\n/**\r\n * Adds or removes the passed child to this tree node, depending on whether it's empty.\r\n *\r\n * @param childName - The name of the child to update.\r\n * @param child - The child to update.\r\n */\r\nfunction treeUpdateChild(tree, childName, child) {\r\n    const childEmpty = treeIsEmpty(child);\r\n    const childExists = contains(tree.node.children, childName);\r\n    if (childEmpty && childExists) {\r\n        delete tree.node.children[childName];\r\n        tree.node.childCount--;\r\n        treeUpdateParents(tree);\r\n    }\r\n    else if (!childEmpty && !childExists) {\r\n        tree.node.children[childName] = child.node;\r\n        tree.node.childCount++;\r\n        treeUpdateParents(tree);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * True for invalid Firebase keys\r\n */\r\nconst INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\r\n/**\r\n * True for invalid Firebase paths.\r\n * Allows '/' in paths.\r\n */\r\nconst INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\r\n/**\r\n * Maximum number of characters to allow in leaf value\r\n */\r\nconst MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\r\nconst isValidKey = function (key) {\r\n    return (typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key));\r\n};\r\nconst isValidPathString = function (pathString) {\r\n    return (typeof pathString === 'string' &&\r\n        pathString.length !== 0 &&\r\n        !INVALID_PATH_REGEX_.test(pathString));\r\n};\r\nconst isValidRootPathString = function (pathString) {\r\n    if (pathString) {\r\n        // Allow '/.info/' at the beginning.\r\n        pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\r\n    }\r\n    return isValidPathString(pathString);\r\n};\r\nconst isValidPriority = function (priority) {\r\n    return (priority === null ||\r\n        typeof priority === 'string' ||\r\n        (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||\r\n        (priority &&\r\n            typeof priority === 'object' &&\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            contains(priority, '.sv')));\r\n};\r\n/**\r\n * Pre-validate a datum passed as an argument to Firebase function.\r\n */\r\nconst validateFirebaseDataArg = function (fnName, value, path, optional) {\r\n    if (optional && value === undefined) {\r\n        return;\r\n    }\r\n    validateFirebaseData(errorPrefix(fnName, 'value'), value, path);\r\n};\r\n/**\r\n * Validate a data object client-side before sending to server.\r\n */\r\nconst validateFirebaseData = function (errorPrefix, data, path_) {\r\n    const path = path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\r\n    if (data === undefined) {\r\n        throw new Error(errorPrefix + 'contains undefined ' + validationPathToErrorString(path));\r\n    }\r\n    if (typeof data === 'function') {\r\n        throw new Error(errorPrefix +\r\n            'contains a function ' +\r\n            validationPathToErrorString(path) +\r\n            ' with contents = ' +\r\n            data.toString());\r\n    }\r\n    if (isInvalidJSONNumber(data)) {\r\n        throw new Error(errorPrefix +\r\n            'contains ' +\r\n            data.toString() +\r\n            ' ' +\r\n            validationPathToErrorString(path));\r\n    }\r\n    // Check max leaf size, but try to avoid the utf8 conversion if we can.\r\n    if (typeof data === 'string' &&\r\n        data.length > MAX_LEAF_SIZE_ / 3 &&\r\n        stringLength(data) > MAX_LEAF_SIZE_) {\r\n        throw new Error(errorPrefix +\r\n            'contains a string greater than ' +\r\n            MAX_LEAF_SIZE_ +\r\n            ' utf8 bytes ' +\r\n            validationPathToErrorString(path) +\r\n            \" ('\" +\r\n            data.substring(0, 50) +\r\n            \"...')\");\r\n    }\r\n    // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\r\n    // to save extra walking of large objects.\r\n    if (data && typeof data === 'object') {\r\n        let hasDotValue = false;\r\n        let hasActualChild = false;\r\n        each(data, (key, value) => {\r\n            if (key === '.value') {\r\n                hasDotValue = true;\r\n            }\r\n            else if (key !== '.priority' && key !== '.sv') {\r\n                hasActualChild = true;\r\n                if (!isValidKey(key)) {\r\n                    throw new Error(errorPrefix +\r\n                        ' contains an invalid key (' +\r\n                        key +\r\n                        ') ' +\r\n                        validationPathToErrorString(path) +\r\n                        '.  Keys must be non-empty strings ' +\r\n                        'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\r\n                }\r\n            }\r\n            validationPathPush(path, key);\r\n            validateFirebaseData(errorPrefix, value, path);\r\n            validationPathPop(path);\r\n        });\r\n        if (hasDotValue && hasActualChild) {\r\n            throw new Error(errorPrefix +\r\n                ' contains \".value\" child ' +\r\n                validationPathToErrorString(path) +\r\n                ' in addition to actual children.');\r\n        }\r\n    }\r\n};\r\n/**\r\n * Pre-validate paths passed in the firebase function.\r\n */\r\nconst validateFirebaseMergePaths = function (errorPrefix, mergePaths) {\r\n    let i, curPath;\r\n    for (i = 0; i < mergePaths.length; i++) {\r\n        curPath = mergePaths[i];\r\n        const keys = pathSlice(curPath);\r\n        for (let j = 0; j < keys.length; j++) {\r\n            if (keys[j] === '.priority' && j === keys.length - 1) ;\r\n            else if (!isValidKey(keys[j])) {\r\n                throw new Error(errorPrefix +\r\n                    'contains an invalid key (' +\r\n                    keys[j] +\r\n                    ') in path ' +\r\n                    curPath.toString() +\r\n                    '. Keys must be non-empty strings ' +\r\n                    'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\r\n            }\r\n        }\r\n    }\r\n    // Check that update keys are not descendants of each other.\r\n    // We rely on the property that sorting guarantees that ancestors come\r\n    // right before descendants.\r\n    mergePaths.sort(pathCompare);\r\n    let prevPath = null;\r\n    for (i = 0; i < mergePaths.length; i++) {\r\n        curPath = mergePaths[i];\r\n        if (prevPath !== null && pathContains(prevPath, curPath)) {\r\n            throw new Error(errorPrefix +\r\n                'contains a path ' +\r\n                prevPath.toString() +\r\n                ' that is ancestor of another path ' +\r\n                curPath.toString());\r\n        }\r\n        prevPath = curPath;\r\n    }\r\n};\r\n/**\r\n * pre-validate an object passed as an argument to firebase function (\r\n * must be an object - e.g. for firebase.update()).\r\n */\r\nconst validateFirebaseMergeDataArg = function (fnName, data, path, optional) {\r\n    if (optional && data === undefined) {\r\n        return;\r\n    }\r\n    const errorPrefix$1 = errorPrefix(fnName, 'values');\r\n    if (!(data && typeof data === 'object') || Array.isArray(data)) {\r\n        throw new Error(errorPrefix$1 + ' must be an object containing the children to replace.');\r\n    }\r\n    const mergePaths = [];\r\n    each(data, (key, value) => {\r\n        const curPath = new Path(key);\r\n        validateFirebaseData(errorPrefix$1, value, pathChild(path, curPath));\r\n        if (pathGetBack(curPath) === '.priority') {\r\n            if (!isValidPriority(value)) {\r\n                throw new Error(errorPrefix$1 +\r\n                    \"contains an invalid value for '\" +\r\n                    curPath.toString() +\r\n                    \"', which must be a valid \" +\r\n                    'Firebase priority (a string, finite number, server value, or null).');\r\n            }\r\n        }\r\n        mergePaths.push(curPath);\r\n    });\r\n    validateFirebaseMergePaths(errorPrefix$1, mergePaths);\r\n};\r\nconst validatePriority = function (fnName, priority, optional) {\r\n    if (optional && priority === undefined) {\r\n        return;\r\n    }\r\n    if (isInvalidJSONNumber(priority)) {\r\n        throw new Error(errorPrefix(fnName, 'priority') +\r\n            'is ' +\r\n            priority.toString() +\r\n            ', but must be a valid Firebase priority (a string, finite number, ' +\r\n            'server value, or null).');\r\n    }\r\n    // Special case to allow importing data with a .sv.\r\n    if (!isValidPriority(priority)) {\r\n        throw new Error(errorPrefix(fnName, 'priority') +\r\n            'must be a valid Firebase priority ' +\r\n            '(a string, finite number, server value, or null).');\r\n    }\r\n};\r\nconst validateKey = function (fnName, argumentName, key, optional) {\r\n    if (optional && key === undefined) {\r\n        return;\r\n    }\r\n    if (!isValidKey(key)) {\r\n        throw new Error(errorPrefix(fnName, argumentName) +\r\n            'was an invalid key = \"' +\r\n            key +\r\n            '\".  Firebase keys must be non-empty strings and ' +\r\n            'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").');\r\n    }\r\n};\r\n/**\r\n * @internal\r\n */\r\nconst validatePathString = function (fnName, argumentName, pathString, optional) {\r\n    if (optional && pathString === undefined) {\r\n        return;\r\n    }\r\n    if (!isValidPathString(pathString)) {\r\n        throw new Error(errorPrefix(fnName, argumentName) +\r\n            'was an invalid path = \"' +\r\n            pathString +\r\n            '\". Paths must be non-empty strings and ' +\r\n            'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"');\r\n    }\r\n};\r\nconst validateRootPathString = function (fnName, argumentName, pathString, optional) {\r\n    if (pathString) {\r\n        // Allow '/.info/' at the beginning.\r\n        pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\r\n    }\r\n    validatePathString(fnName, argumentName, pathString, optional);\r\n};\r\n/**\r\n * @internal\r\n */\r\nconst validateWritablePath = function (fnName, path) {\r\n    if (pathGetFront(path) === '.info') {\r\n        throw new Error(fnName + \" failed = Can't modify data under /.info/\");\r\n    }\r\n};\r\nconst validateUrl = function (fnName, parsedUrl) {\r\n    // TODO = Validate server better.\r\n    const pathString = parsedUrl.path.toString();\r\n    if (!(typeof parsedUrl.repoInfo.host === 'string') ||\r\n        parsedUrl.repoInfo.host.length === 0 ||\r\n        (!isValidKey(parsedUrl.repoInfo.namespace) &&\r\n            parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||\r\n        (pathString.length !== 0 && !isValidRootPathString(pathString))) {\r\n        throw new Error(errorPrefix(fnName, 'url') +\r\n            'must be a valid firebase URL and ' +\r\n            'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".');\r\n    }\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The event queue serves a few purposes:\r\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\r\n *    events being queued.\r\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\r\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\r\n *    left off, ensuring that the events are still raised synchronously and in order.\r\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\r\n *    events are raised synchronously.\r\n *\r\n * NOTE: This can all go away if/when we move to async events.\r\n *\r\n */\r\nclass EventQueue {\r\n    constructor() {\r\n        this.eventLists_ = [];\r\n        /**\r\n         * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\r\n         */\r\n        this.recursionDepth_ = 0;\r\n    }\r\n}\r\n/**\r\n * @param eventDataList - The new events to queue.\r\n */\r\nfunction eventQueueQueueEvents(eventQueue, eventDataList) {\r\n    // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\r\n    let currList = null;\r\n    for (let i = 0; i < eventDataList.length; i++) {\r\n        const data = eventDataList[i];\r\n        const path = data.getPath();\r\n        if (currList !== null && !pathEquals(path, currList.path)) {\r\n            eventQueue.eventLists_.push(currList);\r\n            currList = null;\r\n        }\r\n        if (currList === null) {\r\n            currList = { events: [], path };\r\n        }\r\n        currList.events.push(data);\r\n    }\r\n    if (currList) {\r\n        eventQueue.eventLists_.push(currList);\r\n    }\r\n}\r\n/**\r\n * Queues the specified events and synchronously raises all events (including previously queued ones)\r\n * for the specified path.\r\n *\r\n * It is assumed that the new events are all for the specified path.\r\n *\r\n * @param path - The path to raise events for.\r\n * @param eventDataList - The new events to raise.\r\n */\r\nfunction eventQueueRaiseEventsAtPath(eventQueue, path, eventDataList) {\r\n    eventQueueQueueEvents(eventQueue, eventDataList);\r\n    eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath => pathEquals(eventPath, path));\r\n}\r\n/**\r\n * Queues the specified events and synchronously raises all events (including previously queued ones) for\r\n * locations related to the specified change path (i.e. all ancestors and descendants).\r\n *\r\n * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\r\n *\r\n * @param changedPath - The path to raise events for.\r\n * @param eventDataList - The events to raise\r\n */\r\nfunction eventQueueRaiseEventsForChangedPath(eventQueue, changedPath, eventDataList) {\r\n    eventQueueQueueEvents(eventQueue, eventDataList);\r\n    eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath => pathContains(eventPath, changedPath) ||\r\n        pathContains(changedPath, eventPath));\r\n}\r\nfunction eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, predicate) {\r\n    eventQueue.recursionDepth_++;\r\n    let sentAll = true;\r\n    for (let i = 0; i < eventQueue.eventLists_.length; i++) {\r\n        const eventList = eventQueue.eventLists_[i];\r\n        if (eventList) {\r\n            const eventPath = eventList.path;\r\n            if (predicate(eventPath)) {\r\n                eventListRaise(eventQueue.eventLists_[i]);\r\n                eventQueue.eventLists_[i] = null;\r\n            }\r\n            else {\r\n                sentAll = false;\r\n            }\r\n        }\r\n    }\r\n    if (sentAll) {\r\n        eventQueue.eventLists_ = [];\r\n    }\r\n    eventQueue.recursionDepth_--;\r\n}\r\n/**\r\n * Iterates through the list and raises each event\r\n */\r\nfunction eventListRaise(eventList) {\r\n    for (let i = 0; i < eventList.events.length; i++) {\r\n        const eventData = eventList.events[i];\r\n        if (eventData !== null) {\r\n            eventList.events[i] = null;\r\n            const eventFn = eventData.getEventRunner();\r\n            if (logger) {\r\n                log('event: ' + eventData.toString());\r\n            }\r\n            exceptionGuard(eventFn);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst INTERRUPT_REASON = 'repo_interrupt';\r\n/**\r\n * If a transaction does not succeed after 25 retries, we abort it. Among other\r\n * things this ensure that if there's ever a bug causing a mismatch between\r\n * client / server hashes for some data, we won't retry indefinitely.\r\n */\r\nconst MAX_TRANSACTION_RETRIES = 25;\r\n/**\r\n * A connection to a single data repository.\r\n */\r\nclass Repo {\r\n    constructor(repoInfo_, forceRestClient_, authTokenProvider_, appCheckProvider_) {\r\n        this.repoInfo_ = repoInfo_;\r\n        this.forceRestClient_ = forceRestClient_;\r\n        this.authTokenProvider_ = authTokenProvider_;\r\n        this.appCheckProvider_ = appCheckProvider_;\r\n        this.dataUpdateCount = 0;\r\n        this.statsListener_ = null;\r\n        this.eventQueue_ = new EventQueue();\r\n        this.nextWriteId_ = 1;\r\n        this.interceptServerDataCallback_ = null;\r\n        /** A list of data pieces and paths to be set when this client disconnects. */\r\n        this.onDisconnect_ = newSparseSnapshotTree();\r\n        /** Stores queues of outstanding transactions for Firebase locations. */\r\n        this.transactionQueueTree_ = new Tree();\r\n        // TODO: This should be @private but it's used by test_access.js and internal.js\r\n        this.persistentConnection_ = null;\r\n        // This key is intentionally not updated if RepoInfo is later changed or replaced\r\n        this.key = this.repoInfo_.toURLString();\r\n    }\r\n    /**\r\n     * @returns The URL corresponding to the root of this Firebase.\r\n     */\r\n    toString() {\r\n        return ((this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host);\r\n    }\r\n}\r\nfunction repoStart(repo, appId, authOverride) {\r\n    repo.stats_ = statsManagerGetCollection(repo.repoInfo_);\r\n    if (repo.forceRestClient_ || beingCrawled()) {\r\n        repo.server_ = new ReadonlyRestClient(repo.repoInfo_, (pathString, data, isMerge, tag) => {\r\n            repoOnDataUpdate(repo, pathString, data, isMerge, tag);\r\n        }, repo.authTokenProvider_, repo.appCheckProvider_);\r\n        // Minor hack: Fire onConnect immediately, since there's no actual connection.\r\n        setTimeout(() => repoOnConnectStatus(repo, /* connectStatus= */ true), 0);\r\n    }\r\n    else {\r\n        // Validate authOverride\r\n        if (typeof authOverride !== 'undefined' && authOverride !== null) {\r\n            if (typeof authOverride !== 'object') {\r\n                throw new Error('Only objects are supported for option databaseAuthVariableOverride');\r\n            }\r\n            try {\r\n                stringify(authOverride);\r\n            }\r\n            catch (e) {\r\n                throw new Error('Invalid authOverride provided: ' + e);\r\n            }\r\n        }\r\n        repo.persistentConnection_ = new PersistentConnection(repo.repoInfo_, appId, (pathString, data, isMerge, tag) => {\r\n            repoOnDataUpdate(repo, pathString, data, isMerge, tag);\r\n        }, (connectStatus) => {\r\n            repoOnConnectStatus(repo, connectStatus);\r\n        }, (updates) => {\r\n            repoOnServerInfoUpdate(repo, updates);\r\n        }, repo.authTokenProvider_, repo.appCheckProvider_, authOverride);\r\n        repo.server_ = repo.persistentConnection_;\r\n    }\r\n    repo.authTokenProvider_.addTokenChangeListener(token => {\r\n        repo.server_.refreshAuthToken(token);\r\n    });\r\n    repo.appCheckProvider_.addTokenChangeListener(result => {\r\n        repo.server_.refreshAppCheckToken(result.token);\r\n    });\r\n    // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\r\n    // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\r\n    repo.statsReporter_ = statsManagerGetOrCreateReporter(repo.repoInfo_, () => new StatsReporter(repo.stats_, repo.server_));\r\n    // Used for .info.\r\n    repo.infoData_ = new SnapshotHolder();\r\n    repo.infoSyncTree_ = new SyncTree({\r\n        startListening: (query, tag, currentHashFn, onComplete) => {\r\n            let infoEvents = [];\r\n            const node = repo.infoData_.getNode(query._path);\r\n            // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\r\n            // on initial data...\r\n            if (!node.isEmpty()) {\r\n                infoEvents = syncTreeApplyServerOverwrite(repo.infoSyncTree_, query._path, node);\r\n                setTimeout(() => {\r\n                    onComplete('ok');\r\n                }, 0);\r\n            }\r\n            return infoEvents;\r\n        },\r\n        stopListening: () => { }\r\n    });\r\n    repoUpdateInfo(repo, 'connected', false);\r\n    repo.serverSyncTree_ = new SyncTree({\r\n        startListening: (query, tag, currentHashFn, onComplete) => {\r\n            repo.server_.listen(query, currentHashFn, tag, (status, data) => {\r\n                const events = onComplete(status, data);\r\n                eventQueueRaiseEventsForChangedPath(repo.eventQueue_, query._path, events);\r\n            });\r\n            // No synchronous events for network-backed sync trees\r\n            return [];\r\n        },\r\n        stopListening: (query, tag) => {\r\n            repo.server_.unlisten(query, tag);\r\n        }\r\n    });\r\n}\r\n/**\r\n * @returns The time in milliseconds, taking the server offset into account if we have one.\r\n */\r\nfunction repoServerTime(repo) {\r\n    const offsetNode = repo.infoData_.getNode(new Path('.info/serverTimeOffset'));\r\n    const offset = offsetNode.val() || 0;\r\n    return new Date().getTime() + offset;\r\n}\r\n/**\r\n * Generate ServerValues using some variables from the repo object.\r\n */\r\nfunction repoGenerateServerValues(repo) {\r\n    return generateWithValues({\r\n        timestamp: repoServerTime(repo)\r\n    });\r\n}\r\n/**\r\n * Called by realtime when we get new messages from the server.\r\n */\r\nfunction repoOnDataUpdate(repo, pathString, data, isMerge, tag) {\r\n    // For testing.\r\n    repo.dataUpdateCount++;\r\n    const path = new Path(pathString);\r\n    data = repo.interceptServerDataCallback_\r\n        ? repo.interceptServerDataCallback_(pathString, data)\r\n        : data;\r\n    let events = [];\r\n    if (tag) {\r\n        if (isMerge) {\r\n            const taggedChildren = map(data, (raw) => nodeFromJSON(raw));\r\n            events = syncTreeApplyTaggedQueryMerge(repo.serverSyncTree_, path, taggedChildren, tag);\r\n        }\r\n        else {\r\n            const taggedSnap = nodeFromJSON(data);\r\n            events = syncTreeApplyTaggedQueryOverwrite(repo.serverSyncTree_, path, taggedSnap, tag);\r\n        }\r\n    }\r\n    else if (isMerge) {\r\n        const changedChildren = map(data, (raw) => nodeFromJSON(raw));\r\n        events = syncTreeApplyServerMerge(repo.serverSyncTree_, path, changedChildren);\r\n    }\r\n    else {\r\n        const snap = nodeFromJSON(data);\r\n        events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap);\r\n    }\r\n    let affectedPath = path;\r\n    if (events.length > 0) {\r\n        // Since we have a listener outstanding for each transaction, receiving any events\r\n        // is a proxy for some change having occurred.\r\n        affectedPath = repoRerunTransactions(repo, path);\r\n    }\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, events);\r\n}\r\nfunction repoOnConnectStatus(repo, connectStatus) {\r\n    repoUpdateInfo(repo, 'connected', connectStatus);\r\n    if (connectStatus === false) {\r\n        repoRunOnDisconnectEvents(repo);\r\n    }\r\n}\r\nfunction repoOnServerInfoUpdate(repo, updates) {\r\n    each(updates, (key, value) => {\r\n        repoUpdateInfo(repo, key, value);\r\n    });\r\n}\r\nfunction repoUpdateInfo(repo, pathString, value) {\r\n    const path = new Path('/.info/' + pathString);\r\n    const newNode = nodeFromJSON(value);\r\n    repo.infoData_.updateSnapshot(path, newNode);\r\n    const events = syncTreeApplyServerOverwrite(repo.infoSyncTree_, path, newNode);\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n}\r\nfunction repoGetNextWriteId(repo) {\r\n    return repo.nextWriteId_++;\r\n}\r\n/**\r\n * The purpose of `getValue` is to return the latest known value\r\n * satisfying `query`.\r\n *\r\n * This method will first check for in-memory cached values\r\n * belonging to active listeners. If they are found, such values\r\n * are considered to be the most up-to-date.\r\n *\r\n * If the client is not connected, this method will try to\r\n * establish a connection and request the value for `query`. If\r\n * the client is not able to retrieve the query result, it reports\r\n * an error.\r\n *\r\n * @param query - The query to surface a value for.\r\n */\r\nfunction repoGetValue(repo, query) {\r\n    // Only active queries are cached. There is no persisted cache.\r\n    const cached = syncTreeGetServerValue(repo.serverSyncTree_, query);\r\n    if (cached != null) {\r\n        return Promise.resolve(cached);\r\n    }\r\n    return repo.server_.get(query).then(payload => {\r\n        const node = nodeFromJSON(payload).withIndex(query._queryParams.getIndex());\r\n        const events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, query._path, node);\r\n        eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\r\n        return Promise.resolve(node);\r\n    }, err => {\r\n        repoLog(repo, 'get for query ' + stringify(query) + ' failed: ' + err);\r\n        return Promise.reject(new Error(err));\r\n    });\r\n}\r\nfunction repoSetWithPriority(repo, path, newVal, newPriority, onComplete) {\r\n    repoLog(repo, 'set', {\r\n        path: path.toString(),\r\n        value: newVal,\r\n        priority: newPriority\r\n    });\r\n    // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\r\n    // (b) store unresolved paths on JSON parse\r\n    const serverValues = repoGenerateServerValues(repo);\r\n    const newNodeUnresolved = nodeFromJSON(newVal, newPriority);\r\n    const existing = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path);\r\n    const newNode = resolveDeferredValueSnapshot(newNodeUnresolved, existing, serverValues);\r\n    const writeId = repoGetNextWriteId(repo);\r\n    const events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, writeId, true);\r\n    eventQueueQueueEvents(repo.eventQueue_, events);\r\n    repo.server_.put(path.toString(), newNodeUnresolved.val(/*export=*/ true), (status, errorReason) => {\r\n        const success = status === 'ok';\r\n        if (!success) {\r\n            warn('set at ' + path + ' failed: ' + status);\r\n        }\r\n        const clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId, !success);\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, clearEvents);\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n    const affectedPath = repoAbortTransactions(repo, path);\r\n    repoRerunTransactions(repo, affectedPath);\r\n    // We queued the events above, so just flush the queue here\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, []);\r\n}\r\nfunction repoUpdate(repo, path, childrenToMerge, onComplete) {\r\n    repoLog(repo, 'update', { path: path.toString(), value: childrenToMerge });\r\n    // Start with our existing data and merge each child into it.\r\n    let empty = true;\r\n    const serverValues = repoGenerateServerValues(repo);\r\n    const changedChildren = {};\r\n    each(childrenToMerge, (changedKey, changedValue) => {\r\n        empty = false;\r\n        changedChildren[changedKey] = resolveDeferredValueTree(pathChild(path, changedKey), nodeFromJSON(changedValue), repo.serverSyncTree_, serverValues);\r\n    });\r\n    if (!empty) {\r\n        const writeId = repoGetNextWriteId(repo);\r\n        const events = syncTreeApplyUserMerge(repo.serverSyncTree_, path, changedChildren, writeId);\r\n        eventQueueQueueEvents(repo.eventQueue_, events);\r\n        repo.server_.merge(path.toString(), childrenToMerge, (status, errorReason) => {\r\n            const success = status === 'ok';\r\n            if (!success) {\r\n                warn('update at ' + path + ' failed: ' + status);\r\n            }\r\n            const clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId, !success);\r\n            const affectedPath = clearEvents.length > 0 ? repoRerunTransactions(repo, path) : path;\r\n            eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, clearEvents);\r\n            repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n        });\r\n        each(childrenToMerge, (changedPath) => {\r\n            const affectedPath = repoAbortTransactions(repo, pathChild(path, changedPath));\r\n            repoRerunTransactions(repo, affectedPath);\r\n        });\r\n        // We queued the events above, so just flush the queue here\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, []);\r\n    }\r\n    else {\r\n        log(\"update() called with empty data.  Don't do anything.\");\r\n        repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\r\n    }\r\n}\r\n/**\r\n * Applies all of the changes stored up in the onDisconnect_ tree.\r\n */\r\nfunction repoRunOnDisconnectEvents(repo) {\r\n    repoLog(repo, 'onDisconnectEvents');\r\n    const serverValues = repoGenerateServerValues(repo);\r\n    const resolvedOnDisconnectTree = newSparseSnapshotTree();\r\n    sparseSnapshotTreeForEachTree(repo.onDisconnect_, newEmptyPath(), (path, node) => {\r\n        const resolved = resolveDeferredValueTree(path, node, repo.serverSyncTree_, serverValues);\r\n        sparseSnapshotTreeRemember(resolvedOnDisconnectTree, path, resolved);\r\n    });\r\n    let events = [];\r\n    sparseSnapshotTreeForEachTree(resolvedOnDisconnectTree, newEmptyPath(), (path, snap) => {\r\n        events = events.concat(syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap));\r\n        const affectedPath = repoAbortTransactions(repo, path);\r\n        repoRerunTransactions(repo, affectedPath);\r\n    });\r\n    repo.onDisconnect_ = newSparseSnapshotTree();\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, newEmptyPath(), events);\r\n}\r\nfunction repoOnDisconnectCancel(repo, path, onComplete) {\r\n    repo.server_.onDisconnectCancel(path.toString(), (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            sparseSnapshotTreeForget(repo.onDisconnect_, path);\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoOnDisconnectSet(repo, path, value, onComplete) {\r\n    const newNode = nodeFromJSON(value);\r\n    repo.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoOnDisconnectSetWithPriority(repo, path, value, priority, onComplete) {\r\n    const newNode = nodeFromJSON(value, priority);\r\n    repo.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoOnDisconnectUpdate(repo, path, childrenToMerge, onComplete) {\r\n    if (isEmpty(childrenToMerge)) {\r\n        log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\r\n        repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\r\n        return;\r\n    }\r\n    repo.server_.onDisconnectMerge(path.toString(), childrenToMerge, (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            each(childrenToMerge, (childName, childNode) => {\r\n                const newChildNode = nodeFromJSON(childNode);\r\n                sparseSnapshotTreeRemember(repo.onDisconnect_, pathChild(path, childName), newChildNode);\r\n            });\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoAddEventCallbackForQuery(repo, query, eventRegistration) {\r\n    let events;\r\n    if (pathGetFront(query._path) === '.info') {\r\n        events = syncTreeAddEventRegistration(repo.infoSyncTree_, query, eventRegistration);\r\n    }\r\n    else {\r\n        events = syncTreeAddEventRegistration(repo.serverSyncTree_, query, eventRegistration);\r\n    }\r\n    eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\r\n}\r\nfunction repoRemoveEventCallbackForQuery(repo, query, eventRegistration) {\r\n    // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\r\n    // a little bit by handling the return values anyways.\r\n    let events;\r\n    if (pathGetFront(query._path) === '.info') {\r\n        events = syncTreeRemoveEventRegistration(repo.infoSyncTree_, query, eventRegistration);\r\n    }\r\n    else {\r\n        events = syncTreeRemoveEventRegistration(repo.serverSyncTree_, query, eventRegistration);\r\n    }\r\n    eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\r\n}\r\nfunction repoInterrupt(repo) {\r\n    if (repo.persistentConnection_) {\r\n        repo.persistentConnection_.interrupt(INTERRUPT_REASON);\r\n    }\r\n}\r\nfunction repoResume(repo) {\r\n    if (repo.persistentConnection_) {\r\n        repo.persistentConnection_.resume(INTERRUPT_REASON);\r\n    }\r\n}\r\nfunction repoLog(repo, ...varArgs) {\r\n    let prefix = '';\r\n    if (repo.persistentConnection_) {\r\n        prefix = repo.persistentConnection_.id + ':';\r\n    }\r\n    log(prefix, ...varArgs);\r\n}\r\nfunction repoCallOnCompleteCallback(repo, callback, status, errorReason) {\r\n    if (callback) {\r\n        exceptionGuard(() => {\r\n            if (status === 'ok') {\r\n                callback(null);\r\n            }\r\n            else {\r\n                const code = (status || 'error').toUpperCase();\r\n                let message = code;\r\n                if (errorReason) {\r\n                    message += ': ' + errorReason;\r\n                }\r\n                const error = new Error(message);\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                error.code = code;\r\n                callback(error);\r\n            }\r\n        });\r\n    }\r\n}\r\n/**\r\n * Creates a new transaction, adds it to the transactions we're tracking, and\r\n * sends it to the server if possible.\r\n *\r\n * @param path - Path at which to do transaction.\r\n * @param transactionUpdate - Update callback.\r\n * @param onComplete - Completion callback.\r\n * @param unwatcher - Function that will be called when the transaction no longer\r\n * need data updates for `path`.\r\n * @param applyLocally - Whether or not to make intermediate results visible\r\n */\r\nfunction repoStartTransaction(repo, path, transactionUpdate, onComplete, unwatcher, applyLocally) {\r\n    repoLog(repo, 'transaction on ' + path);\r\n    // Initialize transaction.\r\n    const transaction = {\r\n        path,\r\n        update: transactionUpdate,\r\n        onComplete,\r\n        // One of TransactionStatus enums.\r\n        status: null,\r\n        // Used when combining transactions at different locations to figure out\r\n        // which one goes first.\r\n        order: LUIDGenerator(),\r\n        // Whether to raise local events for this transaction.\r\n        applyLocally,\r\n        // Count of how many times we've retried the transaction.\r\n        retryCount: 0,\r\n        // Function to call to clean up our .on() listener.\r\n        unwatcher,\r\n        // Stores why a transaction was aborted.\r\n        abortReason: null,\r\n        currentWriteId: null,\r\n        currentInputSnapshot: null,\r\n        currentOutputSnapshotRaw: null,\r\n        currentOutputSnapshotResolved: null\r\n    };\r\n    // Run transaction initially.\r\n    const currentState = repoGetLatestState(repo, path, undefined);\r\n    transaction.currentInputSnapshot = currentState;\r\n    const newVal = transaction.update(currentState.val());\r\n    if (newVal === undefined) {\r\n        // Abort transaction.\r\n        transaction.unwatcher();\r\n        transaction.currentOutputSnapshotRaw = null;\r\n        transaction.currentOutputSnapshotResolved = null;\r\n        if (transaction.onComplete) {\r\n            transaction.onComplete(null, false, transaction.currentInputSnapshot);\r\n        }\r\n    }\r\n    else {\r\n        validateFirebaseData('transaction failed: Data returned ', newVal, transaction.path);\r\n        // Mark as run and add to our queue.\r\n        transaction.status = 0 /* RUN */;\r\n        const queueNode = treeSubTree(repo.transactionQueueTree_, path);\r\n        const nodeQueue = treeGetValue(queueNode) || [];\r\n        nodeQueue.push(transaction);\r\n        treeSetValue(queueNode, nodeQueue);\r\n        // Update visibleData and raise events\r\n        // Note: We intentionally raise events after updating all of our\r\n        // transaction state, since the user could start new transactions from the\r\n        // event callbacks.\r\n        let priorityForNode;\r\n        if (typeof newVal === 'object' &&\r\n            newVal !== null &&\r\n            contains(newVal, '.priority')) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            priorityForNode = safeGet(newVal, '.priority');\r\n            assert(isValidPriority(priorityForNode), 'Invalid priority returned by transaction. ' +\r\n                'Priority must be a valid string, finite number, server value, or null.');\r\n        }\r\n        else {\r\n            const currentNode = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path) ||\r\n                ChildrenNode.EMPTY_NODE;\r\n            priorityForNode = currentNode.getPriority().val();\r\n        }\r\n        const serverValues = repoGenerateServerValues(repo);\r\n        const newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);\r\n        const newNode = resolveDeferredValueSnapshot(newNodeUnresolved, currentState, serverValues);\r\n        transaction.currentOutputSnapshotRaw = newNodeUnresolved;\r\n        transaction.currentOutputSnapshotResolved = newNode;\r\n        transaction.currentWriteId = repoGetNextWriteId(repo);\r\n        const events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, transaction.currentWriteId, transaction.applyLocally);\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n        repoSendReadyTransactions(repo, repo.transactionQueueTree_);\r\n    }\r\n}\r\n/**\r\n * @param excludeSets - A specific set to exclude\r\n */\r\nfunction repoGetLatestState(repo, path, excludeSets) {\r\n    return (syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path, excludeSets) ||\r\n        ChildrenNode.EMPTY_NODE);\r\n}\r\n/**\r\n * Sends any already-run transactions that aren't waiting for outstanding\r\n * transactions to complete.\r\n *\r\n * Externally it's called with no arguments, but it calls itself recursively\r\n * with a particular transactionQueueTree node to recurse through the tree.\r\n *\r\n * @param node - transactionQueueTree node to start at.\r\n */\r\nfunction repoSendReadyTransactions(repo, node = repo.transactionQueueTree_) {\r\n    // Before recursing, make sure any completed transactions are removed.\r\n    if (!node) {\r\n        repoPruneCompletedTransactionsBelowNode(repo, node);\r\n    }\r\n    if (treeGetValue(node)) {\r\n        const queue = repoBuildTransactionQueue(repo, node);\r\n        assert(queue.length > 0, 'Sending zero length transaction queue');\r\n        const allRun = queue.every((transaction) => transaction.status === 0 /* RUN */);\r\n        // If they're all run (and not sent), we can send them.  Else, we must wait.\r\n        if (allRun) {\r\n            repoSendTransactionQueue(repo, treeGetPath(node), queue);\r\n        }\r\n    }\r\n    else if (treeHasChildren(node)) {\r\n        treeForEachChild(node, childNode => {\r\n            repoSendReadyTransactions(repo, childNode);\r\n        });\r\n    }\r\n}\r\n/**\r\n * Given a list of run transactions, send them to the server and then handle\r\n * the result (success or failure).\r\n *\r\n * @param path - The location of the queue.\r\n * @param queue - Queue of transactions under the specified location.\r\n */\r\nfunction repoSendTransactionQueue(repo, path, queue) {\r\n    // Mark transactions as sent and increment retry count!\r\n    const setsToIgnore = queue.map(txn => {\r\n        return txn.currentWriteId;\r\n    });\r\n    const latestState = repoGetLatestState(repo, path, setsToIgnore);\r\n    let snapToSend = latestState;\r\n    const latestHash = latestState.hash();\r\n    for (let i = 0; i < queue.length; i++) {\r\n        const txn = queue[i];\r\n        assert(txn.status === 0 /* RUN */, 'tryToSendTransactionQueue_: items in queue should all be run.');\r\n        txn.status = 1 /* SENT */;\r\n        txn.retryCount++;\r\n        const relativePath = newRelativePath(path, txn.path);\r\n        // If we've gotten to this point, the output snapshot must be defined.\r\n        snapToSend = snapToSend.updateChild(relativePath /** @type {!Node} */, txn.currentOutputSnapshotRaw);\r\n    }\r\n    const dataToSend = snapToSend.val(true);\r\n    const pathToSend = path;\r\n    // Send the put.\r\n    repo.server_.put(pathToSend.toString(), dataToSend, (status) => {\r\n        repoLog(repo, 'transaction put response', {\r\n            path: pathToSend.toString(),\r\n            status\r\n        });\r\n        let events = [];\r\n        if (status === 'ok') {\r\n            // Queue up the callbacks and fire them after cleaning up all of our\r\n            // transaction state, since the callback could trigger more\r\n            // transactions or sets.\r\n            const callbacks = [];\r\n            for (let i = 0; i < queue.length; i++) {\r\n                queue[i].status = 2 /* COMPLETED */;\r\n                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId));\r\n                if (queue[i].onComplete) {\r\n                    // We never unset the output snapshot, and given that this\r\n                    // transaction is complete, it should be set\r\n                    callbacks.push(() => queue[i].onComplete(null, true, queue[i].currentOutputSnapshotResolved));\r\n                }\r\n                queue[i].unwatcher();\r\n            }\r\n            // Now remove the completed transactions.\r\n            repoPruneCompletedTransactionsBelowNode(repo, treeSubTree(repo.transactionQueueTree_, path));\r\n            // There may be pending transactions that we can now send.\r\n            repoSendReadyTransactions(repo, repo.transactionQueueTree_);\r\n            eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n            // Finally, trigger onComplete callbacks.\r\n            for (let i = 0; i < callbacks.length; i++) {\r\n                exceptionGuard(callbacks[i]);\r\n            }\r\n        }\r\n        else {\r\n            // transactions are no longer sent.  Update their status appropriately.\r\n            if (status === 'datastale') {\r\n                for (let i = 0; i < queue.length; i++) {\r\n                    if (queue[i].status === 3 /* SENT_NEEDS_ABORT */) {\r\n                        queue[i].status = 4 /* NEEDS_ABORT */;\r\n                    }\r\n                    else {\r\n                        queue[i].status = 0 /* RUN */;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                warn('transaction at ' + pathToSend.toString() + ' failed: ' + status);\r\n                for (let i = 0; i < queue.length; i++) {\r\n                    queue[i].status = 4 /* NEEDS_ABORT */;\r\n                    queue[i].abortReason = status;\r\n                }\r\n            }\r\n            repoRerunTransactions(repo, path);\r\n        }\r\n    }, latestHash);\r\n}\r\n/**\r\n * Finds all transactions dependent on the data at changedPath and reruns them.\r\n *\r\n * Should be called any time cached data changes.\r\n *\r\n * Return the highest path that was affected by rerunning transactions. This\r\n * is the path at which events need to be raised for.\r\n *\r\n * @param changedPath - The path in mergedData that changed.\r\n * @returns The rootmost path that was affected by rerunning transactions.\r\n */\r\nfunction repoRerunTransactions(repo, changedPath) {\r\n    const rootMostTransactionNode = repoGetAncestorTransactionNode(repo, changedPath);\r\n    const path = treeGetPath(rootMostTransactionNode);\r\n    const queue = repoBuildTransactionQueue(repo, rootMostTransactionNode);\r\n    repoRerunTransactionQueue(repo, queue, path);\r\n    return path;\r\n}\r\n/**\r\n * Does all the work of rerunning transactions (as well as cleans up aborted\r\n * transactions and whatnot).\r\n *\r\n * @param queue - The queue of transactions to run.\r\n * @param path - The path the queue is for.\r\n */\r\nfunction repoRerunTransactionQueue(repo, queue, path) {\r\n    if (queue.length === 0) {\r\n        return; // Nothing to do!\r\n    }\r\n    // Queue up the callbacks and fire them after cleaning up all of our\r\n    // transaction state, since the callback could trigger more transactions or\r\n    // sets.\r\n    const callbacks = [];\r\n    let events = [];\r\n    // Ignore all of the sets we're going to re-run.\r\n    const txnsToRerun = queue.filter(q => {\r\n        return q.status === 0 /* RUN */;\r\n    });\r\n    const setsToIgnore = txnsToRerun.map(q => {\r\n        return q.currentWriteId;\r\n    });\r\n    for (let i = 0; i < queue.length; i++) {\r\n        const transaction = queue[i];\r\n        const relativePath = newRelativePath(path, transaction.path);\r\n        let abortTransaction = false, abortReason;\r\n        assert(relativePath !== null, 'rerunTransactionsUnderNode_: relativePath should not be null.');\r\n        if (transaction.status === 4 /* NEEDS_ABORT */) {\r\n            abortTransaction = true;\r\n            abortReason = transaction.abortReason;\r\n            events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\r\n        }\r\n        else if (transaction.status === 0 /* RUN */) {\r\n            if (transaction.retryCount >= MAX_TRANSACTION_RETRIES) {\r\n                abortTransaction = true;\r\n                abortReason = 'maxretry';\r\n                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\r\n            }\r\n            else {\r\n                // This code reruns a transaction\r\n                const currentNode = repoGetLatestState(repo, transaction.path, setsToIgnore);\r\n                transaction.currentInputSnapshot = currentNode;\r\n                const newData = queue[i].update(currentNode.val());\r\n                if (newData !== undefined) {\r\n                    validateFirebaseData('transaction failed: Data returned ', newData, transaction.path);\r\n                    let newDataNode = nodeFromJSON(newData);\r\n                    const hasExplicitPriority = typeof newData === 'object' &&\r\n                        newData != null &&\r\n                        contains(newData, '.priority');\r\n                    if (!hasExplicitPriority) {\r\n                        // Keep the old priority if there wasn't a priority explicitly specified.\r\n                        newDataNode = newDataNode.updatePriority(currentNode.getPriority());\r\n                    }\r\n                    const oldWriteId = transaction.currentWriteId;\r\n                    const serverValues = repoGenerateServerValues(repo);\r\n                    const newNodeResolved = resolveDeferredValueSnapshot(newDataNode, currentNode, serverValues);\r\n                    transaction.currentOutputSnapshotRaw = newDataNode;\r\n                    transaction.currentOutputSnapshotResolved = newNodeResolved;\r\n                    transaction.currentWriteId = repoGetNextWriteId(repo);\r\n                    // Mutates setsToIgnore in place\r\n                    setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\r\n                    events = events.concat(syncTreeApplyUserOverwrite(repo.serverSyncTree_, transaction.path, newNodeResolved, transaction.currentWriteId, transaction.applyLocally));\r\n                    events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, oldWriteId, true));\r\n                }\r\n                else {\r\n                    abortTransaction = true;\r\n                    abortReason = 'nodata';\r\n                    events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\r\n                }\r\n            }\r\n        }\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n        events = [];\r\n        if (abortTransaction) {\r\n            // Abort.\r\n            queue[i].status = 2 /* COMPLETED */;\r\n            // Removing a listener can trigger pruning which can muck with\r\n            // mergedData/visibleData (as it prunes data). So defer the unwatcher\r\n            // until we're done.\r\n            (function (unwatcher) {\r\n                setTimeout(unwatcher, Math.floor(0));\r\n            })(queue[i].unwatcher);\r\n            if (queue[i].onComplete) {\r\n                if (abortReason === 'nodata') {\r\n                    callbacks.push(() => queue[i].onComplete(null, false, queue[i].currentInputSnapshot));\r\n                }\r\n                else {\r\n                    callbacks.push(() => queue[i].onComplete(new Error(abortReason), false, null));\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // Clean up completed transactions.\r\n    repoPruneCompletedTransactionsBelowNode(repo, repo.transactionQueueTree_);\r\n    // Now fire callbacks, now that we're in a good, known state.\r\n    for (let i = 0; i < callbacks.length; i++) {\r\n        exceptionGuard(callbacks[i]);\r\n    }\r\n    // Try to send the transaction result to the server.\r\n    repoSendReadyTransactions(repo, repo.transactionQueueTree_);\r\n}\r\n/**\r\n * Returns the rootmost ancestor node of the specified path that has a pending\r\n * transaction on it, or just returns the node for the given path if there are\r\n * no pending transactions on any ancestor.\r\n *\r\n * @param path - The location to start at.\r\n * @returns The rootmost node with a transaction.\r\n */\r\nfunction repoGetAncestorTransactionNode(repo, path) {\r\n    let front;\r\n    // Start at the root and walk deeper into the tree towards path until we\r\n    // find a node with pending transactions.\r\n    let transactionNode = repo.transactionQueueTree_;\r\n    front = pathGetFront(path);\r\n    while (front !== null && treeGetValue(transactionNode) === undefined) {\r\n        transactionNode = treeSubTree(transactionNode, front);\r\n        path = pathPopFront(path);\r\n        front = pathGetFront(path);\r\n    }\r\n    return transactionNode;\r\n}\r\n/**\r\n * Builds the queue of all transactions at or below the specified\r\n * transactionNode.\r\n *\r\n * @param transactionNode\r\n * @returns The generated queue.\r\n */\r\nfunction repoBuildTransactionQueue(repo, transactionNode) {\r\n    // Walk any child transaction queues and aggregate them into a single queue.\r\n    const transactionQueue = [];\r\n    repoAggregateTransactionQueuesForNode(repo, transactionNode, transactionQueue);\r\n    // Sort them by the order the transactions were created.\r\n    transactionQueue.sort((a, b) => a.order - b.order);\r\n    return transactionQueue;\r\n}\r\nfunction repoAggregateTransactionQueuesForNode(repo, node, queue) {\r\n    const nodeQueue = treeGetValue(node);\r\n    if (nodeQueue) {\r\n        for (let i = 0; i < nodeQueue.length; i++) {\r\n            queue.push(nodeQueue[i]);\r\n        }\r\n    }\r\n    treeForEachChild(node, child => {\r\n        repoAggregateTransactionQueuesForNode(repo, child, queue);\r\n    });\r\n}\r\n/**\r\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\r\n */\r\nfunction repoPruneCompletedTransactionsBelowNode(repo, node) {\r\n    const queue = treeGetValue(node);\r\n    if (queue) {\r\n        let to = 0;\r\n        for (let from = 0; from < queue.length; from++) {\r\n            if (queue[from].status !== 2 /* COMPLETED */) {\r\n                queue[to] = queue[from];\r\n                to++;\r\n            }\r\n        }\r\n        queue.length = to;\r\n        treeSetValue(node, queue.length > 0 ? queue : undefined);\r\n    }\r\n    treeForEachChild(node, childNode => {\r\n        repoPruneCompletedTransactionsBelowNode(repo, childNode);\r\n    });\r\n}\r\n/**\r\n * Aborts all transactions on ancestors or descendants of the specified path.\r\n * Called when doing a set() or update() since we consider them incompatible\r\n * with transactions.\r\n *\r\n * @param path - Path for which we want to abort related transactions.\r\n */\r\nfunction repoAbortTransactions(repo, path) {\r\n    const affectedPath = treeGetPath(repoGetAncestorTransactionNode(repo, path));\r\n    const transactionNode = treeSubTree(repo.transactionQueueTree_, path);\r\n    treeForEachAncestor(transactionNode, (node) => {\r\n        repoAbortTransactionsOnNode(repo, node);\r\n    });\r\n    repoAbortTransactionsOnNode(repo, transactionNode);\r\n    treeForEachDescendant(transactionNode, (node) => {\r\n        repoAbortTransactionsOnNode(repo, node);\r\n    });\r\n    return affectedPath;\r\n}\r\n/**\r\n * Abort transactions stored in this transaction queue node.\r\n *\r\n * @param node - Node to abort transactions for.\r\n */\r\nfunction repoAbortTransactionsOnNode(repo, node) {\r\n    const queue = treeGetValue(node);\r\n    if (queue) {\r\n        // Queue up the callbacks and fire them after cleaning up all of our\r\n        // transaction state, since the callback could trigger more transactions\r\n        // or sets.\r\n        const callbacks = [];\r\n        // Go through queue.  Any already-sent transactions must be marked for\r\n        // abort, while the unsent ones can be immediately aborted and removed.\r\n        let events = [];\r\n        let lastSent = -1;\r\n        for (let i = 0; i < queue.length; i++) {\r\n            if (queue[i].status === 3 /* SENT_NEEDS_ABORT */) ;\r\n            else if (queue[i].status === 1 /* SENT */) {\r\n                assert(lastSent === i - 1, 'All SENT items should be at beginning of queue.');\r\n                lastSent = i;\r\n                // Mark transaction for abort when it comes back.\r\n                queue[i].status = 3 /* SENT_NEEDS_ABORT */;\r\n                queue[i].abortReason = 'set';\r\n            }\r\n            else {\r\n                assert(queue[i].status === 0 /* RUN */, 'Unexpected transaction status in abort');\r\n                // We can abort it immediately.\r\n                queue[i].unwatcher();\r\n                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId, true));\r\n                if (queue[i].onComplete) {\r\n                    callbacks.push(queue[i].onComplete.bind(null, new Error('set'), false, null));\r\n                }\r\n            }\r\n        }\r\n        if (lastSent === -1) {\r\n            // We're not waiting for any sent transactions.  We can clear the queue.\r\n            treeSetValue(node, undefined);\r\n        }\r\n        else {\r\n            // Remove the transactions we aborted.\r\n            queue.length = lastSent + 1;\r\n        }\r\n        // Now fire the callbacks.\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, treeGetPath(node), events);\r\n        for (let i = 0; i < callbacks.length; i++) {\r\n            exceptionGuard(callbacks[i]);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction decodePath(pathString) {\r\n    let pathStringDecoded = '';\r\n    const pieces = pathString.split('/');\r\n    for (let i = 0; i < pieces.length; i++) {\r\n        if (pieces[i].length > 0) {\r\n            let piece = pieces[i];\r\n            try {\r\n                piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\r\n            }\r\n            catch (e) { }\r\n            pathStringDecoded += '/' + piece;\r\n        }\r\n    }\r\n    return pathStringDecoded;\r\n}\r\n/**\r\n * @returns key value hash\r\n */\r\nfunction decodeQuery(queryString) {\r\n    const results = {};\r\n    if (queryString.charAt(0) === '?') {\r\n        queryString = queryString.substring(1);\r\n    }\r\n    for (const segment of queryString.split('&')) {\r\n        if (segment.length === 0) {\r\n            continue;\r\n        }\r\n        const kv = segment.split('=');\r\n        if (kv.length === 2) {\r\n            results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\r\n        }\r\n        else {\r\n            warn(`Invalid query segment '${segment}' in query '${queryString}'`);\r\n        }\r\n    }\r\n    return results;\r\n}\r\nconst parseRepoInfo = function (dataURL, nodeAdmin) {\r\n    const parsedUrl = parseDatabaseURL(dataURL), namespace = parsedUrl.namespace;\r\n    if (parsedUrl.domain === 'firebase.com') {\r\n        fatal(parsedUrl.host +\r\n            ' is no longer supported. ' +\r\n            'Please use <YOUR FIREBASE>.firebaseio.com instead');\r\n    }\r\n    // Catch common error of uninitialized namespace value.\r\n    if ((!namespace || namespace === 'undefined') &&\r\n        parsedUrl.domain !== 'localhost') {\r\n        fatal('Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com');\r\n    }\r\n    if (!parsedUrl.secure) {\r\n        warnIfPageIsSecure();\r\n    }\r\n    const webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\r\n    return {\r\n        repoInfo: new RepoInfo(parsedUrl.host, parsedUrl.secure, namespace, nodeAdmin, webSocketOnly, \r\n        /*persistenceKey=*/ '', \r\n        /*includeNamespaceInQueryParams=*/ namespace !== parsedUrl.subdomain),\r\n        path: new Path(parsedUrl.pathString)\r\n    };\r\n};\r\nconst parseDatabaseURL = function (dataURL) {\r\n    // Default to empty strings in the event of a malformed string.\r\n    let host = '', domain = '', subdomain = '', pathString = '', namespace = '';\r\n    // Always default to SSL, unless otherwise specified.\r\n    let secure = true, scheme = 'https', port = 443;\r\n    // Don't do any validation here. The caller is responsible for validating the result of parsing.\r\n    if (typeof dataURL === 'string') {\r\n        // Parse scheme.\r\n        let colonInd = dataURL.indexOf('//');\r\n        if (colonInd >= 0) {\r\n            scheme = dataURL.substring(0, colonInd - 1);\r\n            dataURL = dataURL.substring(colonInd + 2);\r\n        }\r\n        // Parse host, path, and query string.\r\n        let slashInd = dataURL.indexOf('/');\r\n        if (slashInd === -1) {\r\n            slashInd = dataURL.length;\r\n        }\r\n        let questionMarkInd = dataURL.indexOf('?');\r\n        if (questionMarkInd === -1) {\r\n            questionMarkInd = dataURL.length;\r\n        }\r\n        host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\r\n        if (slashInd < questionMarkInd) {\r\n            // For pathString, questionMarkInd will always come after slashInd\r\n            pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\r\n        }\r\n        const queryParams = decodeQuery(dataURL.substring(Math.min(dataURL.length, questionMarkInd)));\r\n        // If we have a port, use scheme for determining if it's secure.\r\n        colonInd = host.indexOf(':');\r\n        if (colonInd >= 0) {\r\n            secure = scheme === 'https' || scheme === 'wss';\r\n            port = parseInt(host.substring(colonInd + 1), 10);\r\n        }\r\n        else {\r\n            colonInd = host.length;\r\n        }\r\n        const hostWithoutPort = host.slice(0, colonInd);\r\n        if (hostWithoutPort.toLowerCase() === 'localhost') {\r\n            domain = 'localhost';\r\n        }\r\n        else if (hostWithoutPort.split('.').length <= 2) {\r\n            domain = hostWithoutPort;\r\n        }\r\n        else {\r\n            // Interpret the subdomain of a 3 or more component URL as the namespace name.\r\n            const dotInd = host.indexOf('.');\r\n            subdomain = host.substring(0, dotInd).toLowerCase();\r\n            domain = host.substring(dotInd + 1);\r\n            // Normalize namespaces to lowercase to share storage / connection.\r\n            namespace = subdomain;\r\n        }\r\n        // Always treat the value of the `ns` as the namespace name if it is present.\r\n        if ('ns' in queryParams) {\r\n            namespace = queryParams['ns'];\r\n        }\r\n    }\r\n    return {\r\n        host,\r\n        port,\r\n        domain,\r\n        subdomain,\r\n        secure,\r\n        scheme,\r\n        pathString,\r\n        namespace\r\n    };\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Encapsulates the data needed to raise an event\r\n */\r\nclass DataEvent {\r\n    /**\r\n     * @param eventType - One of: value, child_added, child_changed, child_moved, child_removed\r\n     * @param eventRegistration - The function to call to with the event data. User provided\r\n     * @param snapshot - The data backing the event\r\n     * @param prevName - Optional, the name of the previous child for child_* events.\r\n     */\r\n    constructor(eventType, eventRegistration, snapshot, prevName) {\r\n        this.eventType = eventType;\r\n        this.eventRegistration = eventRegistration;\r\n        this.snapshot = snapshot;\r\n        this.prevName = prevName;\r\n    }\r\n    getPath() {\r\n        const ref = this.snapshot.ref;\r\n        if (this.eventType === 'value') {\r\n            return ref._path;\r\n        }\r\n        else {\r\n            return ref.parent._path;\r\n        }\r\n    }\r\n    getEventType() {\r\n        return this.eventType;\r\n    }\r\n    getEventRunner() {\r\n        return this.eventRegistration.getEventRunner(this);\r\n    }\r\n    toString() {\r\n        return (this.getPath().toString() +\r\n            ':' +\r\n            this.eventType +\r\n            ':' +\r\n            stringify(this.snapshot.exportVal()));\r\n    }\r\n}\r\nclass CancelEvent {\r\n    constructor(eventRegistration, error, path) {\r\n        this.eventRegistration = eventRegistration;\r\n        this.error = error;\r\n        this.path = path;\r\n    }\r\n    getPath() {\r\n        return this.path;\r\n    }\r\n    getEventType() {\r\n        return 'cancel';\r\n    }\r\n    getEventRunner() {\r\n        return this.eventRegistration.getEventRunner(this);\r\n    }\r\n    toString() {\r\n        return this.path.toString() + ':cancel';\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A wrapper class that converts events from the database@exp SDK to the legacy\r\n * Database SDK. Events are not converted directly as event registration relies\r\n * on reference comparison of the original user callback (see `matches()`) and\r\n * relies on equality of the legacy SDK's `context` object.\r\n */\r\nclass CallbackContext {\r\n    constructor(snapshotCallback, cancelCallback) {\r\n        this.snapshotCallback = snapshotCallback;\r\n        this.cancelCallback = cancelCallback;\r\n    }\r\n    onValue(expDataSnapshot, previousChildName) {\r\n        this.snapshotCallback.call(null, expDataSnapshot, previousChildName);\r\n    }\r\n    onCancel(error) {\r\n        assert(this.hasCancelCallback, 'Raising a cancel event on a listener with no cancel callback');\r\n        return this.cancelCallback.call(null, error);\r\n    }\r\n    get hasCancelCallback() {\r\n        return !!this.cancelCallback;\r\n    }\r\n    matches(other) {\r\n        return (this.snapshotCallback === other.snapshotCallback ||\r\n            (this.snapshotCallback.userCallback !== undefined &&\r\n                this.snapshotCallback.userCallback ===\r\n                    other.snapshotCallback.userCallback &&\r\n                this.snapshotCallback.context === other.snapshotCallback.context));\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The `onDisconnect` class allows you to write or clear data when your client\r\n * disconnects from the Database server. These updates occur whether your\r\n * client disconnects cleanly or not, so you can rely on them to clean up data\r\n * even if a connection is dropped or a client crashes.\r\n *\r\n * The `onDisconnect` class is most commonly used to manage presence in\r\n * applications where it is useful to detect how many clients are connected and\r\n * when other clients disconnect. See\r\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n * for more information.\r\n *\r\n * To avoid problems when a connection is dropped before the requests can be\r\n * transferred to the Database server, these functions should be called before\r\n * writing any data.\r\n *\r\n * Note that `onDisconnect` operations are only triggered once. If you want an\r\n * operation to occur each time a disconnect occurs, you'll need to re-establish\r\n * the `onDisconnect` operations each time you reconnect.\r\n */\r\nclass OnDisconnect {\r\n    /** @hideconstructor */\r\n    constructor(_repo, _path) {\r\n        this._repo = _repo;\r\n        this._path = _path;\r\n    }\r\n    /**\r\n     * Cancels all previously queued `onDisconnect()` set or update events for this\r\n     * location and all children.\r\n     *\r\n     * If a write has been queued for this location via a `set()` or `update()` at a\r\n     * parent location, the write at this location will be canceled, though writes\r\n     * to sibling locations will still occur.\r\n     *\r\n     * @returns Resolves when synchronization to the server is complete.\r\n     */\r\n    cancel() {\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectCancel(this._repo, this._path, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Ensures the data at this location is deleted when the client is disconnected\r\n     * (due to closing the browser, navigating to a new page, or network issues).\r\n     *\r\n     * @returns Resolves when synchronization to the server is complete.\r\n     */\r\n    remove() {\r\n        validateWritablePath('OnDisconnect.remove', this._path);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectSet(this._repo, this._path, null, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Ensures the data at this location is set to the specified value when the\r\n     * client is disconnected (due to closing the browser, navigating to a new page,\r\n     * or network issues).\r\n     *\r\n     * `set()` is especially useful for implementing \"presence\" systems, where a\r\n     * value should be changed or cleared when a user disconnects so that they\r\n     * appear \"offline\" to other users. See\r\n     * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n     * for more information.\r\n     *\r\n     * Note that `onDisconnect` operations are only triggered once. If you want an\r\n     * operation to occur each time a disconnect occurs, you'll need to re-establish\r\n     * the `onDisconnect` operations each time.\r\n     *\r\n     * @param value - The value to be written to this location on disconnect (can\r\n     * be an object, array, string, number, boolean, or null).\r\n     * @returns Resolves when synchronization to the Database is complete.\r\n     */\r\n    set(value) {\r\n        validateWritablePath('OnDisconnect.set', this._path);\r\n        validateFirebaseDataArg('OnDisconnect.set', value, this._path, false);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectSet(this._repo, this._path, value, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Ensures the data at this location is set to the specified value and priority\r\n     * when the client is disconnected (due to closing the browser, navigating to a\r\n     * new page, or network issues).\r\n     *\r\n     * @param value - The value to be written to this location on disconnect (can\r\n     * be an object, array, string, number, boolean, or null).\r\n     * @param priority - The priority to be written (string, number, or null).\r\n     * @returns Resolves when synchronization to the Database is complete.\r\n     */\r\n    setWithPriority(value, priority) {\r\n        validateWritablePath('OnDisconnect.setWithPriority', this._path);\r\n        validateFirebaseDataArg('OnDisconnect.setWithPriority', value, this._path, false);\r\n        validatePriority('OnDisconnect.setWithPriority', priority, false);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectSetWithPriority(this._repo, this._path, value, priority, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Writes multiple values at this location when the client is disconnected (due\r\n     * to closing the browser, navigating to a new page, or network issues).\r\n     *\r\n     * The `values` argument contains multiple property-value pairs that will be\r\n     * written to the Database together. Each child property can either be a simple\r\n     * property (for example, \"name\") or a relative path (for example, \"name/first\")\r\n     * from the current location to the data to update.\r\n     *\r\n     * As opposed to the `set()` method, `update()` can be use to selectively update\r\n     * only the referenced properties at the current location (instead of replacing\r\n     * all the child properties at the current location).\r\n     *\r\n     * @param values - Object containing multiple values.\r\n     * @returns Resolves when synchronization to the Database is complete.\r\n     */\r\n    update(values) {\r\n        validateWritablePath('OnDisconnect.update', this._path);\r\n        validateFirebaseMergeDataArg('OnDisconnect.update', values, this._path, false);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectUpdate(this._repo, this._path, values, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @internal\r\n */\r\nclass QueryImpl {\r\n    /**\r\n     * @hideconstructor\r\n     */\r\n    constructor(_repo, _path, _queryParams, _orderByCalled) {\r\n        this._repo = _repo;\r\n        this._path = _path;\r\n        this._queryParams = _queryParams;\r\n        this._orderByCalled = _orderByCalled;\r\n    }\r\n    get key() {\r\n        if (pathIsEmpty(this._path)) {\r\n            return null;\r\n        }\r\n        else {\r\n            return pathGetBack(this._path);\r\n        }\r\n    }\r\n    get ref() {\r\n        return new ReferenceImpl(this._repo, this._path);\r\n    }\r\n    get _queryIdentifier() {\r\n        const obj = queryParamsGetQueryObject(this._queryParams);\r\n        const id = ObjectToUniqueKey(obj);\r\n        return id === '{}' ? 'default' : id;\r\n    }\r\n    /**\r\n     * An object representation of the query parameters used by this Query.\r\n     */\r\n    get _queryObject() {\r\n        return queryParamsGetQueryObject(this._queryParams);\r\n    }\r\n    isEqual(other) {\r\n        other = getModularInstance(other);\r\n        if (!(other instanceof QueryImpl)) {\r\n            return false;\r\n        }\r\n        const sameRepo = this._repo === other._repo;\r\n        const samePath = pathEquals(this._path, other._path);\r\n        const sameQueryIdentifier = this._queryIdentifier === other._queryIdentifier;\r\n        return sameRepo && samePath && sameQueryIdentifier;\r\n    }\r\n    toJSON() {\r\n        return this.toString();\r\n    }\r\n    toString() {\r\n        return this._repo.toString() + pathToUrlEncodedString(this._path);\r\n    }\r\n}\r\n/**\r\n * Validates that no other order by call has been made\r\n */\r\nfunction validateNoPreviousOrderByCall(query, fnName) {\r\n    if (query._orderByCalled === true) {\r\n        throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\r\n    }\r\n}\r\n/**\r\n * Validates start/end values for queries.\r\n */\r\nfunction validateQueryEndpoints(params) {\r\n    let startNode = null;\r\n    let endNode = null;\r\n    if (params.hasStart()) {\r\n        startNode = params.getIndexStartValue();\r\n    }\r\n    if (params.hasEnd()) {\r\n        endNode = params.getIndexEndValue();\r\n    }\r\n    if (params.getIndex() === KEY_INDEX) {\r\n        const tooManyArgsError = 'Query: When ordering by key, you may only pass one argument to ' +\r\n            'startAt(), endAt(), or equalTo().';\r\n        const wrongArgTypeError = 'Query: When ordering by key, the argument passed to startAt(), startAfter(), ' +\r\n            'endAt(), endBefore(), or equalTo() must be a string.';\r\n        if (params.hasStart()) {\r\n            const startName = params.getIndexStartName();\r\n            if (startName !== MIN_NAME) {\r\n                throw new Error(tooManyArgsError);\r\n            }\r\n            else if (typeof startNode !== 'string') {\r\n                throw new Error(wrongArgTypeError);\r\n            }\r\n        }\r\n        if (params.hasEnd()) {\r\n            const endName = params.getIndexEndName();\r\n            if (endName !== MAX_NAME) {\r\n                throw new Error(tooManyArgsError);\r\n            }\r\n            else if (typeof endNode !== 'string') {\r\n                throw new Error(wrongArgTypeError);\r\n            }\r\n        }\r\n    }\r\n    else if (params.getIndex() === PRIORITY_INDEX) {\r\n        if ((startNode != null && !isValidPriority(startNode)) ||\r\n            (endNode != null && !isValidPriority(endNode))) {\r\n            throw new Error('Query: When ordering by priority, the first argument passed to startAt(), ' +\r\n                'startAfter() endAt(), endBefore(), or equalTo() must be a valid priority value ' +\r\n                '(null, a number, or a string).');\r\n        }\r\n    }\r\n    else {\r\n        assert(params.getIndex() instanceof PathIndex ||\r\n            params.getIndex() === VALUE_INDEX, 'unknown index type.');\r\n        if ((startNode != null && typeof startNode === 'object') ||\r\n            (endNode != null && typeof endNode === 'object')) {\r\n            throw new Error('Query: First argument passed to startAt(), startAfter(), endAt(), endBefore(), or ' +\r\n                'equalTo() cannot be an object.');\r\n        }\r\n    }\r\n}\r\n/**\r\n * Validates that limit* has been called with the correct combination of parameters\r\n */\r\nfunction validateLimit(params) {\r\n    if (params.hasStart() &&\r\n        params.hasEnd() &&\r\n        params.hasLimit() &&\r\n        !params.hasAnchoredLimit()) {\r\n        throw new Error(\"Query: Can't combine startAt(), startAfter(), endAt(), endBefore(), and limit(). Use \" +\r\n            'limitToFirst() or limitToLast() instead.');\r\n    }\r\n}\r\n/**\r\n * @internal\r\n */\r\nclass ReferenceImpl extends QueryImpl {\r\n    /** @hideconstructor */\r\n    constructor(repo, path) {\r\n        super(repo, path, new QueryParams(), false);\r\n    }\r\n    get parent() {\r\n        const parentPath = pathParent(this._path);\r\n        return parentPath === null\r\n            ? null\r\n            : new ReferenceImpl(this._repo, parentPath);\r\n    }\r\n    get root() {\r\n        let ref = this;\r\n        while (ref.parent !== null) {\r\n            ref = ref.parent;\r\n        }\r\n        return ref;\r\n    }\r\n}\r\n/**\r\n * A `DataSnapshot` contains data from a Database location.\r\n *\r\n * Any time you read data from the Database, you receive the data as a\r\n * `DataSnapshot`. A `DataSnapshot` is passed to the event callbacks you attach\r\n * with `on()` or `once()`. You can extract the contents of the snapshot as a\r\n * JavaScript object by calling the `val()` method. Alternatively, you can\r\n * traverse into the snapshot by calling `child()` to return child snapshots\r\n * (which you could then call `val()` on).\r\n *\r\n * A `DataSnapshot` is an efficiently generated, immutable copy of the data at\r\n * a Database location. It cannot be modified and will never change (to modify\r\n * data, you always call the `set()` method on a `Reference` directly).\r\n */\r\nclass DataSnapshot {\r\n    /**\r\n     * @param _node - A SnapshotNode to wrap.\r\n     * @param ref - The location this snapshot came from.\r\n     * @param _index - The iteration order for this snapshot\r\n     * @hideconstructor\r\n     */\r\n    constructor(_node, \r\n    /**\r\n     * The location of this DataSnapshot.\r\n     */\r\n    ref, _index) {\r\n        this._node = _node;\r\n        this.ref = ref;\r\n        this._index = _index;\r\n    }\r\n    /**\r\n     * Gets the priority value of the data in this `DataSnapshot`.\r\n     *\r\n     * Applications need not use priority but can order collections by\r\n     * ordinary properties (see\r\n     * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data |Sorting and filtering data}\r\n     * ).\r\n     */\r\n    get priority() {\r\n        // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\r\n        return this._node.getPriority().val();\r\n    }\r\n    /**\r\n     * The key (last part of the path) of the location of this `DataSnapshot`.\r\n     *\r\n     * The last token in a Database location is considered its key. For example,\r\n     * \"ada\" is the key for the /users/ada/ node. Accessing the key on any\r\n     * `DataSnapshot` will return the key for the location that generated it.\r\n     * However, accessing the key on the root URL of a Database will return\r\n     * `null`.\r\n     */\r\n    get key() {\r\n        return this.ref.key;\r\n    }\r\n    /** Returns the number of child properties of this `DataSnapshot`. */\r\n    get size() {\r\n        return this._node.numChildren();\r\n    }\r\n    /**\r\n     * Gets another `DataSnapshot` for the location at the specified relative path.\r\n     *\r\n     * Passing a relative path to the `child()` method of a DataSnapshot returns\r\n     * another `DataSnapshot` for the location at the specified relative path. The\r\n     * relative path can either be a simple child name (for example, \"ada\") or a\r\n     * deeper, slash-separated path (for example, \"ada/name/first\"). If the child\r\n     * location has no data, an empty `DataSnapshot` (that is, a `DataSnapshot`\r\n     * whose value is `null`) is returned.\r\n     *\r\n     * @param path - A relative path to the location of child data.\r\n     */\r\n    child(path) {\r\n        const childPath = new Path(path);\r\n        const childRef = child(this.ref, path);\r\n        return new DataSnapshot(this._node.getChild(childPath), childRef, PRIORITY_INDEX);\r\n    }\r\n    /**\r\n     * Returns true if this `DataSnapshot` contains any data. It is slightly more\r\n     * efficient than using `snapshot.val() !== null`.\r\n     */\r\n    exists() {\r\n        return !this._node.isEmpty();\r\n    }\r\n    /**\r\n     * Exports the entire contents of the DataSnapshot as a JavaScript object.\r\n     *\r\n     * The `exportVal()` method is similar to `val()`, except priority information\r\n     * is included (if available), making it suitable for backing up your data.\r\n     *\r\n     * @returns The DataSnapshot's contents as a JavaScript value (Object,\r\n     *   Array, string, number, boolean, or `null`).\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    exportVal() {\r\n        return this._node.val(true);\r\n    }\r\n    /**\r\n     * Enumerates the top-level children in the `DataSnapshot`.\r\n     *\r\n     * Because of the way JavaScript objects work, the ordering of data in the\r\n     * JavaScript object returned by `val()` is not guaranteed to match the\r\n     * ordering on the server nor the ordering of `onChildAdded()` events. That is\r\n     * where `forEach()` comes in handy. It guarantees the children of a\r\n     * `DataSnapshot` will be iterated in their query order.\r\n     *\r\n     * If no explicit `orderBy*()` method is used, results are returned\r\n     * ordered by key (unless priorities are used, in which case, results are\r\n     * returned by priority).\r\n     *\r\n     * @param action - A function that will be called for each child DataSnapshot.\r\n     * The callback can return true to cancel further enumeration.\r\n     * @returns true if enumeration was canceled due to your callback returning\r\n     * true.\r\n     */\r\n    forEach(action) {\r\n        if (this._node.isLeafNode()) {\r\n            return false;\r\n        }\r\n        const childrenNode = this._node;\r\n        // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\r\n        return !!childrenNode.forEachChild(this._index, (key, node) => {\r\n            return action(new DataSnapshot(node, child(this.ref, key), PRIORITY_INDEX));\r\n        });\r\n    }\r\n    /**\r\n     * Returns true if the specified child path has (non-null) data.\r\n     *\r\n     * @param path - A relative path to the location of a potential child.\r\n     * @returns `true` if data exists at the specified child path; else\r\n     *  `false`.\r\n     */\r\n    hasChild(path) {\r\n        const childPath = new Path(path);\r\n        return !this._node.getChild(childPath).isEmpty();\r\n    }\r\n    /**\r\n     * Returns whether or not the `DataSnapshot` has any non-`null` child\r\n     * properties.\r\n     *\r\n     * You can use `hasChildren()` to determine if a `DataSnapshot` has any\r\n     * children. If it does, you can enumerate them using `forEach()`. If it\r\n     * doesn't, then either this snapshot contains a primitive value (which can be\r\n     * retrieved with `val()`) or it is empty (in which case, `val()` will return\r\n     * `null`).\r\n     *\r\n     * @returns true if this snapshot has any children; else false.\r\n     */\r\n    hasChildren() {\r\n        if (this._node.isLeafNode()) {\r\n            return false;\r\n        }\r\n        else {\r\n            return !this._node.isEmpty();\r\n        }\r\n    }\r\n    /**\r\n     * Returns a JSON-serializable representation of this object.\r\n     */\r\n    toJSON() {\r\n        return this.exportVal();\r\n    }\r\n    /**\r\n     * Extracts a JavaScript value from a `DataSnapshot`.\r\n     *\r\n     * Depending on the data in a `DataSnapshot`, the `val()` method may return a\r\n     * scalar type (string, number, or boolean), an array, or an object. It may\r\n     * also return null, indicating that the `DataSnapshot` is empty (contains no\r\n     * data).\r\n     *\r\n     * @returns The DataSnapshot's contents as a JavaScript value (Object,\r\n     *   Array, string, number, boolean, or `null`).\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    val() {\r\n        return this._node.val();\r\n    }\r\n}\r\n/**\r\n *\r\n * Returns a `Reference` representing the location in the Database\r\n * corresponding to the provided path. If no path is provided, the `Reference`\r\n * will point to the root of the Database.\r\n *\r\n * @param db - The database instance to obtain a reference for.\r\n * @param path - Optional path representing the location the returned\r\n *   `Reference` will point. If not provided, the returned `Reference` will\r\n *   point to the root of the Database.\r\n * @returns If a path is provided, a `Reference`\r\n *   pointing to the provided path. Otherwise, a `Reference` pointing to the\r\n *   root of the Database.\r\n */\r\nfunction ref(db, path) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('ref');\r\n    return path !== undefined ? child(db._root, path) : db._root;\r\n}\r\n/**\r\n * Returns a `Reference` representing the location in the Database\r\n * corresponding to the provided Firebase URL.\r\n *\r\n * An exception is thrown if the URL is not a valid Firebase Database URL or it\r\n * has a different domain than the current `Database` instance.\r\n *\r\n * Note that all query parameters (`orderBy`, `limitToLast`, etc.) are ignored\r\n * and are not applied to the returned `Reference`.\r\n *\r\n * @param db - The database instance to obtain a reference for.\r\n * @param url - The Firebase URL at which the returned `Reference` will\r\n *   point.\r\n * @returns A `Reference` pointing to the provided\r\n *   Firebase URL.\r\n */\r\nfunction refFromURL(db, url) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('refFromURL');\r\n    const parsedURL = parseRepoInfo(url, db._repo.repoInfo_.nodeAdmin);\r\n    validateUrl('refFromURL', parsedURL);\r\n    const repoInfo = parsedURL.repoInfo;\r\n    if (!db._repo.repoInfo_.isCustomHost() &&\r\n        repoInfo.host !== db._repo.repoInfo_.host) {\r\n        fatal('refFromURL' +\r\n            ': Host name does not match the current database: ' +\r\n            '(found ' +\r\n            repoInfo.host +\r\n            ' but expected ' +\r\n            db._repo.repoInfo_.host +\r\n            ')');\r\n    }\r\n    return ref(db, parsedURL.path.toString());\r\n}\r\n/**\r\n * Gets a `Reference` for the location at the specified relative path.\r\n *\r\n * The relative path can either be a simple child name (for example, \"ada\") or\r\n * a deeper slash-separated path (for example, \"ada/name/first\").\r\n *\r\n * @param parent - The parent location.\r\n * @param path - A relative path from this location to the desired child\r\n *   location.\r\n * @returns The specified child location.\r\n */\r\nfunction child(parent, path) {\r\n    parent = getModularInstance(parent);\r\n    if (pathGetFront(parent._path) === null) {\r\n        validateRootPathString('child', 'path', path, false);\r\n    }\r\n    else {\r\n        validatePathString('child', 'path', path, false);\r\n    }\r\n    return new ReferenceImpl(parent._repo, pathChild(parent._path, path));\r\n}\r\n/**\r\n * Returns an `OnDisconnect` object - see\r\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n * for more information on how to use it.\r\n *\r\n * @param ref - The reference to add OnDisconnect triggers for.\r\n */\r\nfunction onDisconnect(ref) {\r\n    ref = getModularInstance(ref);\r\n    return new OnDisconnect(ref._repo, ref._path);\r\n}\r\n/**\r\n * Generates a new child location using a unique key and returns its\r\n * `Reference`.\r\n *\r\n * This is the most common pattern for adding data to a collection of items.\r\n *\r\n * If you provide a value to `push()`, the value is written to the\r\n * generated location. If you don't pass a value, nothing is written to the\r\n * database and the child remains empty (but you can use the `Reference`\r\n * elsewhere).\r\n *\r\n * The unique keys generated by `push()` are ordered by the current time, so the\r\n * resulting list of items is chronologically sorted. The keys are also\r\n * designed to be unguessable (they contain 72 random bits of entropy).\r\n *\r\n * See {@link https://firebase.google.com/docs/database/web/lists-of-data#append_to_a_list_of_data | Append to a list of data}\r\n * </br>See {@link ttps://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html | The 2^120 Ways to Ensure Unique Identifiers}\r\n *\r\n * @param parent - The parent location.\r\n * @param value - Optional value to be written at the generated location.\r\n * @returns Combined `Promise` and `Reference`; resolves when write is complete,\r\n * but can be used immediately as the `Reference` to the child location.\r\n */\r\nfunction push(parent, value) {\r\n    parent = getModularInstance(parent);\r\n    validateWritablePath('push', parent._path);\r\n    validateFirebaseDataArg('push', value, parent._path, true);\r\n    const now = repoServerTime(parent._repo);\r\n    const name = nextPushId(now);\r\n    // push() returns a ThennableReference whose promise is fulfilled with a\r\n    // regular Reference. We use child() to create handles to two different\r\n    // references. The first is turned into a ThennableReference below by adding\r\n    // then() and catch() methods and is used as the return value of push(). The\r\n    // second remains a regular Reference and is used as the fulfilled value of\r\n    // the first ThennableReference.\r\n    const thennablePushRef = child(parent, name);\r\n    const pushRef = child(parent, name);\r\n    let promise;\r\n    if (value != null) {\r\n        promise = set(pushRef, value).then(() => pushRef);\r\n    }\r\n    else {\r\n        promise = Promise.resolve(pushRef);\r\n    }\r\n    thennablePushRef.then = promise.then.bind(promise);\r\n    thennablePushRef.catch = promise.then.bind(promise, undefined);\r\n    return thennablePushRef;\r\n}\r\n/**\r\n * Removes the data at this Database location.\r\n *\r\n * Any data at child locations will also be deleted.\r\n *\r\n * The effect of the remove will be visible immediately and the corresponding\r\n * event 'value' will be triggered. Synchronization of the remove to the\r\n * Firebase servers will also be started, and the returned Promise will resolve\r\n * when complete. If provided, the onComplete callback will be called\r\n * asynchronously after synchronization has finished.\r\n *\r\n * @param ref - The location to remove.\r\n * @returns Resolves when remove on server is complete.\r\n */\r\nfunction remove(ref) {\r\n    validateWritablePath('remove', ref._path);\r\n    return set(ref, null);\r\n}\r\n/**\r\n * Writes data to this Database location.\r\n *\r\n * This will overwrite any data at this location and all child locations.\r\n *\r\n * The effect of the write will be visible immediately, and the corresponding\r\n * events (\"value\", \"child_added\", etc.) will be triggered. Synchronization of\r\n * the data to the Firebase servers will also be started, and the returned\r\n * Promise will resolve when complete. If provided, the `onComplete` callback\r\n * will be called asynchronously after synchronization has finished.\r\n *\r\n * Passing `null` for the new value is equivalent to calling `remove()`; namely,\r\n * all data at this location and all child locations will be deleted.\r\n *\r\n * `set()` will remove any priority stored at this location, so if priority is\r\n * meant to be preserved, you need to use `setWithPriority()` instead.\r\n *\r\n * Note that modifying data with `set()` will cancel any pending transactions\r\n * at that location, so extreme care should be taken if mixing `set()` and\r\n * `transaction()` to modify the same data.\r\n *\r\n * A single `set()` will generate a single \"value\" event at the location where\r\n * the `set()` was performed.\r\n *\r\n * @param ref - The location to write to.\r\n * @param value - The value to be written (string, number, boolean, object,\r\n *   array, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\r\nfunction set(ref, value) {\r\n    ref = getModularInstance(ref);\r\n    validateWritablePath('set', ref._path);\r\n    validateFirebaseDataArg('set', value, ref._path, false);\r\n    const deferred = new Deferred();\r\n    repoSetWithPriority(ref._repo, ref._path, value, \r\n    /*priority=*/ null, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Sets a priority for the data at this Database location.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\r\n * ).\r\n *\r\n * @param ref - The location to write to.\r\n * @param priority - The priority to be written (string, number, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\r\nfunction setPriority(ref, priority) {\r\n    ref = getModularInstance(ref);\r\n    validateWritablePath('setPriority', ref._path);\r\n    validatePriority('setPriority', priority, false);\r\n    const deferred = new Deferred();\r\n    repoSetWithPriority(ref._repo, pathChild(ref._path, '.priority'), priority, null, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Writes data the Database location. Like `set()` but also specifies the\r\n * priority for that data.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\r\n * ).\r\n *\r\n * @param ref - The location to write to.\r\n * @param value - The value to be written (string, number, boolean, object,\r\n *   array, or null).\r\n * @param priority - The priority to be written (string, number, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\r\nfunction setWithPriority(ref, value, priority) {\r\n    validateWritablePath('setWithPriority', ref._path);\r\n    validateFirebaseDataArg('setWithPriority', value, ref._path, false);\r\n    validatePriority('setWithPriority', priority, false);\r\n    if (ref.key === '.length' || ref.key === '.keys') {\r\n        throw 'setWithPriority failed: ' + ref.key + ' is a read-only object.';\r\n    }\r\n    const deferred = new Deferred();\r\n    repoSetWithPriority(ref._repo, ref._path, value, priority, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Writes multiple values to the Database at once.\r\n *\r\n * The `values` argument contains multiple property-value pairs that will be\r\n * written to the Database together. Each child property can either be a simple\r\n * property (for example, \"name\") or a relative path (for example,\r\n * \"name/first\") from the current location to the data to update.\r\n *\r\n * As opposed to the `set()` method, `update()` can be use to selectively update\r\n * only the referenced properties at the current location (instead of replacing\r\n * all the child properties at the current location).\r\n *\r\n * The effect of the write will be visible immediately, and the corresponding\r\n * events ('value', 'child_added', etc.) will be triggered. Synchronization of\r\n * the data to the Firebase servers will also be started, and the returned\r\n * Promise will resolve when complete. If provided, the `onComplete` callback\r\n * will be called asynchronously after synchronization has finished.\r\n *\r\n * A single `update()` will generate a single \"value\" event at the location\r\n * where the `update()` was performed, regardless of how many children were\r\n * modified.\r\n *\r\n * Note that modifying data with `update()` will cancel any pending\r\n * transactions at that location, so extreme care should be taken if mixing\r\n * `update()` and `transaction()` to modify the same data.\r\n *\r\n * Passing `null` to `update()` will remove the data at this location.\r\n *\r\n * See\r\n * {@link https://firebase.googleblog.com/2015/09/introducing-multi-location-updates-and_86.html | Introducing multi-location updates and more}.\r\n *\r\n * @param ref - The location to write to.\r\n * @param values - Object containing multiple values.\r\n * @returns Resolves when update on server is complete.\r\n */\r\nfunction update(ref, values) {\r\n    validateFirebaseMergeDataArg('update', values, ref._path, false);\r\n    const deferred = new Deferred();\r\n    repoUpdate(ref._repo, ref._path, values, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Gets the most up-to-date result for this query.\r\n *\r\n * @param query - The query to run.\r\n * @returns A `Promise` which resolves to the resulting DataSnapshot if a value is\r\n * available, or rejects if the client is unable to return a value (e.g., if the\r\n * server is unreachable and there is nothing cached).\r\n */\r\nfunction get(query) {\r\n    query = getModularInstance(query);\r\n    return repoGetValue(query._repo, query).then(node => {\r\n        return new DataSnapshot(node, new ReferenceImpl(query._repo, query._path), query._queryParams.getIndex());\r\n    });\r\n}\r\n/**\r\n * Represents registration for 'value' events.\r\n */\r\nclass ValueEventRegistration {\r\n    constructor(callbackContext) {\r\n        this.callbackContext = callbackContext;\r\n    }\r\n    respondsTo(eventType) {\r\n        return eventType === 'value';\r\n    }\r\n    createEvent(change, query) {\r\n        const index = query._queryParams.getIndex();\r\n        return new DataEvent('value', this, new DataSnapshot(change.snapshotNode, new ReferenceImpl(query._repo, query._path), index));\r\n    }\r\n    getEventRunner(eventData) {\r\n        if (eventData.getEventType() === 'cancel') {\r\n            return () => this.callbackContext.onCancel(eventData.error);\r\n        }\r\n        else {\r\n            return () => this.callbackContext.onValue(eventData.snapshot, null);\r\n        }\r\n    }\r\n    createCancelEvent(error, path) {\r\n        if (this.callbackContext.hasCancelCallback) {\r\n            return new CancelEvent(this, error, path);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    matches(other) {\r\n        if (!(other instanceof ValueEventRegistration)) {\r\n            return false;\r\n        }\r\n        else if (!other.callbackContext || !this.callbackContext) {\r\n            // If no callback specified, we consider it to match any callback.\r\n            return true;\r\n        }\r\n        else {\r\n            return other.callbackContext.matches(this.callbackContext);\r\n        }\r\n    }\r\n    hasAnyCallback() {\r\n        return this.callbackContext !== null;\r\n    }\r\n}\r\n/**\r\n * Represents the registration of a child_x event.\r\n */\r\nclass ChildEventRegistration {\r\n    constructor(eventType, callbackContext) {\r\n        this.eventType = eventType;\r\n        this.callbackContext = callbackContext;\r\n    }\r\n    respondsTo(eventType) {\r\n        let eventToCheck = eventType === 'children_added' ? 'child_added' : eventType;\r\n        eventToCheck =\r\n            eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\r\n        return this.eventType === eventToCheck;\r\n    }\r\n    createCancelEvent(error, path) {\r\n        if (this.callbackContext.hasCancelCallback) {\r\n            return new CancelEvent(this, error, path);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    createEvent(change, query) {\r\n        assert(change.childName != null, 'Child events should have a childName.');\r\n        const childRef = child(new ReferenceImpl(query._repo, query._path), change.childName);\r\n        const index = query._queryParams.getIndex();\r\n        return new DataEvent(change.type, this, new DataSnapshot(change.snapshotNode, childRef, index), change.prevName);\r\n    }\r\n    getEventRunner(eventData) {\r\n        if (eventData.getEventType() === 'cancel') {\r\n            return () => this.callbackContext.onCancel(eventData.error);\r\n        }\r\n        else {\r\n            return () => this.callbackContext.onValue(eventData.snapshot, eventData.prevName);\r\n        }\r\n    }\r\n    matches(other) {\r\n        if (other instanceof ChildEventRegistration) {\r\n            return (this.eventType === other.eventType &&\r\n                (!this.callbackContext ||\r\n                    !other.callbackContext ||\r\n                    this.callbackContext.matches(other.callbackContext)));\r\n        }\r\n        return false;\r\n    }\r\n    hasAnyCallback() {\r\n        return !!this.callbackContext;\r\n    }\r\n}\r\nfunction addEventListener(query, eventType, callback, cancelCallbackOrListenOptions, options) {\r\n    let cancelCallback;\r\n    if (typeof cancelCallbackOrListenOptions === 'object') {\r\n        cancelCallback = undefined;\r\n        options = cancelCallbackOrListenOptions;\r\n    }\r\n    if (typeof cancelCallbackOrListenOptions === 'function') {\r\n        cancelCallback = cancelCallbackOrListenOptions;\r\n    }\r\n    if (options && options.onlyOnce) {\r\n        const userCallback = callback;\r\n        const onceCallback = (dataSnapshot, previousChildName) => {\r\n            repoRemoveEventCallbackForQuery(query._repo, query, container);\r\n            userCallback(dataSnapshot, previousChildName);\r\n        };\r\n        onceCallback.userCallback = callback.userCallback;\r\n        onceCallback.context = callback.context;\r\n        callback = onceCallback;\r\n    }\r\n    const callbackContext = new CallbackContext(callback, cancelCallback || undefined);\r\n    const container = eventType === 'value'\r\n        ? new ValueEventRegistration(callbackContext)\r\n        : new ChildEventRegistration(eventType, callbackContext);\r\n    repoAddEventCallbackForQuery(query._repo, query, container);\r\n    return () => repoRemoveEventCallbackForQuery(query._repo, query, container);\r\n}\r\nfunction onValue(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'value', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildAdded(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_added', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildChanged(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_changed', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildMoved(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_moved', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildRemoved(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_removed', callback, cancelCallbackOrListenOptions, options);\r\n}\r\n/**\r\n * Detaches a callback previously attached with `on()`.\r\n *\r\n * Detach a callback previously attached with `on()`. Note that if `on()` was\r\n * called multiple times with the same eventType and callback, the callback\r\n * will be called multiple times for each event, and `off()` must be called\r\n * multiple times to remove the callback. Calling `off()` on a parent listener\r\n * will not automatically remove listeners registered on child nodes, `off()`\r\n * must also be called on any child listeners to remove the callback.\r\n *\r\n * If a callback is not specified, all callbacks for the specified eventType\r\n * will be removed. Similarly, if no eventType is specified, all callbacks\r\n * for the `Reference` will be removed.\r\n *\r\n * Individual listeners can also be removed by invoking their unsubscribe\r\n * callbacks.\r\n *\r\n * @param query - The query that the listener was registered with.\r\n * @param eventType - One of the following strings: \"value\", \"child_added\",\r\n * \"child_changed\", \"child_removed\", or \"child_moved.\" If omitted, all callbacks\r\n * for the `Reference` will be removed.\r\n * @param callback - The callback function that was passed to `on()` or\r\n * `undefined` to remove all callbacks.\r\n */\r\nfunction off(query, eventType, callback) {\r\n    let container = null;\r\n    const expCallback = callback ? new CallbackContext(callback) : null;\r\n    if (eventType === 'value') {\r\n        container = new ValueEventRegistration(expCallback);\r\n    }\r\n    else if (eventType) {\r\n        container = new ChildEventRegistration(eventType, expCallback);\r\n    }\r\n    repoRemoveEventCallbackForQuery(query._repo, query, container);\r\n}\r\n/**\r\n * A `QueryConstraint` is used to narrow the set of documents returned by a\r\n * Database query. `QueryConstraint`s are created by invoking {@link endAt},\r\n * {@link endBefore}, {@link startAt}, {@link startAfter}, {@link\r\n * limitToFirst}, {@link limitToLast}, {@link orderByChild},\r\n * {@link orderByChild}, {@link orderByKey} , {@link orderByPriority} ,\r\n * {@link orderByValue}  or {@link equalTo} and\r\n * can then be passed to {@link query} to create a new query instance that\r\n * also contains this `QueryConstraint`.\r\n */\r\nclass QueryConstraint {\r\n}\r\nclass QueryEndAtConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('endAt', this._value, query._path, true);\r\n        const newParams = queryParamsEndAt(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasEnd()) {\r\n            throw new Error('endAt: Starting point was already set (by another call to endAt, ' +\r\n                'endBefore or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified ending point.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The ending point is inclusive, so children with exactly the specified value\r\n * will be included in the query. The optional key argument can be used to\r\n * further limit the range of the query. If it is specified, then children that\r\n * have exactly the specified value must also have a key name less than or equal\r\n * to the specified key.\r\n *\r\n * You can read more about `endAt()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to end at. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to end at, among the children with the previously\r\n * specified priority. This argument is only allowed if ordering by child,\r\n * value, or priority.\r\n */\r\nfunction endAt(value, key) {\r\n    validateKey('endAt', 'key', key, true);\r\n    return new QueryEndAtConstraint(value, key);\r\n}\r\nclass QueryEndBeforeConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('endBefore', this._value, query._path, false);\r\n        const newParams = queryParamsEndBefore(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasEnd()) {\r\n            throw new Error('endBefore: Starting point was already set (by another call to endAt, ' +\r\n                'endBefore or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified ending point (exclusive).\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The ending point is exclusive. If only a value is provided, children\r\n * with a value less than the specified value will be included in the query.\r\n * If a key is specified, then children must have a value lesss than or equal\r\n * to the specified value and a a key name less than the specified key.\r\n *\r\n * @param value - The value to end before. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to end before, among the children with the\r\n * previously specified priority. This argument is only allowed if ordering by\r\n * child, value, or priority.\r\n */\r\nfunction endBefore(value, key) {\r\n    validateKey('endBefore', 'key', key, true);\r\n    return new QueryEndBeforeConstraint(value, key);\r\n}\r\nclass QueryStartAtConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('startAt', this._value, query._path, true);\r\n        const newParams = queryParamsStartAt(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasStart()) {\r\n            throw new Error('startAt: Starting point was already set (by another call to startAt, ' +\r\n                'startBefore or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified starting point.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The starting point is inclusive, so children with exactly the specified value\r\n * will be included in the query. The optional key argument can be used to\r\n * further limit the range of the query. If it is specified, then children that\r\n * have exactly the specified value must also have a key name greater than or\r\n * equal to the specified key.\r\n *\r\n * You can read more about `startAt()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to start at. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start at. This argument is only allowed if\r\n * ordering by child, value, or priority.\r\n */\r\nfunction startAt(value = null, key) {\r\n    validateKey('startAt', 'key', key, true);\r\n    return new QueryStartAtConstraint(value, key);\r\n}\r\nclass QueryStartAfterConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('startAfter', this._value, query._path, false);\r\n        const newParams = queryParamsStartAfter(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasStart()) {\r\n            throw new Error('startAfter: Starting point was already set (by another call to startAt, ' +\r\n                'startAfter, or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified starting point (exclusive).\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The starting point is exclusive. If only a value is provided, children\r\n * with a value greater than the specified value will be included in the query.\r\n * If a key is specified, then children must have a value greater than or equal\r\n * to the specified value and a a key name greater than the specified key.\r\n *\r\n * @param value - The value to start after. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start after. This argument is only allowed if\r\n * ordering by child, value, or priority.\r\n */\r\nfunction startAfter(value, key) {\r\n    validateKey('startAfter', 'key', key, true);\r\n    return new QueryStartAfterConstraint(value, key);\r\n}\r\nclass QueryLimitToFirstConstraint extends QueryConstraint {\r\n    constructor(_limit) {\r\n        super();\r\n        this._limit = _limit;\r\n    }\r\n    _apply(query) {\r\n        if (query._queryParams.hasLimit()) {\r\n            throw new Error('limitToFirst: Limit was already set (by another call to limitToFirst ' +\r\n                'or limitToLast).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, queryParamsLimitToFirst(query._queryParams, this._limit), query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that if limited to the first specific number\r\n * of children.\r\n *\r\n * The `limitToFirst()` method is used to set a maximum number of children to be\r\n * synced for a given callback. If we set a limit of 100, we will initially only\r\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\r\n * stored in our Database, a `child_added` event will fire for each message.\r\n * However, if we have over 100 messages, we will only receive a `child_added`\r\n * event for the first 100 ordered messages. As items change, we will receive\r\n * `child_removed` events for each item that drops out of the active list so\r\n * that the total number stays at 100.\r\n *\r\n * You can read more about `limitToFirst()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param limit - The maximum number of nodes to include in this query.\r\n */\r\nfunction limitToFirst(limit) {\r\n    if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\r\n        throw new Error('limitToFirst: First argument must be a positive integer.');\r\n    }\r\n    return new QueryLimitToFirstConstraint(limit);\r\n}\r\nclass QueryLimitToLastConstraint extends QueryConstraint {\r\n    constructor(_limit) {\r\n        super();\r\n        this._limit = _limit;\r\n    }\r\n    _apply(query) {\r\n        if (query._queryParams.hasLimit()) {\r\n            throw new Error('limitToLast: Limit was already set (by another call to limitToFirst ' +\r\n                'or limitToLast).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, queryParamsLimitToLast(query._queryParams, this._limit), query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that is limited to return only the last\r\n * specified number of children.\r\n *\r\n * The `limitToLast()` method is used to set a maximum number of children to be\r\n * synced for a given callback. If we set a limit of 100, we will initially only\r\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\r\n * stored in our Database, a `child_added` event will fire for each message.\r\n * However, if we have over 100 messages, we will only receive a `child_added`\r\n * event for the last 100 ordered messages. As items change, we will receive\r\n * `child_removed` events for each item that drops out of the active list so\r\n * that the total number stays at 100.\r\n *\r\n * You can read more about `limitToLast()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param limit - The maximum number of nodes to include in this query.\r\n */\r\nfunction limitToLast(limit) {\r\n    if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\r\n        throw new Error('limitToLast: First argument must be a positive integer.');\r\n    }\r\n    return new QueryLimitToLastConstraint(limit);\r\n}\r\nclass QueryOrderByChildConstraint extends QueryConstraint {\r\n    constructor(_path) {\r\n        super();\r\n        this._path = _path;\r\n    }\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByChild');\r\n        const parsedPath = new Path(this._path);\r\n        if (pathIsEmpty(parsedPath)) {\r\n            throw new Error('orderByChild: cannot pass in empty path. Use orderByValue() instead.');\r\n        }\r\n        const index = new PathIndex(parsedPath);\r\n        const newParams = queryParamsOrderBy(query._queryParams, index);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by the specified child key.\r\n *\r\n * Queries can only order by one key at a time. Calling `orderByChild()`\r\n * multiple times on the same query is an error.\r\n *\r\n * Firebase queries allow you to order your data by any child key on the fly.\r\n * However, if you know in advance what your indexes will be, you can define\r\n * them via the .indexOn rule in your Security Rules for better performance. See\r\n * the{@link https://firebase.google.com/docs/database/security/indexing-data}\r\n * rule for more information.\r\n *\r\n * You can read more about `orderByChild()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n *\r\n * @param path - The path to order by.\r\n */\r\nfunction orderByChild(path) {\r\n    if (path === '$key') {\r\n        throw new Error('orderByChild: \"$key\" is invalid.  Use orderByKey() instead.');\r\n    }\r\n    else if (path === '$priority') {\r\n        throw new Error('orderByChild: \"$priority\" is invalid.  Use orderByPriority() instead.');\r\n    }\r\n    else if (path === '$value') {\r\n        throw new Error('orderByChild: \"$value\" is invalid.  Use orderByValue() instead.');\r\n    }\r\n    validatePathString('orderByChild', 'path', path, false);\r\n    return new QueryOrderByChildConstraint(path);\r\n}\r\nclass QueryOrderByKeyConstraint extends QueryConstraint {\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByKey');\r\n        const newParams = queryParamsOrderBy(query._queryParams, KEY_INDEX);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by the key.\r\n *\r\n * Sorts the results of a query by their (ascending) key values.\r\n *\r\n * You can read more about `orderByKey()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n */\r\nfunction orderByKey() {\r\n    return new QueryOrderByKeyConstraint();\r\n}\r\nclass QueryOrderByPriorityConstraint extends QueryConstraint {\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByPriority');\r\n        const newParams = queryParamsOrderBy(query._queryParams, PRIORITY_INDEX);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by priority.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}\r\n * for alternatives to priority.\r\n */\r\nfunction orderByPriority() {\r\n    return new QueryOrderByPriorityConstraint();\r\n}\r\nclass QueryOrderByValueConstraint extends QueryConstraint {\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByValue');\r\n        const newParams = queryParamsOrderBy(query._queryParams, VALUE_INDEX);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by value.\r\n *\r\n * If the children of a query are all scalar values (string, number, or\r\n * boolean), you can order the results by their (ascending) values.\r\n *\r\n * You can read more about `orderByValue()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n */\r\nfunction orderByValue() {\r\n    return new QueryOrderByValueConstraint();\r\n}\r\nclass QueryEqualToValueConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('equalTo', this._value, query._path, false);\r\n        if (query._queryParams.hasStart()) {\r\n            throw new Error('equalTo: Starting point was already set (by another call to startAt/startAfter or ' +\r\n                'equalTo).');\r\n        }\r\n        if (query._queryParams.hasEnd()) {\r\n            throw new Error('equalTo: Ending point was already set (by another call to endAt/endBefore or ' +\r\n                'equalTo).');\r\n        }\r\n        return new QueryEndAtConstraint(this._value, this._key)._apply(new QueryStartAtConstraint(this._value, this._key)._apply(query));\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` that includes children that match the specified\r\n * value.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The optional key argument can be used to further limit the range of the\r\n * query. If it is specified, then children that have exactly the specified\r\n * value must also have exactly the specified key as their key name. This can be\r\n * used to filter result sets with many matches for the same value.\r\n *\r\n * You can read more about `equalTo()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to match for. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start at, among the children with the\r\n * previously specified priority. This argument is only allowed if ordering by\r\n * child, value, or priority.\r\n */\r\nfunction equalTo(value, key) {\r\n    validateKey('equalTo', 'key', key, true);\r\n    return new QueryEqualToValueConstraint(value, key);\r\n}\r\n/**\r\n * Creates a new immutable instance of `Query` that is extended to also include\r\n * additional query constraints.\r\n *\r\n * @param query - The Query instance to use as a base for the new constraints.\r\n * @param queryConstraints - The list of `QueryConstraint`s to apply.\r\n * @throws if any of the provided query constraints cannot be combined with the\r\n * existing or new constraints.\r\n */\r\nfunction query(query, ...queryConstraints) {\r\n    let queryImpl = getModularInstance(query);\r\n    for (const constraint of queryConstraints) {\r\n        queryImpl = constraint._apply(queryImpl);\r\n    }\r\n    return queryImpl;\r\n}\r\n/**\r\n * Define reference constructor in various modules\r\n *\r\n * We are doing this here to avoid several circular\r\n * dependency issues\r\n */\r\nsyncPointSetReferenceConstructor(ReferenceImpl);\r\nsyncTreeSetReferenceConstructor(ReferenceImpl);\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This variable is also defined in the firebase Node.js Admin SDK. Before\r\n * modifying this definition, consult the definition in:\r\n *\r\n * https://github.com/firebase/firebase-admin-node\r\n *\r\n * and make sure the two are consistent.\r\n */\r\nconst FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';\r\n/**\r\n * Creates and caches `Repo` instances.\r\n */\r\nconst repos = {};\r\n/**\r\n * If true, any new `Repo` will be created to use `ReadonlyRestClient` (for testing purposes).\r\n */\r\nlet useRestClient = false;\r\n/**\r\n * Update an existing `Repo` in place to point to a new host/port.\r\n */\r\nfunction repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider) {\r\n    repo.repoInfo_ = new RepoInfo(`${host}:${port}`, \r\n    /* secure= */ false, repo.repoInfo_.namespace, repo.repoInfo_.webSocketOnly, repo.repoInfo_.nodeAdmin, repo.repoInfo_.persistenceKey, repo.repoInfo_.includeNamespaceInQueryParams);\r\n    if (tokenProvider) {\r\n        repo.authTokenProvider_ = tokenProvider;\r\n    }\r\n}\r\n/**\r\n * This function should only ever be called to CREATE a new database instance.\r\n * @internal\r\n */\r\nfunction repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url, nodeAdmin) {\r\n    let dbUrl = url || app.options.databaseURL;\r\n    if (dbUrl === undefined) {\r\n        if (!app.options.projectId) {\r\n            fatal(\"Can't determine Firebase Database URL. Be sure to include \" +\r\n                ' a Project ID when calling firebase.initializeApp().');\r\n        }\r\n        log('Using default host for project ', app.options.projectId);\r\n        dbUrl = `${app.options.projectId}-default-rtdb.firebaseio.com`;\r\n    }\r\n    let parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\r\n    let repoInfo = parsedUrl.repoInfo;\r\n    let isEmulator;\r\n    let dbEmulatorHost = undefined;\r\n    if (typeof process !== 'undefined') {\r\n        dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];\r\n    }\r\n    if (dbEmulatorHost) {\r\n        isEmulator = true;\r\n        dbUrl = `http://${dbEmulatorHost}?ns=${repoInfo.namespace}`;\r\n        parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\r\n        repoInfo = parsedUrl.repoInfo;\r\n    }\r\n    else {\r\n        isEmulator = !parsedUrl.repoInfo.secure;\r\n    }\r\n    const authTokenProvider = nodeAdmin && isEmulator\r\n        ? new EmulatorTokenProvider(EmulatorTokenProvider.OWNER)\r\n        : new FirebaseAuthTokenProvider(app.name, app.options, authProvider);\r\n    validateUrl('Invalid Firebase Database URL', parsedUrl);\r\n    if (!pathIsEmpty(parsedUrl.path)) {\r\n        fatal('Database URL must point to the root of a Firebase Database ' +\r\n            '(not including a child path).');\r\n    }\r\n    const repo = repoManagerCreateRepo(repoInfo, app, authTokenProvider, new AppCheckTokenProvider(app.name, appCheckProvider));\r\n    return new Database(repo, app);\r\n}\r\n/**\r\n * Remove the repo and make sure it is disconnected.\r\n *\r\n */\r\nfunction repoManagerDeleteRepo(repo, appName) {\r\n    const appRepos = repos[appName];\r\n    // This should never happen...\r\n    if (!appRepos || appRepos[repo.key] !== repo) {\r\n        fatal(`Database ${appName}(${repo.repoInfo_}) has already been deleted.`);\r\n    }\r\n    repoInterrupt(repo);\r\n    delete appRepos[repo.key];\r\n}\r\n/**\r\n * Ensures a repo doesn't already exist and then creates one using the\r\n * provided app.\r\n *\r\n * @param repoInfo - The metadata about the Repo\r\n * @returns The Repo object for the specified server / repoName.\r\n */\r\nfunction repoManagerCreateRepo(repoInfo, app, authTokenProvider, appCheckProvider) {\r\n    let appRepos = repos[app.name];\r\n    if (!appRepos) {\r\n        appRepos = {};\r\n        repos[app.name] = appRepos;\r\n    }\r\n    let repo = appRepos[repoInfo.toURLString()];\r\n    if (repo) {\r\n        fatal('Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.');\r\n    }\r\n    repo = new Repo(repoInfo, useRestClient, authTokenProvider, appCheckProvider);\r\n    appRepos[repoInfo.toURLString()] = repo;\r\n    return repo;\r\n}\r\n/**\r\n * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\r\n */\r\nfunction repoManagerForceRestClient(forceRestClient) {\r\n    useRestClient = forceRestClient;\r\n}\r\n/**\r\n * Class representing a Firebase Realtime Database.\r\n */\r\nclass Database {\r\n    /** @hideconstructor */\r\n    constructor(_repoInternal, \r\n    /** The {@link @firebase/app#FirebaseApp} associated with this Realtime Database instance. */\r\n    app) {\r\n        this._repoInternal = _repoInternal;\r\n        this.app = app;\r\n        /** Represents a `Database` instance. */\r\n        this['type'] = 'database';\r\n        /** Track if the instance has been used (root or repo accessed) */\r\n        this._instanceStarted = false;\r\n    }\r\n    get _repo() {\r\n        if (!this._instanceStarted) {\r\n            repoStart(this._repoInternal, this.app.options.appId, this.app.options['databaseAuthVariableOverride']);\r\n            this._instanceStarted = true;\r\n        }\r\n        return this._repoInternal;\r\n    }\r\n    get _root() {\r\n        if (!this._rootInternal) {\r\n            this._rootInternal = new ReferenceImpl(this._repo, newEmptyPath());\r\n        }\r\n        return this._rootInternal;\r\n    }\r\n    _delete() {\r\n        if (this._rootInternal !== null) {\r\n            repoManagerDeleteRepo(this._repo, this.app.name);\r\n            this._repoInternal = null;\r\n            this._rootInternal = null;\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n    _checkNotDeleted(apiName) {\r\n        if (this._rootInternal === null) {\r\n            fatal('Cannot call ' + apiName + ' on a deleted database.');\r\n        }\r\n    }\r\n}\r\n/**\r\n * Returns the instance of the Realtime Database SDK that is associated\r\n * with the provided {@link @firebase/app#FirebaseApp}. Initializes a new instance with\r\n * with default settings if no instance exists or if the existing instance uses\r\n * a custom database URL.\r\n *\r\n * @param app - The {@link @firebase/app#FirebaseApp} instance that the returned Realtime\r\n * Database instance is associated with.\r\n * @param url - The URL of the Realtime Database instance to connect to. If not\r\n * provided, the SDK connects to the default instance of the Firebase App.\r\n * @returns The `Database` instance of the provided app.\r\n */\r\nfunction getDatabase(app = getApp(), url) {\r\n    return _getProvider(app, 'database').getImmediate({\r\n        identifier: url\r\n    });\r\n}\r\n/**\r\n * Modify the provided instance to communicate with the Realtime Database\r\n * emulator.\r\n *\r\n * <p>Note: This method must be called before performing any other operation.\r\n *\r\n * @param db - The instance to modify.\r\n * @param host - The emulator host (ex: localhost)\r\n * @param port - The emulator port (ex: 8080)\r\n * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\r\n */\r\nfunction connectDatabaseEmulator(db, host, port, options = {}) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('useEmulator');\r\n    if (db._instanceStarted) {\r\n        fatal('Cannot call useEmulator() after instance has already been initialized.');\r\n    }\r\n    const repo = db._repoInternal;\r\n    let tokenProvider = undefined;\r\n    if (repo.repoInfo_.nodeAdmin) {\r\n        if (options.mockUserToken) {\r\n            fatal('mockUserToken is not supported by the Admin SDK. For client access with mock users, please use the \"firebase\" package instead of \"firebase-admin\".');\r\n        }\r\n        tokenProvider = new EmulatorTokenProvider(EmulatorTokenProvider.OWNER);\r\n    }\r\n    else if (options.mockUserToken) {\r\n        const token = typeof options.mockUserToken === 'string'\r\n            ? options.mockUserToken\r\n            : createMockUserToken(options.mockUserToken, db.app.options.projectId);\r\n        tokenProvider = new EmulatorTokenProvider(token);\r\n    }\r\n    // Modify the repo to apply emulator settings\r\n    repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider);\r\n}\r\n/**\r\n * Disconnects from the server (all Database operations will be completed\r\n * offline).\r\n *\r\n * The client automatically maintains a persistent connection to the Database\r\n * server, which will remain active indefinitely and reconnect when\r\n * disconnected. However, the `goOffline()` and `goOnline()` methods may be used\r\n * to control the client connection in cases where a persistent connection is\r\n * undesirable.\r\n *\r\n * While offline, the client will no longer receive data updates from the\r\n * Database. However, all Database operations performed locally will continue to\r\n * immediately fire events, allowing your application to continue behaving\r\n * normally. Additionally, each operation performed locally will automatically\r\n * be queued and retried upon reconnection to the Database server.\r\n *\r\n * To reconnect to the Database and begin receiving remote events, see\r\n * `goOnline()`.\r\n *\r\n * @param db - The instance to disconnect.\r\n */\r\nfunction goOffline(db) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('goOffline');\r\n    repoInterrupt(db._repo);\r\n}\r\n/**\r\n * Reconnects to the server and synchronizes the offline Database state\r\n * with the server state.\r\n *\r\n * This method should be used after disabling the active connection with\r\n * `goOffline()`. Once reconnected, the client will transmit the proper data\r\n * and fire the appropriate events so that your client \"catches up\"\r\n * automatically.\r\n *\r\n * @param db - The instance to reconnect.\r\n */\r\nfunction goOnline(db) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('goOnline');\r\n    repoResume(db._repo);\r\n}\r\nfunction enableLogging(logger, persistent) {\r\n    enableLogging$1(logger, persistent);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction registerDatabase(variant) {\r\n    setSDKVersion(SDK_VERSION$1);\r\n    _registerComponent(new Component('database', (container, { instanceIdentifier: url }) => {\r\n        const app = container.getProvider('app').getImmediate();\r\n        const authProvider = container.getProvider('auth-internal');\r\n        const appCheckProvider = container.getProvider('app-check-internal');\r\n        return repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url);\r\n    }, \"PUBLIC\" /* PUBLIC */).setMultipleInstances(true));\r\n    registerVersion(name, version, variant);\r\n    // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\r\n    registerVersion(name, version, 'esm2017');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst SERVER_TIMESTAMP = {\r\n    '.sv': 'timestamp'\r\n};\r\n/**\r\n * Returns a placeholder value for auto-populating the current timestamp (time\r\n * since the Unix epoch, in milliseconds) as determined by the Firebase\r\n * servers.\r\n */\r\nfunction serverTimestamp() {\r\n    return SERVER_TIMESTAMP;\r\n}\r\n/**\r\n * Returns a placeholder value that can be used to atomically increment the\r\n * current database value by the provided delta.\r\n *\r\n * @param delta - the amount to modify the current value atomically.\r\n * @returns A placeholder value for modifying data atomically server-side.\r\n */\r\nfunction increment(delta) {\r\n    return {\r\n        '.sv': {\r\n            'increment': delta\r\n        }\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A type for the resolve value of {@link runTransaction}.\r\n */\r\nclass TransactionResult {\r\n    /** @hideconstructor */\r\n    constructor(\r\n    /** Whether the transaction was successfully committed. */\r\n    committed, \r\n    /** The resulting data snapshot. */\r\n    snapshot) {\r\n        this.committed = committed;\r\n        this.snapshot = snapshot;\r\n    }\r\n    /** Returns a JSON-serializable representation of this object. */\r\n    toJSON() {\r\n        return { committed: this.committed, snapshot: this.snapshot.toJSON() };\r\n    }\r\n}\r\n/**\r\n * Atomically modifies the data at this location.\r\n *\r\n * Atomically modify the data at this location. Unlike a normal `set()`, which\r\n * just overwrites the data regardless of its previous value, `runTransaction()` is\r\n * used to modify the existing value to a new value, ensuring there are no\r\n * conflicts with other clients writing to the same location at the same time.\r\n *\r\n * To accomplish this, you pass `runTransaction()` an update function which is\r\n * used to transform the current value into a new value. If another client\r\n * writes to the location before your new value is successfully written, your\r\n * update function will be called again with the new current value, and the\r\n * write will be retried. This will happen repeatedly until your write succeeds\r\n * without conflict or you abort the transaction by not returning a value from\r\n * your update function.\r\n *\r\n * Note: Modifying data with `set()` will cancel any pending transactions at\r\n * that location, so extreme care should be taken if mixing `set()` and\r\n * `runTransaction()` to update the same data.\r\n *\r\n * Note: When using transactions with Security and Firebase Rules in place, be\r\n * aware that a client needs `.read` access in addition to `.write` access in\r\n * order to perform a transaction. This is because the client-side nature of\r\n * transactions requires the client to read the data in order to transactionally\r\n * update it.\r\n *\r\n * @param ref - The location to atomically modify.\r\n * @param transactionUpdate - A developer-supplied function which will be passed\r\n * the current data stored at this location (as a JavaScript object). The\r\n * function should return the new value it would like written (as a JavaScript\r\n * object). If `undefined` is returned (i.e. you return with no arguments) the\r\n * transaction will be aborted and the data at this location will not be\r\n * modified.\r\n * @param options - An options object to configure transactions.\r\n * @returns A `Promise` that can optionally be used instead of the `onComplete`\r\n * callback to handle success and failure.\r\n */\r\nfunction runTransaction(ref, \r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\ntransactionUpdate, options) {\r\n    var _a;\r\n    ref = getModularInstance(ref);\r\n    validateWritablePath('Reference.transaction', ref._path);\r\n    if (ref.key === '.length' || ref.key === '.keys') {\r\n        throw ('Reference.transaction failed: ' + ref.key + ' is a read-only object.');\r\n    }\r\n    const applyLocally = (_a = options === null || options === void 0 ? void 0 : options.applyLocally) !== null && _a !== void 0 ? _a : true;\r\n    const deferred = new Deferred();\r\n    const promiseComplete = (error, committed, node) => {\r\n        let dataSnapshot = null;\r\n        if (error) {\r\n            deferred.reject(error);\r\n        }\r\n        else {\r\n            dataSnapshot = new DataSnapshot(node, new ReferenceImpl(ref._repo, ref._path), PRIORITY_INDEX);\r\n            deferred.resolve(new TransactionResult(committed, dataSnapshot));\r\n        }\r\n    };\r\n    // Add a watch to make sure we get server updates.\r\n    const unwatcher = onValue(ref, () => { });\r\n    repoStartTransaction(ref._repo, ref._path, transactionUpdate, promiseComplete, unwatcher, applyLocally);\r\n    return deferred.promise;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nPersistentConnection;\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nPersistentConnection.prototype.simpleListen = function (pathString, onComplete) {\r\n    this.sendRequest('q', { p: pathString }, onComplete);\r\n};\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nPersistentConnection.prototype.echo = function (data, onEcho) {\r\n    this.sendRequest('echo', { d: data }, onEcho);\r\n};\r\n// RealTimeConnection properties that we use in tests.\r\nConnection;\r\n/**\r\n * @internal\r\n */\r\nconst hijackHash = function (newHash) {\r\n    const oldPut = PersistentConnection.prototype.put;\r\n    PersistentConnection.prototype.put = function (pathString, data, onComplete, hash) {\r\n        if (hash !== undefined) {\r\n            hash = newHash();\r\n        }\r\n        oldPut.call(this, pathString, data, onComplete, hash);\r\n    };\r\n    return function () {\r\n        PersistentConnection.prototype.put = oldPut;\r\n    };\r\n};\r\nRepoInfo;\r\n/**\r\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\r\n * @internal\r\n */\r\nconst forceRestClient = function (forceRestClient) {\r\n    repoManagerForceRestClient(forceRestClient);\r\n};\n\n/**\r\n * Firebase Realtime Database\r\n *\r\n * @packageDocumentation\r\n */\r\nregisterDatabase();\n\nexport { DataSnapshot, Database, OnDisconnect, QueryConstraint, TransactionResult, QueryImpl as _QueryImpl, QueryParams as _QueryParams, ReferenceImpl as _ReferenceImpl, forceRestClient as _TEST_ACCESS_forceRestClient, hijackHash as _TEST_ACCESS_hijackHash, repoManagerDatabaseFromApp as _repoManagerDatabaseFromApp, setSDKVersion as _setSDKVersion, validatePathString as _validatePathString, validateWritablePath as _validateWritablePath, child, connectDatabaseEmulator, enableLogging, endAt, endBefore, equalTo, get, getDatabase, goOffline, goOnline, increment, limitToFirst, limitToLast, off, onChildAdded, onChildChanged, onChildMoved, onChildRemoved, onDisconnect, onValue, orderByChild, orderByKey, orderByPriority, orderByValue, push, query, ref, refFromURL, remove, runTransaction, serverTimestamp, set, setPriority, setWithPriority, startAfter, startAt, update };\n//# sourceMappingURL=index.esm2017.js.map\n","<script>\n  import { app } from \"./firebase\";\n  import { getDatabase, ref, child, get } from \"firebase/database\";\n  import { createEventDispatcher } from \"svelte\";\n  const dispatch = createEventDispatcher();\n\n  function schedule() {\n    let courses = [];\n    const dbRef = ref(getDatabase());\n    get(child(dbRef, `schedule`))\n      .then((snapshot) => {\n        if (snapshot.exists()) {\n          console.log(snapshot.val());\n          let snapshotVal = snapshot.val();\n          for (let index = 0; index < snapshotVal.length; index++) {\n            let course = snapshotVal[index];\n            let ordersArray = course.orders;\n            for (let index = 0; index < ordersArray.length; index++) {\n              let orderId = ordersArray[index];\n              function parentFunc() {\n                let scopedCourse = course;\n                let scopedOrdersArray = ordersArray;\n                let scopedOrderId = orderId;\n                let newCourseEntry = {};\n                newCourseEntry.destination = scopedCourse.destination;\n                newCourseEntry[scopedOrderId] = {};\n                function childFunc(snapshot) {\n                  if (snapshot.exists()) {\n                    let orderItems = snapshot.val();\n                    for (let index = 0; index < orderItems.length; index++) {\n                      let itemId = orderItems[index];\n                      newCourseEntry[scopedOrderId][itemId] = {};\n                      get(child(dbRef, `items/${itemId}/model`)).then(\n                        (snapshot) => {\n                          if (snapshot.exists()) {\n                            newCourseEntry[scopedOrderId][itemId].model =\n                              snapshot.val();\n                          }\n                        }\n                      );\n                      get(child(dbRef, `items/${itemId}/materials`)).then(\n                        (snapshot) => {\n                          if (snapshot.exists()) {\n                            newCourseEntry[scopedOrderId][itemId].materials =\n                              snapshot.val();\n                          }\n                        }\n                      );\n                      setTimeout(() => {\n                        courses.push(newCourseEntry);\n                      }, 10000);\n                    }\n                  } else {\n                  }\n                }\n                return childFunc;\n              }\n              // let childFunc = parentFunc()\n              get(child(dbRef, `allOrders/${orderId}/items`)).then(\n                parentFunc()\n              );\n            }\n          }\n        } else {\n          console.log(\"No data available\");\n        }\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n    setTimeout(() => {\n      eel.dump_orders(courses);\n    }, 15000);\n  }\n  let btn;\n</script>\n\n<div>\n  <h1>Smart Solutions</h1>\n  <button\n    bind:this={btn}\n    on:click={() => {\n      schedule();\n      btn.className = \"d-none\";\n      dispatch(\"buttonPressed\");\n    }}\n    class=\"btn btn-success\">Направи График</button\n  >\n</div>\n\n<style>\n  div {\n    background-color: rgb(39, 39, 39);\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    height: 6rem;\n  }\n  h1 {\n    margin-left: 2rem;\n    color: honeydew;\n  }\n  button {\n    margin-right: 2rem;\n  }\n</style>\n","<script>\n  export let selectedOption;\n</script>\n\n<nav>\n  {#each [\"Машина Рязане\", \"Машина Кант\", \"Машина Дупчене\", \"Склад\"] as optionName}\n    {#if selectedOption == optionName}\n      <div\n        on:click={() => {\n          selectedOption = optionName;\n        }}\n        class=\"option selected\"\n      >\n        <span>{optionName}</span>\n      </div>\n    {:else}\n      <div\n        on:click={() => {\n          selectedOption = optionName;\n        }}\n        class=\"option\"\n      >\n        <span>{optionName}</span>\n      </div>\n    {/if}\n  {/each}\n</nav>\n\n<style>\n  nav {\n    display: flex;\n    height: var(--Nav-height);\n    align-items: center;\n    background-color: grey;\n  }\n  .option {\n    flex-grow: 1;\n    height: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n  span {\n    position: relative;\n    display: inline-flex;\n    align-items: center;\n    color: white;\n    height: 100%;\n  }\n  span:hover {\n    color: var(--font-theme-color);\n  }\n\n  span::after {\n    content: \"\";\n    position: absolute;\n    bottom: 0;\n    left: 50%;\n    transform: translateX(-50%);\n    height: 3px;\n    width: 0;\n    transition: 0.5s;\n    background-color: var(--font-theme-color);\n  }\n  span:hover::after {\n    width: 150%;\n  }\n\n  .selected span {\n    color: var(--font-theme-color);\n  }\n  .selected span::after {\n    width: 150%;\n  }\n</style>\n","<script>\n  import { element } from \"svelte/internal\";\n\n  import Header from \"./Header.svelte\";\n  import Nav from \"./Nav.svelte\";\n  // import anime from \"animejs/lib/anime.es.js\";\n\n  let selectedOption;\n  let loading;\n  let loadingCompleted;\n  let test = \"Test\";\n  // eel.expose(my_javascript_function);\n  // function my_javascript_function() {\n  //   test = \"Test Completed\";\n  //   console.log(\"Hello World\");\n  // }\n\n  function testFunc() {\n    function testReturnJS(n) {\n      console.log(`Got this from python: ${n}`);\n    }\n    eel.test_returns_py(testReturnJS);\n  }\n</script>\n\n<Header\n  on:buttonPressed={() => {\n    loading = true;\n  }}\n/>\n<Nav {selectedOption} />\n\n<main>\n  {#if loading}\n    <div class=\"loading-screen\">\n      <span>Зареждане..</span>\n    </div>\n  {/if}\n  {#if loadingCompleted}\n    Hello World!\n  {/if}\n  <button on:click={testFunc} class=\"btn btn-danger\">Click Me</button>\n</main>\n\n<style>\n  :global(:root) {\n    --font-theme-color: rgb(163, 0, 0);\n    --Header-height: 6rem;\n    --Nav-height: 4rem;\n  }\n  main {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: calc(100vh - var(--Header-height) - var(--Nav-height));\n  }\n</style>\n","import App from './App.svelte';\n\nconst app = new App({\n\ttarget: document.body,\n\tprops: {\n\t\tname: 'world'\n\t}\n});\n\nexport default app;"],"names":["noop","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","element","name","document","createElement","text","data","createTextNode","space","listen","event","handler","options","addEventListener","removeEventListener","attr","attribute","value","removeAttribute","getAttribute","setAttribute","current_component","set_current_component","component","createEventDispatcher","Error","get_current_component","type","detail","callbacks","$$","bubbles","e","createEvent","initCustomEvent","custom_event","slice","call","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","add_render_callback","push","seen_callbacks","Set","flushidx","flush","saved_component","length","update","pop","i","callback","has","add","clear","fragment","before_update","dirty","p","ctx","after_update","outroing","transition_in","block","local","delete","transition_out","o","outros","c","d","create_component","mount_component","customElement","on_mount","on_destroy","m","new_on_destroy","map","filter","destroy_component","detaching","make_dirty","then","fill","init","instance","create_fragment","not_equal","props","append_styles","parent_component","bound","on_disconnect","context","Map","skip_bound","root","ready","ret","rest","hydrate","nodes","Array","from","childNodes","children","l","intro","SvelteComponent","$destroy","this","$on","index","indexOf","splice","$set","$$props","obj","$$set","keys","CONSTANTS","assert","assertion","message","assertionError","stringToByteArray$1","str","out","charCodeAt","base64","byteToCharMap_","charToByteMap_","byteToCharMapWebSafe_","charToByteMapWebSafe_","ENCODED_VALS_BASE","ENCODED_VALS","ENCODED_VALS_WEBSAFE","HAS_NATIVE_SUPPORT","atob","encodeByteArray","input","webSafe","isArray","init_","byteToCharMap","output","byte1","haveByte2","byte2","haveByte3","byte3","outByte1","outByte2","outByte3","outByte4","join","encodeString","btoa","decodeString","bytes","pos","c1","String","fromCharCode","c2","u","c3","byteArrayToString","decodeStringToByteArray","charToByteMap","charAt","byte4","base64Decode","console","error","deepCopy","deepExtend","undefined","source","constructor","Date","getTime","prop","hasOwnProperty","Deferred","reject","promise","wrapCallback","catch","isMobileCordova","window","test","navigator","isNodeSdk","FirebaseError","code","customData","super","setPrototypeOf","prototype","captureStackTrace","ErrorFactory","service","serviceName","errors","fullCode","template","replace","PATTERN","_","key","replaceTemplate","fullMessage","jsonEval","JSON","parse","stringify","decode","token","header","claims","signature","parts","split","contains","safeGet","isEmpty","contextObj","res","deepEqual","aKeys","bKeys","k","includes","aProp","bProp","isObject","Sha1","chain_","buf_","W_","pad_","inbuf_","total_","blockSize","reset","compress_","buf","offset","W","t","f","lengthMinusBlock","n","inbuf","digest","totalBits","j","errorPrefix","fnName","argName","stringLength","getModularInstance","_delegate","Component","instanceFactory","multipleInstances","serviceProps","instantiationMode","onInstanceCreated","setInstantiationMode","mode","setMultipleInstances","setServiceProps","setInstanceCreatedCallback","DEFAULT_ENTRY_NAME","Provider","container","instances","instancesDeferred","instancesOptions","onInitCallbacks","get","identifier","normalizedIdentifier","normalizeInstanceIdentifier","deferred","set","isInitialized","shouldAutoInitialize","getOrInitializeService","instanceIdentifier","getImmediate","_a","optional","getComponent","setComponent","isComponentEager","instanceDeferred","entries","clearInstance","async","services","values","all","INTERNAL","_delete","isComponentSet","getOptions","initialize","opts","onInit","existingCallbacks","existingInstance","invokeOnInitCallbacks","ComponentContainer","providers","addComponent","provider","getProvider","addOrOverwriteComponent","getProviders","LogLevel","levelStringToEnum","debug","DEBUG","verbose","VERBOSE","info","INFO","warn","WARN","ERROR","silent","SILENT","defaultLogLevel","ConsoleMethod","defaultLogHandler","logType","args","logLevel","now","toISOString","method","Logger","_logLevel","_logHandler","_userLogHandler","val","TypeError","setLogLevel","logHandler","userLogHandler","log","PlatformLoggerServiceImpl","getPlatformInfoString","isVersionServiceProvider","library","version","logString","name$o","version$1","logger","PLATFORM_LOG_STRING","firebase","_apps","_components","_addComponent","app","_registerComponent","componentName","ERROR_FACTORY","FirebaseAppImpl","config","_isDeleted","_options","assign","_config","_name","_automaticDataCollectionEnabled","automaticDataCollectionEnabled","_container","checkDestroyed","isDeleted","appName","registerVersion","libraryKeyOrName","variant","libraryMismatch","match","versionMismatch","warning","rawConfig","existingApp","newApp","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","SDK_VERSION","DOMStorageWrapper","domStorage_","prefix_","removeItem","prefixedName_","setItem","storedVal","getItem","remove","toString","MemoryStorage","cache_","isInMemoryStorage","createStoragefor","domStorageName","domStorage","PersistentStorage","SessionStorage","logClient","LUIDGenerator","id","sha1","utf8Bytes","high","stringToByteArray","sha1Bytes","buildLogMessage_","varArgs","arg","apply","firstLog_","logger_","persistent","bind","logWrapper","prefix","fatal","isInvalidJSONNumber","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","MIN_NAME","MAX_NAME","nameCompare","aAsInt","tryParseInt","bAsInt","stringCompare","requireKey","ObjectToUniqueKey","sort","splitStringBySize","segsize","len","dataSegs","substring","each","doubleToIEEE754String","v","bias","s","ln","Infinity","Math","abs","pow","min","floor","LN2","round","bits","reverse","hexByteString","hexByte","parseInt","substr","toLowerCase","INTEGER_REGEXP_","RegExp","intVal","exceptionGuard","setTimeout","stack","setTimeoutNonBlocking","time","timeout","AppCheckTokenProvider","appName_","appCheckProvider","appCheck","getToken","forceRefresh","addTokenChangeListener","listener","addTokenListener","notifyForInvalidToken","FirebaseAuthTokenProvider","firebaseOptions_","authProvider_","auth_","auth","addAuthTokenListener","removeTokenChangeListener","removeAuthTokenListener","errorMessage","EmulatorTokenProvider","accessToken","OWNER","FORGE_DOMAIN_RE","WEBSOCKET","LONG_POLLING","RepoInfo","host","secure","namespace","webSocketOnly","nodeAdmin","persistenceKey","includeNamespaceInQueryParams","_host","_domain","internalHost","isCacheableHost","isCustomHost","newHost","toURLString","protocol","query","repoInfoConnectionURL","repoInfo","params","connURL","repoInfoNeedsQueryParam","pairs","StatsCollection","counters_","incrementCounter","amount","collections","reporters","statsManagerGetCollection","hashString","PacketReceiver","onMessage_","pendingResponses","currentResponseNum","closeAfterResponse","onClose","closeAfter","responseNum","handleResponse","requestNum","toProcess","FIREBASE_LONGPOLL_START_PARAM","BrowserPollConnection","connId","applicationId","appCheckToken","authToken","transportSessionId","lastSessionId","bytesSent","bytesReceived","everConnected_","log_","stats_","urlFn","open","onMessage","onDisconnect","curSegmentNum","onDisconnect_","myPacketOrderer","isClosed_","connectTimeoutTimer_","onClosed_","readyState","called","wrappedFn","body","attachEvent","executeWhenDOMReady","scriptTagHolder","FirebaseIFrameScriptHolder","command","arg1","arg2","arg3","arg4","incrementIncomingBytes_","clearTimeout","password","sendNewPolls","pN","urlParams","random","uniqueCallbackIdentifier","location","hostname","connectURL","addTag","start","startLongPoll","addDisconnectPingFrame","static","forceAllow_","forceDisallow_","href","Windows","UI","markConnectionHealthy","shutdown_","close","myDisconnFrame","send","dataStr","base64data","base64Encode","MAX_URL_DATA_SIZE","enqueueSegment","pw","src","style","display","commandCB","onMessageCB","outstandingRequests","pendingSegs","currentSerial","myIFrame","createIFrame_","script","domain","iframeContents","doc","write","iframe","contentWindow","contentDocument","alive","innerHTML","myID","myPW","newRequest_","size","theURL","curDataString","theSeg","shift","seg","ts","addLongPollTag_","segnum","totalsegs","url","serial","doNewRequest","keepaliveTimeout","loadCB","newScript","onload","onreadystatechange","rstate","onerror","WebSocketImpl","MozWebSocket","WebSocket","WebSocketConnection","keepaliveTimer","frames","totalFrames","connectionURL_","headers","mySock","onopen","onclose","onmessage","handleIncomingFrame","isOldAndroid","userAgent","oldAndroidRegex","oldAndroidMatch","parseFloat","appendFrame_","fullMess","jsonMess","handleNewFrameCount_","frameCount","extractFrameCount_","isNaN","mess","resetKeepAlive","remainingData","sendString_","clearInterval","setInterval","responsesRequiredToBeHealthy","healthyTimeout","TransportManager","initTransports_","ALL_TRANSPORTS","isWebSocketsAvailable","isSkipPollConnection","previouslyFailed","transports_","transports","transport","initialTransport","upgradeTransport","Connection","repoInfo_","applicationId_","appCheckToken_","authToken_","onReady_","onKill_","connectionCount","pendingDataMessages","state_","transportManager_","start_","conn","conn_","nextTransportId_","primaryResponsesRequired_","onMessageReceived","connReceiver_","onConnectionLost","disconnReceiver_","tx_","rx_","secondaryConn_","isHealthy_","healthyTimeoutMS","healthyTimeout_","everConnected","onConnectionLost_","onSecondaryConnectionLost_","onPrimaryMessageReceived_","onSecondaryMessageReceived_","sendRequest","dataMsg","msg","sendData_","tryCleanupConnection","onSecondaryControl_","controlData","cmd","upgradeIfSecondaryHealthy_","secondaryResponsesRequired_","parsedData","layer","proceedWithUpgrade_","onControl_","onDataMessage_","onPrimaryResponse_","payload","onHandshake_","onConnectionShutdown_","onReset_","sendPingOnPrimaryIfNecessary_","handshake","timestamp","h","sessionId","onConnectionEstablished_","tryStartUpgrade_","startUpgrade_","closeConnections_","reason","ServerActions","put","pathString","onComplete","hash","merge","refreshAuthToken","refreshAppCheckToken","onDisconnectPut","onDisconnectMerge","onDisconnectCancel","reportStats","stats","EventEmitter","allowedEvents_","listeners_","trigger","eventType","listeners","on","validateEventType_","eventData","getInitialEvent","off","find","et","OnlineMonitor","online_","currentlyOnline","Path","pathOrString","pieceNum","pieces_","copyTo","pieceNum_","newEmptyPath","pathGetFront","path","pathGetLength","pathPopFront","pathGetBack","pathSlice","begin","pathParent","pieces","pathChild","childPathObj","childPieces","pathIsEmpty","newRelativePath","outerPath","innerPath","outer","inner","pathEquals","other","pathContains","ValidationPath","errorPrefix_","parts_","byteLength_","max","validationPathCheckValid","validationPath","validationPathToErrorString","VisibilityMonitor","hidden","visibilityChange","visible_","visible","RECONNECT_MIN_DELAY","PersistentConnection","onDataUpdate_","onConnectStatus_","onServerInfoUpdate_","authTokenProvider_","appCheckTokenProvider_","authOverride_","nextPersistentConnectionId_","interruptReasons_","listens","outstandingPuts_","outstandingGets_","outstandingPutCount_","outstandingGetCount_","onDisconnectRequestQueue_","connected_","reconnectDelay_","maxReconnectDelay_","securityDebugCallback_","establishConnectionTimer_","requestCBHash_","requestNumber_","realtime_","forceTokenRefresh_","invalidAuthTokenCount_","invalidAppCheckTokenCount_","firstConnection_","lastConnectionAttemptTime_","lastConnectionEstablishedTime_","getInstance","onVisible_","onOnline_","action","onResponse","curReqNum","r","initConnection_","request","_path","q","_queryObject","outstandingGet","sendGet_","currentHashFn","tag","queryId","_queryIdentifier","_queryParams","isDefault","loadsAllData","listenSpec","hashFn","sendListen_","req","status","warnOnListenWarnings_","removeListen_","warnings","indexSpec","getIndex","indexPath","tryAuth","reduceReconnectDelayIfAdminCredential_","credential","isAdmin","tryAppCheck","authMethod","isValidFormat","requestData","cred","onAuthRevoked_","onAppCheckRevoked_","unlisten","sendUnlisten_","queryObj","sendOnDisconnect_","response","putInternal","sendPut_","queued","result","errorReason","reqNum","onDataPush_","onListenRevoked_","onSecurityDebugPacket_","handleTimestamp_","sendConnectStats_","restoreState_","scheduleConnect_","establishConnection_","online","onRealtimeDisconnect_","cancelSentTransactions_","shouldReconnect_","timeSinceLastConnectAttempt","reconnectDelay","onDataMessage","onReady","nextConnectionId_","canceled","connection","closeFn","sendRequestFn","interrupt","resume","delta","serverTimeOffset","normalizedPathString","statusCode","explanation","queries","NamedNode","Index","getCompare","compare","indexedValueChanged","oldNode","newNode","oldWrapped","newWrapped","minPost","MIN","__EMPTY_NODE","KeyIndex","isDefinedOn","maxPost","makePost","indexValue","KEY_INDEX","SortedMapIterator","startKey","comparator","isReverse_","resultGenerator_","nodeStack_","cmp","left","right","getNext","hasNext","peek","LLRBNode","color","RED","SortedMap","EMPTY_NODE","copy","count","inorderTraversal","reverseTraversal","min_","minKey","maxKey","fixUp_","removeMin_","isRed_","moveRedLeft_","smallest","rotateRight_","moveRedRight_","rotateLeft_","colorFlip_","nl","nr","checkMaxDepth_","blackDepth","check_","BLACK","comparator_","root_","getPredecessorKey","rightParent","getIterator","resultGenerator","getIteratorFrom","getReverseIteratorFrom","getReverseIterator","NAME_ONLY_COMPARATOR","NAME_COMPARATOR","MAX_NODE$2","priorityHashText","priority","validatePriorityNode","priorityNode","isLeafNode","getPriority","__childrenNodeConstructor","nodeFromJSON$1","MAX_NODE$1","LeafNode","value_","priorityNode_","lazyHash_","updatePriority","newPriorityNode","getImmediateChild","childName","getChild","hasChild","getPredecessorChildName","childNode","updateImmediateChild","newChildNode","updateChild","front","numChildren","forEachChild","exportFormat","getValue","toHash","compareTo","compareToLeafNode_","otherLeaf","otherLeafType","thisLeafType","otherIndex","VALUE_TYPE_ORDER","thisIndex","withIndex","isIndexed","equals","PRIORITY_INDEX","aPriority","bPriority","indexCmp","LOG_2","Base12Num","num","current_","mask","bits_","nextBitIsOne","buildChildSet","childList","keyFn","mapSortFn","buildBalancedTree","low","namedNode","middle","base12","buildPennant","chunkSize","childTree","attachPennant","pennant","isOne","buildFrom12Array","_defaultIndexMap","fallbackObject","IndexMap","indexes_","indexSet_","Default","indexKey","sortedMap","hasIndex","indexDefinition","addIndex","existingChildren","sawIndexedValue","iter","Wrap","newIndex","next","indexName","newIndexSet","newIndexes","addToIndexes","indexedChildren","existingSnap","newChildren","removeFromIndexes","ChildrenNode","children_","indexMap_","child","newIndexMap","newPriority","newImmediateChild","numKeys","allIntegerKeys","array","childHash","idx","resolveIndex_","predecessor","getFirstChildName","getFirstChild","getLastChildName","getLastChild","wrappedNode","startPost","iterator","endPost","MAX_NODE","otherChildrenNode","thisIter","otherIter","thisCurrent","otherCurrent","defineProperties","MAX","setMaxNode","nodeFromJSON","json","childData","childrenHavePriority","childSet","sortedChildSet","setNodeFromJSON","PathIndex","indexPath_","extractChild","snap","aChild","bChild","valueNode","VALUE_INDEX","changeChildAdded","snapshotNode","changeChildRemoved","changeChildChanged","oldSnap","IndexedFilter","index_","newChild","affectedPath","optChangeAccumulator","oldChild","trackChildChange","updateFullNode","newSnap","filtersNodes","getIndexedFilter","RangedFilter","indexedFilter_","startPost_","getStartPost_","endPost_","getEndPost_","getStartPost","getEndPost","matches","filtered","self","hasStart","startName","getIndexStartName","getIndexStartValue","hasEnd","endName","getIndexEndName","getIndexEndValue","LimitedFilter","rangedFilter_","limit_","getLimit","reverse_","isViewFromLeft","fullLimitUpdateChild_","inRange","indexCompare","foundStartPost","childKey","childSnap","changeAccumulator","oldEventCache","newChildNamedNode","windowBoundary","oldChildSnap","nextChild","getChildAfterChild","compareNext","newEventCache","QueryParams","limitSet_","startSet_","startNameSet_","startAfterSet_","endSet_","endNameSet_","endBeforeSet_","viewFrom_","indexStartValue_","indexStartName_","indexEndValue_","indexEndName_","hasStartAfter","hasEndBefore","hasLimit","hasAnchoredLimit","queryParamsToRestQueryStringParameters","queryParams","qs","orderBy","queryParamsGetQueryObject","viewFrom","ReadonlyRestClient","listens_","listenId","getListenId_","thisListen","queryStringParameters","restRequest_","querystringParams","arrayVal","encodeURIComponent","querystring","xhr","XMLHttpRequest","responseText","SnapshotHolder","rootNode_","getNode","updateSnapshot","newSnapshotNode","newSparseSnapshotTree","sparseSnapshotTreeRemember","sparseSnapshotTree","sparseSnapshotTreeForEachTree","prefixPath","func","tree","sparseSnapshotTreeForEachChild","StatsListener","collection_","last_","newStats","stat","StatsReporter","collection","server_","statsToReport_","statsListener_","reportStats_","reportedStats","haveStatsToReport","OperationType","newOperationSourceServerTaggedQuery","fromUser","fromServer","tagged","AckUserWrite","affectedTree","revert","ACK_USER_WRITE","operationForChild","subtree","Overwrite","OVERWRITE","Merge","MERGE","CacheNode","node_","fullyInitialized_","filtered_","isFullyInitialized","isFiltered","isCompleteForPath","isCompleteForChild","EventGenerator","query_","eventGeneratorGenerateEventsForType","eventGenerator","events","changes","registrations","eventCache","filteredChanges","change","aWrapped","bWrapped","eventGeneratorCompareChanges","materializedChange","prevName","eventGeneratorMaterializeSingleChange","registration","respondsTo","newViewCache","serverCache","viewCacheUpdateEventSnap","viewCache","eventSnap","complete","viewCacheUpdateServerSnap","serverSnap","viewCacheGetCompleteEventSnap","viewCacheGetCompleteServerSnap","emptyChildrenSingleton","ImmutableTree","EmptyChildren","childPath","findRootMostMatchingPathAndValue","relativePath","predicate","childExistingPathAndValue","findRootMostValueAndPath","toSet","setTree","newTree","fold","fold_","pathSoFar","accum","findOnPath","findOnPath_","pathToFollow","foreachOnPath","foreachOnPath_","currentRelativePath","foreach","foreach_","foreachChild","CompoundWrite","writeTree_","compoundWriteAddWrite","compoundWrite","rootmost","rootMostPath","newWriteTree","compoundWriteAddWrites","updates","newWrite","compoundWriteRemoveWrite","empty","compoundWriteHasCompleteWrite","compoundWriteGetCompleteNode","compoundWriteGetCompleteChildren","compoundWriteChildCompoundWrite","shadowingNode","compoundWriteIsEmpty","compoundWriteApply","applySubtreeWrite","writeTree","priorityWrite","writeTreeChildWrites","newWriteTreeRef","writeTreeRemoveWrite","writeId","allWrites","findIndex","writeToRemove","removedWriteWasVisible","removedWriteOverlapsWithOtherWrites","currentWrite","writeTreeRecordContainsPath_","visibleWrites","writeTreeLayerTree_","writeTreeDefaultFilter_","lastWriteId","writeTreeResetTree_","writeRecord","writes","treeRoot","writePath","deepNode","writeTreeCalcCompleteEventCache","treePath","completeServerCache","writeIdsToExclude","includeHiddenWrites","subMerge","writeTreeRefCalcCompleteEventCache","writeTreeRef","writeTreeRefCalcCompleteEventChildren","completeServerChildren","completeChildren","topLevelSet","writeTreeCalcCompleteEventChildren","writeTreeRefCalcEventCacheAfterServerOverwrite","existingEventSnap","existingServerSnap","childMerge","writeTreeCalcEventCacheAfterServerOverwrite","writeTreeRefShadowingWrite","writeTreeShadowingWrite","writeTreeRefCalcIndexedSlice","completeServerData","toIterate","writeTreeCalcIndexedSlice","writeTreeRefCalcCompleteChild","existingServerCache","writeTreeCalcCompleteChild","writeTreeRefChild","ChildChangeAccumulator","changeMap","oldChange","oldType","getChanges","NO_COMPLETE_CHILD_SOURCE","getCompleteChild","WriteTreeCompleteChildSource","writes_","viewCache_","optCompleteServerCache_","serverNode","viewProcessorApplyOperation","viewProcessor","oldViewCache","operation","writesCache","completeCache","accumulator","filterServerNode","overwrite","viewProcessorApplyUserOverwrite","viewProcessorApplyServerOverwrite","changedChildren","curViewCache","viewProcessorCacheHasChild","viewProcessorApplyUserMerge","viewProcessorApplyServerMerge","ackUserWrite","serverChildren","viewProcessorRevertUserWrite","ackPath","mergePath","serverCachePath","viewProcessorAckUserWrite","LISTEN_COMPLETE","oldServerNode","viewProcessorGenerateEventCacheAfterServerEvent","viewProcessorListenComplete","isLeafOrEmpty","oldCompleteSnap","viewProcessorMaybeAddValueEvent","changePath","oldEventSnap","completeEventChildren","completeNode","oldEventNode","updatedPriority","childChangePath","newEventChild","eventChildUpdate","changedSnap","oldServerSnap","newServerCache","serverFilter","newServerNode","viewProcessorApplyMerge","viewMergeTree","childMergeTree","isUnknownDeepMerge","View","initialViewCache","eventRegistrations_","indexFilter","processor_","newViewProcessor","initialServerCache","initialEventCache","eventGenerator_","viewGetCompleteServerCache","view","cache","viewApplyOperation","eventRegistration","eventRegistrations","moves","eventGeneratorGenerateEventsForChanges","viewGenerateEventsForChanges_","referenceConstructor$1","referenceConstructor","SyncPoint","views","syncPointApplyOperation","syncPoint","optCompleteServerCache","concat","syncPointGetCompleteServerCache","SyncTree","listenProvider_","syncPointTree_","pendingWriteTree_","tagToQueryMap","queryToTagMap","syncTreeApplyUserOverwrite","syncTree","newData","writeTreeAddOverwrite","syncTreeApplyOperationToSyncPoints_","syncTreeAckUserWrite","record","writeTreeGetWrite","syncTreeApplyServerOverwrite","syncTreeCalcCompleteEventCache","syncTreeGetServerValue","pathToSyncPoint","sp","serverCacheComplete","serverCacheNode","eventCacheComplete","syncPointGetView","viewGetCompleteNode","syncTreeApplyOperationHelper_","syncPointTree","syncTreeApplyOperationDescendantsHelper_","childOperation","childServerCache","childWritesCache","syncTreeQueryKeyForTag_","syncTreeParseQueryKey_","queryKey","splitIndex","syncTreeApplyTaggedOperation_","queryPath","ExistingValueProvider","DeferredValueProvider","syncTree_","path_","resolveDeferredLeafValue","existingVal","serverValues","resolveScalarDeferredValue","resolveComplexDeferredValue","op","existing","unused","existingNode","resolveDeferredValueSnapshot","resolveDeferredValue","rawPri","leafNode","childrenNode","Tree","parent","childCount","treeSubTree","pathObj","treeGetValue","treeSetValue","treeUpdateParents","treeHasChildren","treeForEachChild","treeForEachDescendant","includeSelf","childrenFirst","treeGetPath","childEmpty","treeIsEmpty","childExists","treeUpdateChild","INVALID_KEY_REGEX_","INVALID_PATH_REGEX_","MAX_LEAF_SIZE_","isValidKey","isValidPathString","validateFirebaseData","hasDotValue","hasActualChild","validationPathPush","last","validationPathPop","validatePathString","argumentName","validateUrl","parsedUrl","isValidRootPathString","EventQueue","eventLists_","recursionDepth_","eventQueueQueueEvents","eventQueue","eventDataList","currList","getPath","eventQueueRaiseEventsForChangedPath","changedPath","eventQueueRaiseQueuedEventsMatchingPredicate","eventPath","sentAll","eventList","eventListRaise","eventFn","getEventRunner","Repo","forceRestClient_","appCheckProvider_","dataUpdateCount","eventQueue_","nextWriteId_","interceptServerDataCallback_","transactionQueueTree_","persistentConnection_","repoStart","repo","authOverride","search","isMerge","repoOnDataUpdate","repoOnConnectStatus","connectStatus","repoUpdateInfo","repoOnServerInfoUpdate","statsReporter_","creatorFunction","statsManagerGetOrCreateReporter","infoData_","infoSyncTree_","startListening","infoEvents","stopListening","serverSyncTree_","repoServerTime","repoGenerateServerValues","taggedChildren","raw","changeTree","fromObject","syncTreeApplyTaggedQueryMerge","taggedSnap","syncTreeApplyTaggedQueryOverwrite","syncTreeApplyServerMerge","repoRerunTransactions","repoLog","resolvedOnDisconnectTree","resolved","resolveDeferredValueTree","repoGetAncestorTransactionNode","transactionNode","treeForEachAncestor","repoAbortTransactionsOnNode","repoAbortTransactions","repoRunOnDisconnectEvents","repoGetNextWriteId","repoGetValue","cached","err","repoGetLatestState","excludeSets","repoSendReadyTransactions","repoPruneCompletedTransactionsBelowNode","queue","repoBuildTransactionQueue","every","transaction","setsToIgnore","txn","currentWriteId","latestState","snapToSend","latestHash","retryCount","currentOutputSnapshotRaw","dataToSend","pathToSend","currentOutputSnapshotResolved","unwatcher","abortReason","repoSendTransactionQueue","rootMostTransactionNode","abortTransaction","currentNode","currentInputSnapshot","newDataNode","oldWriteId","newNodeResolved","applyLocally","repoRerunTransactionQueue","transactionQueue","repoAggregateTransactionQueuesForNode","order","nodeQueue","to","lastSent","parseRepoInfo","dataURL","parseDatabaseURL","scheme","subdomain","port","colonInd","slashInd","questionMarkInd","pathStringDecoded","piece","decodeURIComponent","decodePath","queryString","results","segment","kv","decodeQuery","hostWithoutPort","dotInd","QueryImpl","_repo","_orderByCalled","ref","ReferenceImpl","isEqual","sameRepo","samePath","sameQueryIdentifier","toJSON","pathToUrlEncodedString","parentPath","DataSnapshot","_node","_index","childRef","exists","exportVal","hasChildren","syncPointSetReferenceConstructor","syncTreeSetReferenceConstructor","repos","repoManagerDatabaseFromApp","authProvider","dbUrl","isEmulator","dbEmulatorHost","process","env","authTokenProvider","appRepos","repoManagerCreateRepo","Database","_repoInternal","_instanceStarted","_root","_rootInternal","repoInterrupt","repoManagerDeleteRepo","_checkNotDeleted","apiName","getDatabase","getApp","_getProvider","dispatch","schedule","courses","dbRef","db","snapshot","snapshotVal","course","ordersArray","orders","orderId","parentFunc","scopedCourse","scopedOrderId","newCourseEntry","destination","orderItems","itemId","model","materials","eel","dump_orders","btn","className","simpleListen","echo","onEcho","setSDKVersion","registerDatabase","iterations","selectedOption","optionName","testFunc","test_returns_py","loading","loadingCompleted"],"mappings":"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"}